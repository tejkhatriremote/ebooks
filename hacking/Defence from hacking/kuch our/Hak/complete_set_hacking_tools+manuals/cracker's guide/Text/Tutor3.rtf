{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f56\froman\fcharset238\fprq2 Times New Roman CE;}{\f57\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f59\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f60\froman\fcharset162\fprq2 Times New Roman Tur;}{\f61\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f68\fmodern\fcharset238\fprq1 Courier New CE;}{\f69\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f71\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f72\fmodern\fcharset162\fprq1 Courier New Tur;}{\f73\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\nowidctlpar\widctlpar\adjustright \fs20\lang3081\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\*\listtable{\list\listtemplateid-1\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0
{\leveltext\'01*;}{\levelnumbers;}}{\listname ;}\listid-2}}{\*\listoverridetable{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelold\levelspace0\levelindent360
{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 }}\ls1}}{\info{\author Intern}{\operator Intern}{\creatim\yr1999\mo6\dy3\hr17\min30}{\revtim\yr1999\mo6\dy3\hr17\min31}{\version2}{\edmins0}{\nofpages6}{\nofwords2156}{\nofchars12291}{\*\company Intern}
{\nofcharsws15094}{\vern71}}\widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind4\viewscale100 \fet0\sectd \linex0\headery709\footery709\colsx709\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \nowidctlpar\adjustright \fs20\lang3081\cgrid {\b\f2\fs28\ul\cf2\lang1043\cgrid0 Tutor3:}{\b\f2\fs28\ul\lang1043\cgrid0 
\par }{\lang1043\cgrid0 
\par Welcome to tutorial 3...
\par In this tutorial I will try to recapitulate the things we have learned in the first two tutorials... 
\par Also we will be handling a few real world applications...
\par 
\par }{\b\ul\lang1043\cgrid0 Recapitulation:
\par }{\lang1043\cgrid0 
\par What did we learn in the previous tutorials?
\par That cracking is a way which lets you make programs on your computer behave as  you want 
\par it to behave ... and not as someone else wants...
\par That there are several steps to go through while cracking each program which are:
\par \tab 
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\ls1\adjustright {\lang1043\cgrid0  Watching the standard behavior of the program.

\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab} Disassembling the program.
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab} Finding Strings in the disassembly that we recognize from phase 1
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab} Finding the protection routine
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab} 'Understanding' the jumping mechanism of the protection
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab} Changing the original program, so that it always behaves as you want it to 
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab} run it and feel the power you have ... The power knowledge gives you :-)
\par }\pard \nowidctlpar\adjustright {\lang1043\cgrid0 
\par These are all steps which you have to go through... over and over again ... Until you get bored... 
\par Untill you can dream of the sequence of key-strokes you have to perform while patching an exe.. 
\par Until you start feeling the protection routine ... It is the only way to become a good cracker...
\par 
\par }{\b\ul\lang1043\cgrid0 The Target:
\par }{\lang1043\cgrid0 
\par So for a little exercise, let's crack a few programs:) 
\par The target is High Logic's Font Creator Program. (http://www.high-logic.com/download.html)
\par 
\par }{\b\lang1043\cgrid0 Step 1: Run the program:
\par }{\lang1043\cgrid0 
\par Run it ... 
\par You will see a cool splash....  
\par then a dialog box ... It says: "This product is not registered"
\par Telling you how and where to register.... Lower right panel says 'Unregistered'....
\par That is interesting of course.
\par 
\par Now let's Check out for registration options....
\par Under help, you can select register... 
\par Try to enter a fake name and serial ... look what it does....
\par "Registration Failed: Invalid Password ". 
\par That is the exact message we get....
\par We know enough :-)
\par Close the program.... 
\par 
\par 
\par }{\b\lang1043\cgrid0 Step 2: Disassemble the program:
\par }{\lang1043\cgrid0 
\par Make a copy of fcp.exe, and call it fcp.org (original)...
\par Fire up your W32Dasm and open FCP.ORG... It takes a while to decompile this baby...
\par When W32Dasm is done with disassembling, open the string references list...
\par (Refs-> String Data Refs or the "strn Ref" button)
\par Let's search for familiar strings, like: This product is unregistered, Registration Failed,
\par Thank you for registering....
\par     
\par Indeed, when we scroll down the alphabetically arranged string references, we come 
\par across the string: Registration Failed.... Go stand on it ... and double click it...
\par Now you can close the string references window....
\par 
\par }{\b\lang1043\cgrid0 Step 3: Analyzing the protection routine.... / Understanding the jumping Mechanism...
\par }{\lang1043\cgrid0 
\par When we scroll up a bit, we see another string: "Thank you for registering..." right above
\par this we see a call at line 0048AD23 ... Right after this call, we see a jne command....
\par go stand on it, and execute the jump ... You see that it lands right on the line which 
\par says you are unregistered. Now press the [ret jmp] button to return to the previous place....
\par We see that if the code does not jump, it thanks you for registering. If it jumps, it shows
\par you, you entered an invalid serial...
\par 
\par We found the code that is executed so we see the dialog box that pops up when we type in
\par an invalid serial.... This code also shows there is a dialog box that pops up when a valid serial
\par is entered.... We want this piece of code to behave as following: Show registered when valid 
\par serial is typed and show registered when invalid serial is typed...
\par     
\par Now let's take a closer look at the disassembly....
\par 
\par }\pard \ri-17\nowidctlpar\adjustright {\f2\fs16\cf11\lang1043\cgrid0 ////////////////////// Code snip ///////////////////////////
\par ADDRESS}{\f2\fs16\lang1043\cgrid0  \tab }{\f2\fs16\cf12\lang1043\cgrid0 MACHINE CODE \tab \tab    }{\f2\fs16\cf10\lang1043\cgrid0  ASSEMBLER INSTRUCTIONS
\par }\pard \nowidctlpar\tx8520\adjustright {\lang1043\cgrid0     
\par }{\f2\fs16\lang1043\cgrid0 :0048AD23     E8FC90F7FF              call 00403E24
\par :0048AD28     7524                    jne 0048AD4E
\par :0048AD2A     6A00                    push 00000000
\par :0048AD2C     668B0D9CAD4800          mov cx, word ptr [0048AD9C]
\par :0048AD33     B202                    mov dl, 02
\par    
\par }{\f2\fs16\cf9\lang1043\cgrid0 * Possible StringData Ref from Code Obj ->"Thank you for registering the "
\par                                         ->"Font Creator Program."
\par                                                 |
\par }{\f2\fs16\lang1043\cgrid0 :0048AD35     B8A8AD4800              mov eax, 0048ADA8
\par :0048AD3A     E8D97EFBFF              call 00442C18
\par :0048AD3F     8B45FC                  mov eax, dword ptr [ebp-04]
\par :0048AD42     C7805001000001000000    mov dword ptr [ebx+00000150], 00000001
\par :0048AD4C     EB22                    jmp 0048AD70
\par 
\par }{\f2\fs16\cf9\lang1043\cgrid0 * Referenced by a (U)nconditional or (C)onditional Jump at Address:
\par     |:0048AD28(C)
\par     |
\par }{\f2\fs16\lang1043\cgrid0 :0048AD4E 6A00                    push 00000000
\par :0048AD50 668B0D9CAD4800          mov cx, word ptr [0048AD9C]
\par :0048AD57 B201                    mov dl, 01
\par }{\f2\fs16\cf9\lang1043\cgrid0 * Possible StringData Ref from Code Obj ->"Registration failed: Invalid Password"
\par                                    |
\par }{\f2\fs16\lang1043\cgrid0 0048AD59 B8E4AD4800              mov eax, 0048ADE4
\par }\pard \ri-17\nowidctlpar\adjustright {\f2\fs16\cf11\lang1043\cgrid0 ////////////////////// Code snip ///////////////////////////
\par }\pard \nowidctlpar\adjustright {\lang1043\cgrid0 
\par     A translation that is the same looks like this...
\par ___________________________________________________________________________
\par call IsSerialValid
\par jne  serial_not_valid
\par call MessageBox_Thanks_for_registering
\par jmp  End
\par 
\par serial_not_valid:
\par call MessageBox_Serial_Invalid
\par 
\par End:
\par ___________________________________________________________________________
\par In plain human language this would be like: 
\par 
\par If Serial Is Not Valid, Tell Serial Is Invalid,
\par else Thank You For Registering...
\par 
\par Since we want it to Thank us for registering always, we make sure the jne Serial_Not_Valid
\par jump is never executed .....
\par when we do this te pseudocode will look like this:
\par ___________________________________________________________________________
\par call IsSerialValid
\par XXX  xxxxxxxxxxxxxx                   ; serial_not_valid removed ...
\par call MessageBox_Thanks_for_registering
\par jmp  End
\par 
\par serial_not_valid:
\par call MessageBox_Serial_Invalid
\par 
\par  End:
\par ___________________________________________________________________________
\par 
\par The call at 0048AD23 is executed, after this, there will never be a chance to jump to the
\par invalid serial messagebox :-)
\par 
\par 
\par }{\b\lang1043\cgrid0 Step 4: Changing the original program...
\par }{\lang1043\cgrid0 
\par Same as before: Load FCP.exe in HIEW.... Press enter twice so you get into disassembly mode.
\par push F5 to enter the address ... and when you are there, change the JNE into two NOP commands
\par Now press F9 to save and F10 to exit....
\par 
\par }{\b\lang1043\cgrid0 Step 5: Run the program, and register with any name and serial :-))
\par }{\lang1043\cgrid0 Do you feel it? Do you feel the power it gives you?
\par 
\par 
\par 
\par ___________________________________________________________________________
\par 
\par Extra !
\par 
\par When we were looking through the string references list, we also saw the other unregistered
\par string we had paid attention to ... The "This product is not registered" string we saw in
\par the dialog box that pops up at startup.... Since we are here to learn, and we don't want to
\par miss any opportunity, let's take a closer look at it....
\par     
\par Locate the string again in the String references in hiew...
\par "This product is not registered." Double click it and you will land in the code below....
\par 
\par }{\f2\fs16\cf11\lang1043\cgrid0 ////////////////////// Code snip ///////////////////////////
\par }{\f2\fs16\lang1043\cgrid0 
\par }{\f2\fs16\cf11\lang1043\cgrid0 ADDRESS}{\f2\fs16\lang1043\cgrid0  \tab }{\f2\fs16\cf12\lang1043\cgrid0 MACHINE CODE}{\f2\fs16\lang1043\cgrid0  \tab \tab }{\f2\fs16\cf10\lang1043\cgrid0 ASSEMBLER INSTRUCTIONS}{\f2\fs16\lang1043\cgrid0 
\par 
\par :00476565 \tab E836DFFAFF          call 004244A0
\par :0047656A \tab A10CB54B00          mov eax, dword ptr [004BB50C]
\par :0047656F \tab 83781800            cmp dword ptr [eax+18], 00000000
\par :00476573 \tab 753B                jne 004765B0
\par 
\par }{\f2\fs16\cf9\lang1043\cgrid0 * Possible StringData Ref from Code Obj ->"This product is not registered."
\par                                   |
\par }{\f2\fs16\lang1043\cgrid0 :00476575 \tab BADC694700          mov edx, 004769DC
\par :0047657A \tab 8B45FC              mov eax, dword ptr [ebp-04]
\par :0047657D \tab 8B800C020000        mov eax, dword ptr [eax+0000020C]
\par :00476583 \tab E818DFFAFF          call 004244A0
\par 
\par }{\f2\fs16\cf9\lang1043\cgrid0 * Possible StringData Ref from Code Obj ->"Registration fee is US $20 for "
\par                                         ->"a single license."
\par                                   |
\par }{\f2\fs16\lang1043\cgrid0 :00476588 \tab BA046A4700          mov edx, 00476A04
\par :0047658D \tab 8B45FC              mov eax, dword ptr [ebp-04]
\par :00476590 \tab 8B8010020000        mov eax, dword ptr [eax+00000210]
\par :00476596 \tab E805DFFAFF          call 004244A0
\par 
\par }{\f2\fs16\cf9\lang1043\cgrid0 * Possible StringData Ref from Code Obj ->"Read the helpfile for more                                   \tab \tab \tab \tab \tab |
\par }{\f2\fs16\lang1043\cgrid0 :0047659B \tab BA406A4700          mov edx, 00476A40
\par :004765A0 \tab 8B45FC              mov eax, dword ptr [ebp-04]
\par :004765A3 \tab 8B8024020000        mov eax, dword ptr [eax+00000224]
\par :004765A9 \tab E8F2DEFAFF          call 004244A0
\par :004765AE \tab EB13                jmp 004765C3
\par 
\par }{\f2\fs16\cf9\lang1043\cgrid0 * Referenced by a (U)nconditional or (C)onditional Jump at Address:
\par |:00476573(C)
\par |
\par * Possible StringData Ref from Code Obj ->"This product is registered to:"
\par                                   |
\par }{\f2\fs16\lang1043\cgrid0 :004765B0 \tab BA706A4700          mov edx, 00476A70
\par 
\par }{\f2\fs16\cf11\lang1043\cgrid0 ////////////////////// Code snip ///////////////////////////
\par }{\lang1043\cgrid0 
\par  "Play" again with the jumps and you will see what happens with the jumps...
\par When you are done jumping and looking a bit at the disassembly, you should be able 
\par to see that the disassembly can be brought back to the simple pseudo code below....
\par ___________________________________________________________________________
\par }{\cf11\lang1043\cgrid0     CODE \tab \tab \tab    COMMENT
\par }{\lang1043\cgrid0     
\par     Call Is_Program_Registered
\par     cmp memory location , 0000   }{\cf11\lang1043\cgrid0 ; compare memory location to zero}{\lang1043\cgrid0 
\par     jne Program_Is_Registered    }{\cf11\lang1043\cgrid0 ; jump to program is registered label
\par }{\lang1043\cgrid0     
\par     Print_Program_Is_Not_Registered
\par     Print_Registration_Is_20$_Only
\par     Print_Read_Help_for_More_Info
\par     jmp Finish\tab \tab }{\cf11\lang1043\cgrid0 \tab ; jump to where the finish label is}{\lang1043\cgrid0 
\par 
\par 
\par     Program_Is_Registered:\tab ; this is just a label / an address ...
\par     Print_Program_IS_Registered
\par     Print_Registered_to
\par     
\par     Finish:\tab \tab }{\cf11\lang1043\cgrid0 \tab ; this is the finish label ...
\par }{\lang1043\cgrid0 ___________________________________________________________________________
\par 
\par 
\par     This pseudo-code is a lot more readable for us newbies ;-)
\par     Well... what happens is: there is again a check ... If the program is registered...
\par     After that it compares a memory location to zero.... hmmm.. Why would it do something 
\par     like this? We'll see that in a second ... Then it jumps if this memory location is 
\par     not equal to zero, and it doesn't jump when it is zero...
\par     What would this mean for us crackers? Yup... this memory location should *always* 
\par     be unequal to zero :-) That means it should contain a value like 1, 2 or 1000...
\par     not the value 0....  
\par 
\par 
\par     The source would have looked something like this:
\par 
\par 
\par }{\f2\fs16\cf11\lang1043\cgrid0 ////////////////////// Code snip ///////////////////////////
\par }{\f2\fs16\lang1043\cgrid0 
\par     }{\b\f2\fs16\lang1043\cgrid0 BOOL}{\f2\fs16\lang1043\cgrid0  programregistered;\tab }{\f2\fs16\cf11\lang1043\cgrid0 \tab // a boolean variable ...
\par \tab \tab \tab \tab \tab // these variables contain a true or a 
\par \tab \tab \tab \tab \tab // false value ... ( a 0 or a 1 )
\par }{\f2\fs16\lang1043\cgrid0 
\par     programregistered = IsProgramRegistered();\tab }{\f2\fs16\cf11\lang1043\cgrid0 // a function call ...
\par \tab \tab \tab \tab \tab // the function returns its value to 
\par \tab \tab \tab \tab \tab // the boolean variable programregistered}{\f2\fs16\lang1043\cgrid0 
\par \tab \tab \tab \tab \tab \tab  
\par     }{\b\f2\fs16\lang1043\cgrid0 if}{\f2\fs16\lang1043\cgrid0  (programregistered = TRUE) 
\par \tab DoNotNag() ;
\par     }{\b\f2\fs16\lang1043\cgrid0 else}{\f2\fs16\lang1043\cgrid0  
\par         DoNag(); 
\par 
\par }{\f2\fs16\cf11\lang1043\cgrid0 ////////////////////// Code snip ///////////////////////////
\par }{\lang1043\cgrid0 
\par 
\par     This piece of code shows us that programs can set a memory location ( the programregistered 
\par     bool variable is a memory location) to determine the state of your registration....
\par     That is what happens in this piece of code ... And also what happens in the real program...
\par 
\par     Now we do understand that the memory location above is equal to 1 if you are registered, and
\par     is equal to zero if you are not registered.... To crack this piece of code = to make it 
\par     always think it is registered, we could change the memory location to 1, so the program 
\par     always thinks we are registered.... Is this very easy to do? Well.... Not now :-) 
\par     I will show it to you in tutor 3...
\par  
\par     The easiest would be to modify the "jne Program_Is_Registered" in such a way that
\par     the program always thinks we are registered... No matter what the call Is_Program_Registered
\par     puts in memory location that has to be equal to something NOT zero...
\par     The easiest way to do this would be to change the jne into a jump instruction.
\par     And this is a piece of cake :-))
\par 
\par     Open the program in hiew; Go to the right offset in the program.... Change the jne into a 
\par     jmp.... What happened? 
\par ___________________________________________________________________________
\par }\pard \ri-17\nowidctlpar\adjustright {\f2\fs16\cf11\lang1043\cgrid0 ADDRESS }{\f2\fs16\lang1043\cgrid0    }{\f2\fs16\cf12\lang1043\cgrid0 MACHINE CODE\tab \tab     }{\f2\fs16\cf10\lang1043\cgrid0 ASSEMBLER INSTRUCTIONS}{\f2\fs16\lang1043\cgrid0 
\par }\pard \nowidctlpar\adjustright {\f2\fs16\cf11\lang1043\cgrid0 
\par ORIGINAL
\par }{\f2\fs16\lang1043\cgrid0 
\par 00476573: 753B                         jne      .0004765B0   -------- (1)
\par 00476575: BADC694700                   mov       edx,0004769DC ;" Gi_"
\par 0047657A: 8B45FC                       mov       eax,[ebp][-0004]
\par 0047657D: 8B800C020000                 mov       eax,[eax][00000020C]
\par 00476583: E818DFFAFF                   call     .0004244A0   -------- (2)
\par 00476588: BA046A4700                   mov       edx,000476A04 ;" Gj "
\par 
\par }{\f2\fs16\cf11\lang1043\cgrid0 PATCHED
\par }{\f2\fs16\lang1043\cgrid0 
\par 00476573: E938000000                   jmp      .0004765B0   -------- (1)
\par 00476578: 47                           inc       edi
\par 00476579: 008B45FC8B80                 add       [ebx][0808BFC45],cl
\par 0047657F: 0C02                         or        al,002 ;" "
\par 00476581: 0000                         add       [eax],al
\par 00476583: E818DFFAFF                   call     .0004244A0   -------- (2)
\par 00476588: BA046A4700                   mov       edx,000476A04 ;" Gj "
\par }{\lang1043\cgrid0 ___________________________________________________________________________
\par }{\f2\fs16\lang1043\cgrid0 
\par 
\par The jmp hiew assembled, looks a bit weird ... It needed 3 extra bytes....
\par         
\par 753B               jne      .0004765B0 <<-- jne          (2 bytes)(75 3B)
\par E938000000         jmp      .0004765B0 <<-- assembled jmp(5 bytes)(E9 38 00 00 00 )
\par }{\lang1043\cgrid0 
\par 
\par 
\par 
\par That is not so nice :-( Now we altered some code we did not want to alter at all...
\par The mov edx, 0004769DC line of code is gone.... And something else has come in place...
\par Well ... Actually there is no need to worry....
\par The code we altered here will *never* be executed.... We made sure that it would never be ;-)
\par We made sure that anything that comes to line 476573 jumps *DIRECTLY* to line 4765B0 :-))
\par so the code at the lines between 476578 and 4765B0 are never executed ... Those are the lines
\par which tell us we are not registered :-)
\par 
\par 
\par There may be several things you haven't fully understood but that's not important here, you will 
\par as we do more tutorials together.
\par 
\par 
\par ___________________________________________________________________________
\par 
\par 
\par }{\b\lang1043\cgrid0 What we did in this tutorial?  
\par }{\lang1043\cgrid0 
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\ls1\adjustright {\lang1043\cgrid0 
We saw that there are several standard steps that you will have to go through while cracking.
\par }\pard \nowidctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\lang1043\cgrid0             -- watching a program in action
\par             -- disassembling the program and looking for familiar strings
\par             -- finding and analyzing the protection routine of the program
\par             -- Modifying the program so it does the thing you want.
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\ls1\adjustright {\lang1043\cgrid0 While going through these steps we m
ake extensively use of our Tools: Hiew and WDasm...
\par }\pard \nowidctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\lang1043\cgrid0             -- Disassembling and Finding string references. Simulating the jumps which take place during execution
\par                of the program.
\par             -- Finding the corresponding address in Hiew, assembling assembler instructions in Hiew.
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\ls1\adjustright {\lang1043\cgrid0 
We also saw that programs can keep a boolean value in memory to determine if you are registered or not. 
\par }\pard \nowidctlpar\adjustright {\lang1043\cgrid0             
\par 
\par 
\par 
\par }}