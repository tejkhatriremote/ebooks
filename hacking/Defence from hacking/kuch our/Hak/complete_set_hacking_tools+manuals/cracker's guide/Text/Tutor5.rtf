{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f76\froman\fcharset238\fprq2 Times New Roman CE;}{\f77\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f79\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f80\froman\fcharset162\fprq2 Times New Roman Tur;}{\f81\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f82\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f83\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f92\fmodern\fcharset238\fprq1 Courier New CE;}{\f93\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f95\fmodern\fcharset161\fprq1 Courier New Greek;}{\f96\fmodern\fcharset162\fprq1 Courier New Tur;}{\f97\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f98\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f99\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\*\listtable{\list\listtemplateid1161750076\listsimple
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 }{\listname ;}\listid-2}}{\*\listoverridetable
{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 }}\ls1}}{\info{\author Intern}{\operator Intern}{\creatim\yr1999\mo6\dy28\hr21\min5}{\revtim\yr1999\mo6\dy28\hr21\min18}{\version2}{\edmins5}{\nofpages5}{\nofwords1713}{\nofchars9767}{\*\company Intern}
{\nofcharsws11994}{\vern8247}}\margl1417\margr1417\margt1417\margb1417 \widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind4\viewscale100\nolnhtadjtbl \fet0\sectd \linex0\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang
{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7
\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b\f2\fs28\ul\cf2\lang1043\langfe1033\langnp1043 Tutor5}{\fs20\lang1046\langfe1033\langnp1046 
\par 
\par }{\fs20\lang1033\langfe1033\langnp1033 In the previous 4 tutorials we have handled the basics of cracking ... 
\par We have summarized the basics of cracking into the following few points:
\par {\pntext\pard\plain\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li360\ri0\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\faauto\ls1\rin0\lin360\itap0 {\fs20\lang1033\langfe1033\langnp1033 Watching
 a program in action
\par {\pntext\pard\plain\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Disassembling the program and looking for familiar strings
\par {\pntext\pard\plain\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Finding and analyzing the protection routine of the program
\par {\pntext\pard\plain\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Modifying the program so it does the thing you want.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\lang1033\langfe1033\langnp1033 
\par In this tutorial I will show you how to insert your }{\b\fs20\lang1033\langfe1033\langnp1033 own}{\fs20\lang1033\langfe1033\langnp1033  code into the original programs code, so that the
\par program does exactly what you want it to do ;-)
\par 
\par To show you how to do it, I have again written my own program. First I will show you how to crack the
\par program I made, afterwards, we will together crack a commercial program, which has almost the same 
\par protection as my little 20 kb exe ;-)
\par 
\par We will again do the cracking as we have learned ... systematically.
\par 
\par }{\b\fs20\lang1033\langfe1033\langnp1033 Step 1: Run the program:
\par }{\fs20\lang1033\langfe1033\langnp1033 Our cool dino again }{\fs20\lang1024\langfe1024\noproof\langnp1033 :-)}{\fs20\lang1033\langfe1033\langnp1033  but what do we see there ? A very ugly caps:
\par **UNREGISTERED EVALUATION** - Tutorial 3 ...
\par Man I hate caps ;-)
\par 
\par Let's explore the file menus\'85 
\par Hmm.. The Help menu has a register option. Select it. Enter a fake name and a Serial. Press Ok.
\par Hmm.. An ugly error message :-)
\par Let's fix it \'85
\par 
\par }{\b\fs20\lang1033\langfe1033\langnp1033 Step 2: Disassemble the program:
\par }{\fs20\lang1033\langfe1033\langnp1033 When we disassemble and look at the string references, we see a few of the strings that we can 
\par recognize. The big ugly caps Unregistered string, the error while entering password string\'85.
\par Let's select the: Error entering name / password, string\'85. We will land in the following piece of 
\par disassembly:
\par 
\par 
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }\pard \ql \li0\ri-17\nowidctlpar\faauto\rin-17\lin0\itap0 {\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ADDRESS}{\f2\fs16\lang1033\langfe1033\langnp1033    }{\f2\fs16\cf12\lang1033\langfe1033\langnp1033 MACHINE CODE\tab \tab }{
\f2\fs16\cf10\lang1033\langfe1033\langnp1033 ASSEMBLER INSTRUCTIONS
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\lang1033\langfe1033\langnp1033 
\par }{\f2\fs16\cf2\lang1033\langfe1033\langnp1033 * Referenced by a (U)nconditional or (C)onditional Jump at Address:
\par |:00401521(C)
\par |
\par 
\par * Possible StringData Ref from Data Obj ->"**UNREGISTERED EVALUATION** - "
\par                                         }{\f2\fs16\cf2\lang1046\langfe1033\langnp1046 ->"Tutorial 5"
\par                                   |
\par }{\f2\fs16\lang1046\langfe1033\langnp1046 :00401546 68E6404000              push 004040E6
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :0040154B FF7508                  push [ebp+08]
\par 
\par }{\f2\fs16\cf2\lang1033\langfe1033\langnp1033 * Reference To: USER32.SetWindowTextA, Ord:020Ch
\par                                   }{\f2\fs16\cf2\lang1046\langfe1033\langnp1046 |
\par }{\f2\fs16\lang1046\langfe1033\langnp1046 :0040154E E8D1020000              Call 00401824
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :00401553 6A10                    push 00000010
\par 
\par }{\f2\fs16\cf2\lang1033\langfe1033\langnp1033 * Possible StringData Ref from Data Obj ->"ERROR"
\par                                   |
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :00401555 6840404000              push 00404040
\par }{\f2\fs16\cf6\lang1024\langfe1024\noproof\langnp1033 \tab \tab \tab \tab \tab \tab \tab \tab You will land here 
\par }{\f2\fs16\cf2\lang1033\langfe1033\langnp1033 * Possible StringData Ref from Data Obj ->"Error entering name / password, "}{\f2\fs16\cf6\lang1033\langfe1033\langnp1033 
\par }{\f2\fs16\cf2\lang1033\langfe1033\langnp1033                                         ->"please retry "
\par }{\f2\fs16\lang1033\langfe1033\langnp1033                                   |
\par :0040155A 6846404000              push 00404046
\par :0040155F FF7508                  push [ebp+08]
\par 
\par }{\f2\fs16\cf2\lang1033\langfe1033\langnp1033 * Reference To: USER32.MessageBoxA, Ord:018Ah
\par                                   |
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :00401562 E899020000              Call 00401800
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }{\fs20\lang1033\langfe1033\langnp1033 
\par }{\b\fs20\lang1033\langfe1033\langnp1033 Step 3: Analyzing the protection routine.... / Understanding the jumping Mechanism...
\par }{\fs20\lang1033\langfe1033\langnp1033 
\par Let's try to understand this piece of code\'85..
\par The code is executed after a jump }{\b\fs20\lang1033\langfe1033\langnp1033 from}{\fs20\lang1033\langfe1033\langnp1033  address 401521. What it does is: setting the text 
\par UNREGISTERED EVALUATION. After it has done this, it pops up a Message box  telling you 
\par that you have entered the wrong name / password combination. 
\par Well \'85 Let's go back to where the decision was made \'85 Address 401521 \'85.
\par Go to code location 401521 (see Appendix 1 for how to). 
\par 
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }\pard \ql \li0\ri-17\nowidctlpar\faauto\rin-17\lin0\itap0 {\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ADDRESS}{\f2\fs16\lang1033\langfe1033\langnp1033    }{\f2\fs16\cf12\lang1033\langfe1033\langnp1033 MACHINE CODE\tab \tab }{
\f2\fs16\cf10\lang1033\langfe1033\langnp1033 ASSEMBLER INSTRUCTIONS
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\lang1033\langfe1033\langnp1033 
\par }{\f2\fs16\lang1046\langfe1033\langnp1046 :0040150E 89D7                    mov edi, edx
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :00401510 09C0                    or eax, eax\tab }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ; length of entered name zero ?}{\f2\fs16\lang1033\langfe1033\langnp1033 
\par :00401512 7459                    je 0040156D
\par :00401514 FF7508                  push [ebp+08]
\par :00401517 E8CFFEFFFF              call 004013EB}{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 \tab ; check something}{\f2\fs16\lang1033\langfe1033\langnp1033 
\par :0040151C 83C404                  add esp, 00000004
\par :0040151F 09C0                    or eax, eax}{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 \tab ; is eax zero ?
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :00401521 7423                    je 00401546}{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 \tab <<-- You will land here \'85
\par \tab \tab \tab \tab \tab \tab \tab ; jump to unregistered dialog\'85
\par 
\par }{\f2\fs16\cf2\lang1033\langfe1033\langnp1033 * Possible StringData Ref from Data Obj ->"Registered Version - Tutorial  5 "
\par                                   |
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :00401523 680F414000              push 0040410F
\par 
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }{\fs20\lang1033\langfe1033\langnp1033 ___________________________________________________________________________
\par 
\par What we see here is pretty familiar to us by now. This je jumps over the piece of code, which tells 
\par us that we are registered. After this, the other code is executed. 
\par In pseudo-code the above piece of code would look something like the following : 
\par ___________________________________________________________________________
\par 
\par if  SerialIsValid    ShowThankYouForRegistering
\par else ShowWrongSerial
\par ___________________________________________________________________________
\par 
\par We know now what to do :-)\'85 Let's change the jump to NOP's. Then this program will always
\par show us that we are registered :-) easy huh ?
\par 
\par }{\b\fs20\lang1033\langfe1033\langnp1033 Step 4: Changing the original program...
\par }{\fs20\lang1033\langfe1033\langnp1033 Open a copy of the program in hiew and change the je you see into two nops. Just as we did in our very first tutorial.
\par Piece of cake\'85..
\par 
\par }{\b\fs20\lang1033\langfe1033\langnp1033 Step 5: Testing your cracked program...
\par }{\fs20\lang1033\langfe1033\langnp1033 Let's run it. Go to the registration dialog box. Enter a fake name and serial combination. 
\par Yes !! we are done :-) 
\par It registered us \'85.Look how nice the ugly caps disappeared from the title bar\'85. It now says registered version :-)
\par I hear you think\'85 Was it this easy ??  Is Intern not going to learn us anything new this tutorial ??
\par Well \'85 In fact you are learning now \'85 That you always should test your crack before spreading it / giving it away to others. 
\par Ok close the program. And restart it\'85 :-(    Look \'85 The ugly caps is still there \'85..
\par How depressing \'85.  Probably we overlooked something while analyzing our routine \'85
\par Let's look a little bit close at the disassembly \'85
\par ___________________________________________________________________________
\par 
\par }{\b\fs20\lang1033\langfe1033\langnp1033 Step 3, Second Try : Analyzing the protection routine.... / Understanding the jumping Mechanism...
\par 
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }\pard \ql \li0\ri-17\nowidctlpar\faauto\rin-17\lin0\itap0 {\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ADDRESS}{\f2\fs16\lang1033\langfe1033\langnp1033    }{\f2\fs16\cf12\lang1033\langfe1033\langnp1033 MACHINE CODE\tab \tab }{
\f2\fs16\cf10\lang1033\langfe1033\langnp1033 ASSEMBLER INSTRUCTIONS
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\lang1033\langfe1033\langnp1033 
\par }{\f2\fs16\lang1046\langfe1033\langnp1046 :0040150E 89D7                    mov edi, edx
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :00401510 09C0                    or eax, eax\tab }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ; length of entered name zero ?
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :00401512 7459                    je 0040156D
\par :00401514 FF7508                  push [ebp+08]
\par :00401517 E8CFFEFFFF              call 004013EB}{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 \tab ; check something
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :0040151C 83C404                  add esp, 00000004
\par :0040151F 09C0                    or eax, eax}{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 \tab ; is eax zero ?
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :00401521 7423                    je 00401546}{\f2\fs16\cf6\lang1033\langfe1033\langnp1033 \tab <<--You will land here \'85
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 \tab \tab \tab \tab \tab \tab }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 \tab ; jump to unregistered dialog\'85
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 
\par * Possible StringData Ref from Data Obj ->"Registered Version - Tutorial  5 "
\par                                   |
\par :00401523 680F414000              push 0040410F
\par 
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 
\par }{\fs20\lang1033\langfe1033\langnp1033 This code looks something like this in c :
\par 
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 
\par }{\b\f2\fs16\lang1033\langfe1033\langnp1033 if}{\f2\fs16\lang1033\langfe1033\langnp1033  (}{\b\f2\fs16\lang1033\langfe1033\langnp1033 strlen}{\f2\fs16\lang1033\langfe1033\langnp1033 (name) != 0 ) \{
\par \tab }{\b\f2\fs16\lang1033\langfe1033\langnp1033 if}{\f2\fs16\lang1033\langfe1033\langnp1033  ( }{\b\f2\fs16\lang1033\langfe1033\langnp1033 CheckTheSerialAndName}{\f2\fs16\lang1033\langfe1033\langnp1033 ()  == TRUE )\{
\par \tab \tab }{\b\f2\fs16\lang1033\langfe1033\langnp1033 MessageBox}{\f2\fs16\lang1033\langfe1033\langnp1033 (  "}{\f2\fs16\cf2\lang1033\langfe1033\langnp1033 Thank you for registering }{\f2\fs16\lang1033\langfe1033\langnp1033 ");
\par \tab \}
\par \tab }{\b\f2\fs16\lang1033\langfe1033\langnp1033 else}{\f2\fs16\lang1033\langfe1033\langnp1033 \{
\par \tab \tab }{\b\f2\fs16\lang1033\langfe1033\langnp1033 MessageBox}{\f2\fs16\lang1033\langfe1033\langnp1033 ( "}{\f2\fs16\cf2\lang1033\langfe1033\langnp1033 Entered a wrong serial}{\f2\fs16\lang1033\langfe1033\langnp1033 ");
\par \tab \}
\par \}
\par }{\fs20\lang1033\langfe1033\langnp1033 
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }{\fs20\lang1033\langfe1033\langnp1033 ___________________________________________________________________________
\par Well \'85 you probably did notice that the call at address 401517, which I commented as : 
\par Check Something  is the }{\i\fs20\lang1033\langfe1033\langnp1033 CheckTheSerialAndName}{\fs20\lang1033\langfe1033\langnp1033  function \'85
\par 
\par We made this check for name serial combination totally useless after we removed the jump at 
\par address 401521. But what happens here is, this function is also called at another time from another
\par place. Programmers write a function like this once, and like to call it at times when they need to 
\par decide whether you are a registered or an unregistered user. These moments are usually at the 
\par moment you try to register with a name and a serial number. And the next moment is when the 
\par program starts, when it wants to display a nag, or wants to set title bars or wants to determine if
\par your trial time is up \'85.
\par This type of functions you will encounter very often.
\par 
\par Let's trace into the call. At the beginning of the function you will see this:
\par 
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }\pard \ql \li0\ri-17\nowidctlpar\faauto\rin-17\lin0\itap0 {\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ADDRESS}{\f2\fs16\lang1033\langfe1033\langnp1033    }{\f2\fs16\cf12\lang1033\langfe1033\langnp1033 MACHINE CODE\tab \tab }{
\f2\fs16\cf10\lang1033\langfe1033\langnp1033 ASSEMBLER INSTRUCTIONS
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\lang1033\langfe1033\langnp1033 
\par }{\f2\fs16\cf2\lang1033\langfe1033\langnp1033 * Referenced by a CALL at Addresses:
\par |:00401292   , :00401517   
\par |
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :004013EB 55                      push ebp
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }{\fs20\lang1033\langfe1033\langnp1033 
\par 
\par This means this function is called from two adressess\'85 from : 00401292 and from 00401517.
\par If you push the ret button, to go back to the place we traced into the call, you will see that the call
\par that we see is at 401517. That means this function is also called from address 401292.
\par Let's go to this address.
\par 
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }\pard \ql \li0\ri-17\nowidctlpar\faauto\rin-17\lin0\itap0 {\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ADDRESS}{\f2\fs16\lang1033\langfe1033\langnp1033    }{\f2\fs16\cf12\lang1033\langfe1033\langnp1033 MACHINE CODE\tab \tab }{
\f2\fs16\cf10\lang1033\langfe1033\langnp1033 ASSEMBLER INSTRUCTIONS
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\lang1033\langfe1033\langnp1033 
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :00401292 E854010000              call 004013EB}{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 \tab ; isnameserialvalid ?
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :00401297 83C40C                  add esp, 0000000C\tab \tab 
\par :0040129A 09C0                    or eax, eax}{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 \tab ; eax = 0 ?
\par }{\f2\fs16\lang1033\langfe1033\langnp1033 :0040129C 740D                    je 004012AB}{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 \tab ; jump to not registered
\par 
\par ////////////////////// Code snip ///////////////////////////
\par }{\fs20\lang1033\langfe1033\langnp1033 
\par hmm\'85 see \'85 This piece of code is almost the same :-) 
\par 
\par If we nop out the je here, we will be done\'85 let's do it.
\par }{\b\fs20\lang1033\langfe1033\langnp1033 Step 4, second try: Changing the original program...
\par }{\fs20\lang1033\langfe1033\langnp1033 Load the program in hiew, and nop the je instruction \'85
\par 
\par }{\b\fs20\lang1033\langfe1033\langnp1033 Step 5, second try: Testing your cracked program...
\par }{\fs20\lang1033\langfe1033\langnp1033 Run it \'85 and yup :-) It works \'85.
\par We did it \'85
\par 
\par ___________________________________________________________________________
\par }{\b\lang1033\langfe1033\langnp1033 Afterthoughts :
\par }{\fs20\lang1033\langfe1033\langnp1033 
\par In this case we had to nop two jumps. Sometimes some programmers call the IsSerialValid routine
\par several times \'85Sometimes you will see a list of 20 references :-) ( just seen it once )
\par We could try to locate all the separate jumps, and noping them \'85 But a cleaner and much more
\par elegant way of fixing this small problem would be the following : 
\par 
\par Writing your own code :-) 
\par How ?
\par We know that the functions of this type usually return a value back. A value like false or true\'85 
\par In the disassemblys you will see that after a call, one of the registers is being checked. ( see also 
\par tutorial 3 ). In this program the register eax is checked. And you will see that in almost }{\b\fs20\lang1033\langfe1033\langnp1033 all}{\fs20\lang1033\langfe1033\langnp1033  cases the
\par eax register is checked. So a function call like : IsSerialValid returns a value in eax. A zero or a one.
\par What we can do to fix the problem is making this function return the value we want in eax :-)
\par 
\par To do this you have to assemble a few assembler instructions in Hiew. Let's practice on this program.
\par Delete your cracked version, and make a copy of tutorial5.exe  
\par Open it in hiew. Go to the }{\b\fs20\lang1033\langfe1033\langnp1033 beginning}{\fs20\lang1033\langfe1033\langnp1033  of the call at address 4013EB.
\par 
\par Now enter assemble mode, and assemble the following instructions.
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 
\par ////////////////////// Code snip ///////////////////////////
\par }{\fs20\lang1033\langfe1033\langnp1033 
\par mov eax, 1\tab \tab \tab ; make eax equal to 1
\par ret\tab \tab \tab \tab ; return to caller
\par 
\par }{\f2\fs16\cf11\lang1033\langfe1033\langnp1033 ////////////////////// Code snip ///////////////////////////
\par }{\fs20\lang1033\langfe1033\langnp1033 
\par Apply the changes, save the file and run it. 
\par 
\par Cool huh ? we have a registered version now. The function always returns a 1 in eax now meaning 
\par the serial is valid !
\par And you only had to patch it at one address :-)
\par 
\par What happens now is this, the function is called, and it immediately returns a 1 in eax without doing 
\par its usual complicated stuff to check the entered serial. 
\par 
\par In this tutorial we have seen that you always have to check if the patch you applied works. 
\par We also saw that registration routines are written once, but used often by programmers. ( they call it
\par code-reuse, but we call it lazy programmers ;-) )  Usually such registration routines will be called at 
\par program startup and while checking an entered name / serial combination. 
\par Finally we saw that we can write our assembler code into the original exe, to finally let the program 
\par behave the way we want :-) Here we assigned a value to one of the registers, and made the procedure 
\par return to its caller, without performing any code that was meant to be performed :-)
\par 
\par 
\par 
\par }}