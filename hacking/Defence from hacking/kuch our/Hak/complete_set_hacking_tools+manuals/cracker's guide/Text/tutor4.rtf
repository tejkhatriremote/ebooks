{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f56\froman\fcharset238\fprq2 Times New Roman CE;}{\f57\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f59\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f60\froman\fcharset162\fprq2 Times New Roman Tur;}{\f61\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f68\fmodern\fcharset238\fprq1 Courier New CE;}{\f69\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f71\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f72\fmodern\fcharset162\fprq1 Courier New Tur;}{\f73\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\nowidctlpar\widctlpar\adjustright \fs20\lang3081\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\*\listtable{\list\listtemplateid-1\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0
{\leveltext\'01*;}{\levelnumbers;}}{\listname ;}\listid-2}}{\*\listoverridetable{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelold\levelspace0\levelindent360
{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 }}\ls1}}{\info{\author Intern}{\operator Intern}{\creatim\yr1999\mo6\dy3\hr17\min30}{\revtim\yr1999\mo6\dy3\hr17\min31}{\version2}{\edmins0}{\nofpages2}{\nofwords679}{\nofchars3872}{\*\company Intern}
{\nofcharsws4755}{\vern71}}\widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind4\viewscale100 \fet0\sectd \linex0\headery709\footery709\colsx709\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \nowidctlpar\adjustright \fs20\lang3081\cgrid {\b\f2\fs28\ul\cf2\lang1043\cgrid0 Tutor4:
\par }{\lang1043\cgrid0 
\par We need some more practice:-)
\par Let's remember the to do routine stuff again....
\par 
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\ls1\adjustright {\lang1043\cgrid0 watching a program in action
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab}disassembling the program and looking for familiar strings
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab}finding and analyzing the protection routine of the program
\par {\pntext\pard\plain\f3\fs20\lang1043 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Modifying the program so it does the thing you want.
\par }\pard \nowidctlpar\adjustright {\lang1043\cgrid0 
\par Well... The essence of cracking brought back to 4 sentences ;-) Let's do another one...
\par 
\par The program we are going to take a closer look at this time will be: Sweet Little Piano www.ronimusic.com 
\par 
\par }{\b\lang1043\cgrid0 Step 1: Run the program:
\par }{\lang1043\cgrid0 Run it.
\par Cool. Fast and small:)
\par Bah. Two text files ... 
\par A very big Unregistered Shareware on the caption bar...
\par Check out the Help menu for registration options ... Hmm... a Password option... Select it and enter just something
\par to see what happens ... Click on OK.. nothing....
\par Maybe it accepted it? hmm.. no ... the caption bar still says Unregistered....
\par Ok close it ... bah ... more text files ... and a notification that the settings are not saved in the unregistered version ... well ... kind of irritating those text files !
\par Let's fix it :-)
\par 
\par 
\par }{\b\lang1043\cgrid0 Step 2: Disassemble the program:
\par }{\lang1043\cgrid0 Disassemble the program. Good, small is fast :-) Always....
\par Now, we don't have any strings that pop up when we want to register something...
\par Let's browse for strings like registered, unregistered, the string about the unsaved settings.
\par hmm... evaluation time left ... password.txt.... passworddialog.... 
\par sweet little piano - Unregistered <<-- looks like our caption bar ;-) go on...
\par Thanks for registering ... cool! So it thanks you anyway :-)
\par Let's jump to the place ... Double click on it an we will land right on top of the registration registration routine...
\par 
\par }{\b\lang1043\cgrid0 Step 3: Analyzing the protection routine.... / Understanding the jumping Mechanism...
\par }{\lang1043\cgrid0 Let's analyze the protection routine.
\par 
\par }{\f2\fs16\cf11\lang1043\cgrid0 ////////////////////// Code snip ///////////////////////////
\par }\pard \ri-17\nowidctlpar\adjustright {\f2\fs16\cf11\lang1043\cgrid0 ADDRESS}{\f2\fs16\lang1043\cgrid0    }{\f2\fs16\cf12\lang1043\cgrid0 MACHINE CODE\tab \tab }{\f2\fs16\cf10\lang1043\cgrid0 ASSEMBLER INSTRUCTIONS
\par }\pard \nowidctlpar\adjustright {\f2\fs16\lang1043\cgrid0 
\par }{\f2\fs16\cf9\lang1043\cgrid0 * Possible Reference to Dialog: PASSWORDDIALOG, CONTROL_ID:0064, ""
\par                                   |
\par }{\f2\fs16\lang1043\cgrid0 :00401715 6A64                    push 00000064
\par :00401717 53                      push ebx
\par 
\par }{\f2\fs16\cf9\lang1043\cgrid0 * Reference To: USER32.GetDlgItemTextA, Ord:0000h
\par                                   |
\par }{\f2\fs16\lang1043\cgrid0 :00401718 E8A5B50000              Call 0040CCC2
\par :0040171D E822FFFFFF              call 00401644
\par :00401722 85C0                    test eax, eax
\par :00401724 741E                    je 00401744
\par :00401726 6A30                    push 00000030
\par 
\par }{\f2\fs16\cf9\lang1043\cgrid0 * Possible StringData Ref from Data Obj ->"SweetPiano"
\par                                   |
\par }{\f2\fs16\lang1043\cgrid0 :00401728 6866D24000              push 0040D266
\par 
\par }{\f2\fs16\cf9\lang1043\cgrid0 * Possible StringData Ref from Data Obj ->"Thanks for registering!"
\par                                   |
\par }{\f2\fs16\lang1043\cgrid0 :0040172D 68FED14000              push 0040D1FE
\par :00401732 53                      push ebx
\par  
\par }{\f2\fs16\cf11\lang1043\cgrid0 ////////////////////// Code snip ///////////////////////////
\par }{\lang1043\cgrid0 
\par PasswordDialog ... a call to GetDlgItemTextA ... Another call.... a test...
\par and depending on the test a je.... The je jumps over the thank you ... 
\par And just ends the dialog box ... without telling you that you entered something wrong...
\par So this is right ... we did indeed not see that we typed something wrong ... but apparently we are supposed to see 
\par if we type something right :-)
\par 
\par Again execute the je jump, and look where it goes to ... return from the jump....
\par Now lets try to rewrite what goes on here...
\par   
\par ___________________________________________________________________________
\par   call ShowPasswordDialog
\par   call GetEnteredText
\par   call IsEnteredTextGood
\par   test value in eax
\par   je   QuietExit
\par 
\par   ShowThanksForRegistering
\par 
\par   QuietExit:
\par ___________________________________________________________________________
\par 
\par the source code must have looked like this :
\par ___________________________________________________________________________
\par   }{\b\lang1043\cgrid0 GetDlgItemText}{\lang1043\cgrid0 (_ID_Serial);
\par   }{\b\lang1043\cgrid0 if}{\lang1043\cgrid0  (EnteredTextGood) ShowThanksForRegistering
\par 
\par }{\cf11\lang1043\cgrid0 // else nothing....
\par }{\lang1043\cgrid0 ___________________________________________________________________________
\par 
\par This is another interesting piece of code.... test eax, eax ... This assembler instruction  tests if the value of eax is equal to itself ... If it is it is equal ... so a je  instruction jumps ... if it is not equal, it does not jump.... 
\par To crack this program we can change the je instruction into two nop instructions... and we are done...
\par 
\par 
\par 
\par We have seen here, that the call has put a value in eax.... something which is not equal to   zero or a zero... In our 
\par previous example we saw that the called Is_Serial_Valid call set some value in memory ... Here we see that the called 
\par Is_Serial_Valid call sets the eax register of our processor to some value....
\par 
\par }{\b\lang1043\cgrid0 Step 4: Changing the original program...
\par }{\lang1043\cgrid0 So modify it :-)
\par Open Hiew ... you know the rest by now...
\par }}