<HTML>

<HEAD>
   <TITLE>appendix B -- JDK Tools Reference</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>appendix B</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>JDK Tools Reference</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#JDKToolsReference" >JDK Tools Reference</A>
<LI><A HREF="#javacTheJavaCompiler" >javac-The Java Compiler</A>
<UL>
<LI><A HREF="#Synopsis" >Synopsis</A>
<LI><A HREF="#Description" >Description</A>
<LI><A HREF="#Options" >Options</A>
<LI><A HREF="#EnvironmentVariables" >Environment Variables</A>
</UL>
<LI><A HREF="#javaTheJavaInterpreter" >java-The Java Interpreter</A>
<UL>
<LI><A HREF="#Synopis" >Synopsis</A>
<LI><A HREF="#Descripton" >Description</A>
<LI><A HREF="#Optins" >Options</A>
</UL>
<LI><A HREF="#jdbTheJavaDebugger" >jdb-The Java Debugger</A>
<UL>
<LI><A HREF="#Synpsis" >Synopsis</A>
<LI><A HREF="#Desription" >Description</A>
<LI><A HREF="#Opions" >Options</A>
</UL>
<LI><A HREF="#javahcheaderandStubFileGenerator" >javah-C Header and Stub File Generator</A>
<UL>
<LI><A HREF="#Snopsis" >Synopsis</A>
<LI><A HREF="#Dscription" >Description</A>
<LI><A HREF="#Otions" >Options</A>
</UL>
<LI><A HREF="#javapTheJavaClassFileDisassembler" >javap-The Java Class File Disassembler</A>
<UL>
<LI><A HREF="#Synpsis" >Synopsis</A>
<LI><A HREF="#Desciption" >Description</A>
<LI><A HREF="#Option" >Options</A>
</UL>
<LI><A HREF="#javadocTheJavaAPIDocumentationGener" >javadoc-The Java API Documentation Generator</A>
<UL>
<LI><A HREF="#ynopsis" >Synopsis</A>
<LI><A HREF="#escription" >Description</A>
<LI><A HREF="#Otions" >Options</A>
</UL>
<LI><A HREF="#appletviewerTheJavaAppletViewer" >appletviewer-The Java Applet Viewer</A>
<UL>
<LI><A HREF="#Synosis" >Synopsis</A>
<LI><A HREF="#Decription" >Description</A>
<LI><A HREF="#Optios" >Options</A>
</UL>
</UL>
<HR>
<H2><A NAME="JDKToolsReference"><FONT SIZE=5 COLOR=#FF0000>JDK
Tools Reference</FONT></A></H2>
<P>
This appendix is a reprint of the JDK Tools Reference documentation
written by Sun Microsystems. The material is unaltered from the
documentation version and is a copyright of Sun Microsystems,
Inc. Reprinted with permission.
<H2><A NAME="javacTheJavaCompiler"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">javac</TT></FONT></FONT><FONT SIZE=5 COLOR=#FF0000>-The
Java Compiler</FONT></A></H2>
<P>
<TT>javac</TT> is the program that
compiles Java source code into byte-code format.
<H3><A NAME="Synopsis">Synopsis</A></H3>
<BLOCKQUOTE>
<TT>javac [ options ] filename.java ...<BR>
javac_g [ options ] filename.java ...</TT>
</BLOCKQUOTE>
<H3><A NAME="Description">Description</A></H3>
<P>
The <TT>javac</TT> command compiles
Java source code into Java bytecodes. You then use the Java interpreter-the
<TT>java</TT> command-to interpret
the Java bytecodes.
<P>
Java source code must be contained in files whose filenames end
with the <TT>.java</TT> extension.
For every class defined in the source files passed to <TT>javac</TT>,
the compiler stores the resulting bytecodes in a file named <TT>classname.class</TT>.
The compiler places the resulting <TT>.class</TT>
files in the same directory as the corresponding <TT>.java</TT>
file (unless you specify the <TT>-d</TT>
option).
<P>
When you define your own classes you need to specify their location.
Use <TT>CLASSPATH</TT> to do this.
<TT>CLASSPATH</TT> consists of a semicolon-separated
list of directories that specifies the path. If the source files
passed to <TT>javac</TT> reference
a class not defined in any of the other files passed to <TT>javac</TT>,
then <TT>javac</TT> searches for the
referenced class using the class path. For example:
<BLOCKQUOTE>
<TT>.;C:\users\dac\classes</TT>
</BLOCKQUOTE>
<P>
Note that the system always appends the location of the system
classes onto the end of the class path unless you use the <TT>-classpath</TT>
option to specify a path.
<P>
<TT>javac_g</TT> is a non-optimized
version of <TT>javac</TT> suitable
for use with debuggers like <TT>jdb</TT>.
<H3><A NAME="Options">Options</A></H3>
<H4><TT>-classpath path</TT></H4>
<P>
Specifies the path <TT>javac</TT>
uses to look up classes. Overrides the default or the <TT>CLASSPATH</TT>
environment variable if it is set. Directories are separated by
semicolons. Thus the general format for a path is as follows:
<BLOCKQUOTE>
<TT>.;&lt;your_path&gt;</TT>
</BLOCKQUOTE>
<P>
For example:
<BLOCKQUOTE>
<TT>.;C:\users\dac\classes;C:\tools\java\classes</TT>
</BLOCKQUOTE>
<H4><TT>-d directory</TT></H4>
<P>
Specifies the root directory of the class hierarchy. Thus doing:
<BLOCKQUOTE>
<TT>javac -d &lt;my_dir&gt; MyProgram.java</TT>
</BLOCKQUOTE>
<P>
causes the <TT>.class</TT> files for
the classes in the <TT>MyProgram.java</TT>
source file to be saved in the directory <TT>my_dir</TT>.
<H4><TT>-g</TT></H4>
<P>
Enables generation of debugging tables. Debugging tables contain
information about line numbers and local variables-information
used by Java debugging tools. By default, only line numbers are
generated, unless optimization (<TT>-O</TT>)
is turned on.
<H4><TT>-nowarn</TT></H4>
<P>
Turns off warnings. If used, the compiler does not print out any
warnings.
<H4><TT>-O</TT></H4>
<P>
Optimizes compiled code by inlining static, final, and private
methods. Note that your classes may get larger in size.
<H4><TT>-verbose</TT></H4>
<P>
Causes the compiler and linker to print out messages about what
source files are being compiled and what class files are being
loaded.
<H3><A NAME="EnvironmentVariables">Environment Variables</A></H3>
<H4><TT>CLASSPATH</TT></H4>
<P>
Used to provide the system a path to user-defined classes. Directories
are separated by semi-colons, for example:
<BLOCKQUOTE>
<TT>.;C:\users\dac\classes;C:\tools\java\classes</TT>
</BLOCKQUOTE>
<H3><TT>See Also</TT></H3>
<BLOCKQUOTE>
<TT>java, jdb, javah, javap, javadoc</TT>
</BLOCKQUOTE>
<H2><A NAME="javaTheJavaInterpreter"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">java</TT></FONT><FONT SIZE=5 COLOR=#FF0000>-The
Java Interpreter</FONT></A></H2>
<P>
<TT>java</TT> interprets (executes)
Java bytecodes.
<H3><A NAME="Synopis">Synopsis</A></H3>
<BLOCKQUOTE>
<TT>java [ options ] classname &lt;args&gt;
<BR>
java_g [ options ] classname &lt;args&gt;</TT>
</BLOCKQUOTE>
<H3><A NAME="Descripton">Description</A></H3>
<P>
The <TT>java</TT> command executes
Java bytecodes created by the Java compiler-<TT>javac</TT>.
<P>
The <TT>classname</TT> argument is
the name of the class to be executed. <TT>classname</TT>
must be fully qualified by including its package in the name,
for example:
<BLOCKQUOTE>
<TT>java java.lang.String</TT>
</BLOCKQUOTE>
<P>
Note that any arguments that appear after <TT>classname</TT>
on the command line are passed to the class's <TT>main()</TT>
method.
<P>
<TT>java</TT> expects the bytecodes
for the class to be in a file called <TT>classname.class</TT>
which is generated by compiling the corresponding source file
with <TT>javac</TT>. All Java bytecode
files end with the filename extension <TT>.class</TT>
which the compiler automatically adds when the class is compiled.
<TT>classname</TT> must contain a
<TT>main()</TT> method defined as
follows:
<BLOCKQUOTE>
<TT>class Aclass<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;main( String argv[] )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.
. .<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<P>
<TT>java</TT> executes the <TT>main()</TT>
method and then exits unless <TT>main()</TT>
creates one or more threads. If any threads are created by <TT>main()</TT>
then <TT>java</TT> doesn't exit until
the last thread exits.
<P>
When you define your own classes you need to specify their location.
Use <TT>CLASSPATH</TT> to do this.
<TT>CLASSPATH</TT> consists of a semicolon-separated
list of directories that specifies the path. For example:
<BLOCKQUOTE>
<TT>.;C:\users\dac\classes</TT>
</BLOCKQUOTE>
<P>
Note that the system always appends the location of the system
classes onto the end of the class path unless you use the <TT>-classpath</TT>
option to specify a path.
<P>
Ordinarily, you compile source files with <TT>javac</TT>
then run the program using <TT>java</TT>.
However, <TT>java</TT> can be used
to compile and run programs when the <TT>-cs</TT>
option is used. As each class is loaded, its modification date
is compared to the modification date of the class source file.
If the source has been modified more recently, it is recompiled
and the new bytecode file is loaded. <TT>java</TT>
repeats this procedure until all the classes are correctly compiled
and loaded.
<P>
The interpreter can determine whether a class is legitimate through
the mechanism of verification. Verification ensures that the bytecodes
being interpreted do not violate any language constraints.
<P>
<TT>java_g</TT> is a non-optimized
version of <TT>java</TT> suitable
for use with debuggers like <TT>jdb</TT>.
<H3><A NAME="Optins">Optins</A></H3>
<H4><TT>-debug</TT></H4>
<P>
Allows the Java debugger-<TT>jdb</TT>
-to attach itself to this <TT>java</TT>
session. When <TT>-debug</TT> is specified
on the command line <TT>java</TT>
displays a password which must be used when starting the debugging
session.
<H4><TT>-cs</TT>, <TT>-checksource</TT>
</H4>
<P>
When a compiled class is loaded, this option causes the modification
time of the class bytecode file to be compared to that of the
class source file. If the source has been modified more recently,
it is recompiled and the new bytecode file is loaded.
<H4><TT>-classpath path</TT></H4>
<P>
Specifies the path <TT>java</TT> uses
to look up classes. Overrides the default or the <TT>CLASSPATH</TT>
environment variable if it is set. Directories are separated by
colons. Thus the general format for a path is:
<BLOCKQUOTE>
<TT>.;&lt;your_path&gt;</TT>
</BLOCKQUOTE>
<P>
For example:
<BLOCKQUOTE>
<TT>.;C:\users\dac\classes;C:\tools\java\classes</TT>
</BLOCKQUOTE>
<H4><TT>-mx x</TT></H4>
<P>
Sets the maximum size of the memory allocation pool (the garbage
collected heap) to <TT>x</TT>. The
default is 16 megabytes of memory. <TT>x</TT>
must be &gt; 1000 bytes.
<P>
By default, <TT>x</TT> is measured
in bytes. You can specify <TT>x</TT>
in either kilobytes or megabytes by appending the letter <TT>k</TT>
for kilobytes or the letter <TT>m</TT>
for megabytes.
<H4><TT>-ms x</TT></H4>
<P>
Sets the startup size of the memory allocation pool (the garbage
collected heap) to <TT>x</TT>. The
default is 1 megabyte of memory. <TT>x</TT>
must be &gt; 1000 bytes.
<P>
By default, <TT>x</TT> is measured
in bytes. You can specify <TT>x</TT>
in either kilobytes or megabytes by appending the letter <TT>k</TT>
for kilobytes or the letter <TT>m</TT>
for megabytes.
<H4><TT>-noasyncgc</TT></H4>
<P>
Turns off asynchronous garbage collection. When activated, no
garbage collection takes place unless it is explicitly called
or the program runs out of memory. Normally, garbage collection
runs as an asynchronous thread in parallel with other threads.
<H4><TT>-ss x</TT></H4>
<P>
Each Java thread has two stacks: one for Java code and one for
C code. The <TT>-ss</TT> option sets
the maximum stack size that can be used by C code in a thread
to <TT>x</TT>. Every thread that is
spawned during the execution of the program passed to <TT>java</TT>
has <TT>x</TT> as its C stack size.
The default units for <TT>x</TT> are
bytes. <TT>x</TT> must be &gt; 1000
bytes.
<P>
You can modify the meaning of <TT>x</TT>
by appending either the letter <TT>k</TT>
for kilobytes or the letter <TT>m</TT>
for megabytes. The default stack size is 128 kilobytes (<TT>-ss
128k</TT>).
<H4><TT>-oss x</TT></H4>
<P>
Each Java thread has two stacks: one for Java code and one for
C code. The <TT>-oss</TT> option sets
the maximum stack size that can be used by Java code in a thread
to <TT>x</TT>. Every thread that is
spawned during the execution of the program passed to <TT>java</TT>
has <TT>x</TT> as its Java stack size.
The default units for <TT>x</TT> are
bytes. <TT>x</TT> must be &gt; 1000
bytes.
<P>
You can modify the meaning of <TT>x</TT>
by appending either the letter <TT>k</TT>
for kilobytes or the letter <TT>m</TT>
for megabytes. The default stack size is 400 kilobytes (<TT>-oss
400k</TT>).
<H4><TT>-t</TT></H4>
<P>
Prints a trace of the instructions executed (<TT>java_g</TT>
only).
<H4><TT>-v</TT>, <TT>-verbose</TT>
</H4>
<P>
Causes <TT>java</TT> to print a message
to <TT>stdout</TT> each time a class
file is loaded.
<H4><TT>-verify</TT></H4>
<P>
Runs the verifier on all code.
<H4><TT>-verifyremote</TT></H4>
<P>
Runs the verifier on all code that is loaded into the system via
a classloader. <TT>verifyremote</TT>
is the default for the interpreter.
<H4><TT>-noverify</TT></H4>
<P>
Turns verification off.
<H4><TT>-verbosegc</TT></H4>
<P>
Causes the garbage collector to print out messages whenever it
frees memory.
<H4><TT>-DpropertyName=newValue</TT>
</H4>
<P>
Redefines a property value. <TT>propertyName</TT>
is the name of the property whose value you want to change and
<TT>newValue</TT> is the value to
change it to. For example, this command line:
<BLOCKQUOTE>
<TT>java -Dawt.button.color=green ...</TT>
</BLOCKQUOTE>
<P>
sets the value of the property <TT>awt.button.color</TT>
to <TT>green</TT>. <TT>java</TT>
accepts any number of <TT>-D</TT>
options on the command line.
<H2><A NAME="jdbTheJavaDebugger"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">jdb</TT></FONT><FONT SIZE=5 COLOR=#FF0000>-The
Java Debugger</FONT></A></H2>
<P>
<TT>jdb</TT> helps you find and fix
bugs in Java language programs.
<H3>Synopsis</H3>
<BLOCKQUOTE>
<TT>jdb [ options ]</TT>
</BLOCKQUOTE>
<H3><A NAME="Desription">Description</A></H3>
<P>
The Java Debugger, <TT>jdb</TT>, is
a <TT>dbx</TT>-like command-line debugger
for Java classes. It uses the Java Debugger to provide inspection
and debugging of a local or remote Java interpreter.
<H4>Starting a <TT>jdb</TT> Session
</H4>
<P>
Like <TT>dbx</TT>, there are two ways
<TT>jdb</TT> can be used for debugging.
The most frequently used way is have <TT>jdb</TT>
start the Java interpreter with the class to be debugged. This
is done by substituting the command <TT>jdb</TT>
for <TT>java</TT> in the command line.
For example, to start HotJava under <TT>jdb</TT>,
you use the following:
<BLOCKQUOTE>
<TT>C:\&gt; jdb browser.hotjava</TT>
</BLOCKQUOTE>
<P>
or
<BLOCKQUOTE>
<TT>C:\&gt; jdb -classpath %INSTALL_DIR%\classes
-ms4m browser.hotjava</TT>
</BLOCKQUOTE>
<P>
When started this way, <TT>jdb</TT>
invokes a second Java interpreter with any specified parameters,
loads the specified class, and stops before executing that class's
first instruction.
<P>
The second way to use <TT>jdb</TT>
is by attaching it to a Java interpreter that is already running.
For security reasons, Java interpreters can only be debugged if
they have been started with the <TT>-debug</TT>
option. When started with the <TT>-debug</TT>
option, the Java interpreter prints out a password for <TT>jdb</TT>'s
use.
<P>
To attach <TT>jdb</TT> to a running
Java interpreter (once the session password is known), invoke
it as follows:
<BLOCKQUOTE>
<TT>C:\&gt; jdb -host &lt;hostname&gt; -password
&lt;password&gt;</TT>
</BLOCKQUOTE>
<H4>Basic <TT>jdb</TT> Commands</H4>
<P>
The following is a list of the basic <TT>jdb</TT>
commands. The Java Debugger supports other commands which you
can list using <TT>jdb</TT>'s <TT>help</TT>
command.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
To browse local (stack) variables, the class must have been compiled with the <TT>-g</TT> option.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H5></H5>
<H5>help</H5>
<BLOCKQUOTE>
The most important <TT>jdb</TT> command,
<TT>help</TT> displays the list of
recognized commands with a brief description.
</BLOCKQUOTE>
<H5><TT>print</TT></H5>
<BLOCKQUOTE>
Browses Java objects. The <TT>print</TT>
command calls the object's <TT>toString()</TT>
method, so it will be formatted differently depending on its class.
</BLOCKQUOTE>
<BLOCKQUOTE>
Classes are specified by either their object ID or by name. If
a class is already loaded, a substring can be used, such as <TT>Thread</TT>
for <TT>java.lang.Thread</TT>. If
a class isn't loaded, its full name must be specified, and the
class will be loaded as a side effect. This is needed to set breakpoints
in referenced classes before an applet runs.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>print</TT> supports Java expressions,
such as print <TT>MyClass.clsVar</TT>.
Method invocation will not be supported in the 1.0 release, however,
as the compiler needs to be enhanced first.
</BLOCKQUOTE>
<H5><TT>dump</TT></H5>
<BLOCKQUOTE>
Dumps an object's instance variables. Objects are specified by
their object ID (a hexadecimal integer).
</BLOCKQUOTE>
<BLOCKQUOTE>
Classes are specified by either their object ID or by name. If
a class is already loaded, a substring can be used, such as <TT>Thread</TT>
for <TT>java.lang.Thread</TT>. If
a class isn't loaded, its full name must be specified, and the
class will be loaded as a side effect. This is needed to set breakpoints
in referenced classes before an applet runs.
</BLOCKQUOTE>
<BLOCKQUOTE>
The <TT>dump</TT> command supports
Java expressions such as <TT>dump</TT>
<TT>0x12345678.myCache[3].foo</TT>.
Method invocation will not be supported in the 1.0 release, however,
because the compiler needs to be enhanced first.
</BLOCKQUOTE>
<H5><TT>threads</TT></H5>
<BLOCKQUOTE>
Lists the current threads. This lists all threads in the default
threadgroup, which is normally the first non-system group. (The
<TT>threadgroups</TT> command lists
all threadgroups.) Threads are referenced by their object ID,
or if they are in the default thread group, with the form <TT>t@&lt;index&gt;</TT>,
such as <TT>t@3</TT>.
</BLOCKQUOTE>
<H5><TT>where</TT></H5>
<BLOCKQUOTE>
Dumps the stack of either a specified thread, or the current thread
(which is set with the <TT>thread</TT>
command). If that thread is suspended (either because it's at
a breakpoint or via the suspend command), local (stack) and instance
variables can be browsed with the print and dump commands. The
up and down commands select which stack frame is current.
</BLOCKQUOTE>
<H4>Breakpoints</H4>
<P>
Breakpoints are set in <TT>jdb</TT>
in classes, such as <TT>&quot;stop at MyClass:45&quot;</TT>.
The source file line number must be specified, or the name of
the method (the breakpoint will then be set at the first instruction
of that method). The <TT>clear</TT>
command removes breakpoints using a similar syntax, while the
<TT>cont</TT> command continues execution.
<P>
Single-stepping is not currently implemented, but is hoped to
be available for version 1.0.
<H4>Exceptions</H4>
<P>
When an exception occurs for which there isn't a <TT>catch</TT>
statement anywhere up a Java program's stack, the Java runtime
normally dumps an exception trace and exits. When running under
<TT>jdb</TT>, however, that exception
is treated as a non-recoverable breakpoint, and <TT>jdb</TT>
stops at the offending instruction. If that class was compiled
with the <TT>-g</TT> option, instance
and local variables can be printed to determine the cause of the
exception.
<P>
Specific exceptions may be optionally debugged with the <TT>catch</TT>
command, for example:
<BLOCKQUOTE>
<TT>catch FileNotFoundException</TT>
</BLOCKQUOTE>
<P>
or
<BLOCKQUOTE>
<TT>catch mypackage.BigTroubleException.</TT>
</BLOCKQUOTE>
<P>
The Java debugging facility keeps a list of these exceptions,
and when one is thrown, it is treated as if a breakpoint was set
on the instruction which caused the exception. The <TT>ignore</TT>
command removes exception classes from this list.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The <TT>ignore</TT> command does not cause the Java interpreter to ignore specific exceptions, only the debugger.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="Opions">Options</A></H3>
<P>
When you use <TT>jdb</TT> in place
of the Java interpreter on the command line, <TT>jdb</TT>
accepts the same options as the <TT>java</TT>
command.
<P>
When you use <TT>jdb</TT> to attach
to a running Java interpreter session, <TT>jdb</TT>
accepts these options:
<BLOCKQUOTE>
<TT>-host &lt;hostname&gt;</TT>
</BLOCKQUOTE>
<P>
Sets the name of the host machine on which the interpreter session
to attach to is running.
<BLOCKQUOTE>
<TT>-password &lt;password&gt;</TT>
</BLOCKQUOTE>
<P>
Logs in to the active interpreter session. This is the password
the Java interpreter prints out when invoked with the <TT>-debug</TT>
option.
<H2><A NAME="javahcheaderandStubFileGenerator"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">javah</TT></FONT><FONT SIZE=5 COLOR=#FF0000>-C
Header and Stub File Generator</FONT></A></H2>
<P>
<TT>javah</TT> produces C header files
and C source files from a Java class. These files provide the
connective glue that allows your Java and C code to interact.
<H3><A NAME="Snopsis">Synopsis</A></H3>
<BLOCKQUOTE>
<TT>javah [ options ] classname. . .<BR>
javah_g [ options ] classname. . .</TT>
</BLOCKQUOTE>
<H3><A NAME="Dscription">Description</A></H3>
<P>
<TT>javah</TT> generates C header
and source files that are needed to implement native methods.
The generated header and source files are used by C programs to
reference an object's instance variables from native source code.
The <TT>.h</TT> file contains a struct
definition whose layout parallels the layout of the corresponding
class. The fields in the <TT>struct</TT>
correspond to instance variables in the class.
<P>
The name of the header file and the structure declared within
it are derived from the name of the class. If the class passed
to <TT>javah</TT> is inside a package,
the package name is prepended to both the header filename and
the structure name. Underscores (<TT>_</TT>)
are used as name delimiters.
<P>
By default <TT>javah</TT> creates
a header file for each class listed on the command line and puts
the files in the current directory. Use the <TT>-stubs</TT>
option to create source files. Use the <TT>-o</TT>
option to concatenate the results for all listed classes into
a single file.
<P>
<TT>javah_g</TT> is a non-optimized
version of <TT>javah</TT> suitable
for use with debuggers like <TT>jdb</TT>.
<H3>Options</H3>
<H4><TT>-o outputfile</TT></H4>
<P>
Concatenates the resulting header or source files for all the
classes listed on the command line into <TT>outputfile</TT>.
<H4><TT>-d directory</TT></H4>
<P>
Sets the directory where <TT>javah</TT>
saves the header files or the stub files.
<H4><TT>-td directory</TT></H4>
<P>
Sets the directory where <TT>javah</TT>
stores temporary files. By default, <TT>javah</TT>
stores temporary files in the directory specified by the <TT>%TEMP%</TT>
environment variable. If <TT>%TEMP%</TT>
is unspecified, then <TT>javah</TT>
checks for a <TT>%TMP%</TT> environment
variable. And finally, if <TT>%TMP%</TT>
is unspecified, <TT>javah</TT> creates
the directory <TT>C:\tmp</TT> and
stores the files there.
<H4><TT>-stubs</TT></H4>
<P>
Causes <TT>javah</TT> to generate
C declarations from the Java object file.
<H4><TT>-verbose</TT></H4>
<P>
Causes <TT>javah</TT> to print a message
to <TT>stdout</TT> concerning the
status of the generated files.
<H4><TT>-classpath path</TT></H4>
<P>
Specifies the path <TT>javah</TT>
uses to look up classes. Overrides the default or the <TT>CLASSPATH</TT>
environment variable if it is set. Directories are separated by
semicolons. Thus the general format for path is:
<BLOCKQUOTE>
<TT>.;&lt;your_path&gt;</TT>
</BLOCKQUOTE>
<P>
For example:
<BLOCKQUOTE>
<TT>.;C:\users\dac\classes;C:\tools\java\classes</TT>
</BLOCKQUOTE>
<H2><A NAME="javapTheJavaClassFileDisassembler"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">javap</TT></FONT><FONT SIZE=5 COLOR=#FF0000>-The
Java Class File Disassembler</FONT></A></H2>
<P>
Disassembles class files.
<H3><A NAME="Synpsis">Synopsis</A></H3>
<BLOCKQUOTE>
<TT>javap [ options ] class. . .</TT>
</BLOCKQUOTE>
<H3><A NAME="Desciption">Description</A></H3>
<P>
The <TT>javap</TT> command disassembles
a class file. Its output depends on the options used. If no options
are used, <TT>javap</TT> prints out
the public fields and methods of the classes passed to it. <TT>javap</TT>
prints its output to <TT>stdout</TT>.
For example, compile the following class declaration:
<BLOCKQUOTE>
<TT>class C {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static int a = 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static int b = 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(a);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a++;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b = 7;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(a);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(b);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(b);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String args[])
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C c = new C();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<P>
When the resulting class C is passed to <TT>javap</TT>
using no options the following output results:
<P>
Compiled from <TT>C:\users\dac\C.java</TT>
<BLOCKQUOTE>
<TT>private class C extends java\lang\Object
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static
int a;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static
int b;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
static void main(java\lang\String []);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public
C();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static
void ();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<H3><A NAME="Option">Option</A>s</H3>
<H4><TT>-l</TT></H4>
<P>
Prints out line and local variable tables.
<H4><TT>-p</TT></H4>
<P>
Prints out the private and protected methods and fields of the
class in addition to the public ones.
<H4><TT>-c</TT></H4>
<P>
Prints out disassembled code, (the instructions that comprise
the Java bytecodes, for each of the methods in the class). For
example, passing class C to <TT>javap</TT>
using the <TT>-c</TT> flag results
in the following output:
<BLOCKQUOTE>
<TT>Compiled from C:\users\dac\C.java<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private
class C extends java\lang\Object {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
static int a;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
static int b;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
public static void main(java\lang\String []);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
public C();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
static void ();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method
void main(java\lang\String [])<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0
new #4<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3
invokenonvirtual #9 ()V&gt;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6
return<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method
C()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0
aload_0 0<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
invokenonvirtual #10 ()V&gt;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4
return<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method
void ()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0
iconst_1<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
putstatic #7<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4
getstatic #6<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7
getstatic #7<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
10 invokevirtual #8<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
13 getstatic #7<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
16 iconst_1<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
17 iadd<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
18 putstatic #7<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
21 bipush 7<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
23 putstatic #5<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
26 getstatic #6<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
29 getstatic #7<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
32 invokevirtual #8<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
35 getstatic #6<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
38 getstatic #5<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
41 invokevirtual #8<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
44 iconst_2<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
45 putstatic #5<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
48 getstatic #6<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
51 getstatic #5<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
54 invokevirtual #8<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
57 return<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<H4><TT>-classpath path</TT></H4>
<P>
Specifies the path <TT>javap</TT>
uses to look up classes. Overrides the default or the <TT>CLASSPATH</TT>
environment variable if it is set. Directories are separated by
semicolons. Thus the general format for path is:
<BLOCKQUOTE>
<TT>.;your_path</TT>
</BLOCKQUOTE>
<P>
For example:
<BLOCKQUOTE>
<TT>.;C:\users\dac\classes;C:\tools\java\classes</TT>
</BLOCKQUOTE>
<H2><A NAME="javadocTheJavaAPIDocumentationGener"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">javadoc</TT></FONT><FONT SIZE=5 COLOR=#FF0000>-The
Java API Documentation Generator</FONT></A></H2>
<P>
Generates API documentation from source files.
<H3><A NAME="ynopsis">Synopsis</A></H3>
<BLOCKQUOTE>
<TT>javadoc [ options ] package | filename.java...</TT>
</BLOCKQUOTE>
<H3><A NAME="escription">Description</A></H3>
<P>
<TT>javadoc</TT> parses the declarations
and doc comments in Java source files and formats the public API
into a set of HTML pages. As an argument to <TT>javadoc</TT>
you can pass in either a package name or a list of Java source
files.
<P>
Within doc comments, <TT>javadoc</TT>
supports the use of special doc tags to augment the API documentation.
<TT>javadoc</TT> also supports standard
HTML within doc comments. This is useful for code samples and
for formatting text.
<P>
The package specified on the command line must be in your <TT>CLASSPATH</TT>.
Note that <TT>javadoc</TT> uses <TT>.java</TT>
files, not <TT>.class</TT> files.
<P>
<TT>javadoc</TT> reformats and displays
all public and protected declarations for
<UL>
<LI><FONT COLOR=#000000>Classes and interfaces</FONT>
<LI><FONT COLOR=#000000>Methods</FONT>
<LI><FONT COLOR=#000000>Variables</FONT>
</UL>
<H4>Doc Comments</H4>
<P>
Java source files can include doc comments. Doc comments begin
with <TT>/**</TT> and indicate text
to be included automatically in generated documentation.
<H4>Standard HTML</H4>
<P>
You can embed standard HTML tags within a doc comment. However,
don't use tags heading tags like <TT>&lt;h1&gt;</TT>
or <TT>&lt;hr&gt;</TT>, because <TT>javadoc</TT>
creates an entire structured document and these structural tags
interfere with the formatting of the generated document.
<H4><TT>javadoc</TT> Tags</H4>
<P>
<TT>javadoc</TT> parses special tags
that are recognized when they are embedded within a Java doc comment.
These doc tags enable you to autogenerate a complete, well-formatted
API from your source code. The tags start with an <TT>@</TT>.
<P>
Tags must start at the beginning of a line. Keep tags with the
same name together within a doc comment. For example, put all
your <TT>@author</TT> tags together
so <TT>javadoc</TT> can tell where
the list ends.
<H4>Class Documentation Tags</H4>
<P>
<TT>@see classname<BR>
</TT>Adds a hyperlinked <TT>See Also</TT>
entry to the class.
<P>
<TT>@see fully-qualified-classname<BR>
</TT>Adds a hyperlinked <TT>See Also</TT>
entry to the class.
<P>
<TT>@see fully-qualified-classname#method-name
<BR>
</TT>Adds a hyperlinked <TT>See Also</TT>
entry to the method in the specified class.
<P>
<TT>@version version-text<BR>
</TT>Adds a <TT>Version</TT>
entry.
<P>
<TT>@author your-name<BR>
</TT>Creates an <TT>Author</TT>
entry. There can be multiple author tags.
<P>
An example of a class comment:
<BLOCKQUOTE>
<TT>/**<BR>
&nbsp;&nbsp;* A class representing a window on the screen.<BR>
&nbsp;&nbsp;* For example:<BR>
&nbsp;&nbsp;* &lt;pre&gt;<BR>
&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;Window win = new Window(parent);
<BR>
&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;win.show();<BR>
&nbsp;&nbsp;* &lt;/pre&gt;<BR>
&nbsp;&nbsp;*<BR>
&nbsp;&nbsp;* @see&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awt.BaseWindow
<BR>
&nbsp;&nbsp;* @see&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awt.Button
<BR>
&nbsp;&nbsp;* @version&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2
12 Dec 1994<BR>
&nbsp;&nbsp;* @author&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sami
Shaio<BR>
&nbsp;&nbsp;*/<BR>
&nbsp;class Window extends BaseWindow {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<BR>
&nbsp;}<BR>
</TT>
</BLOCKQUOTE>
<H4>Variable Documentation Tags</H4>
<P>
In addition to HTML text, variable comments can contain only the
<TT>@see</TT> tag (see above).
<BLOCKQUOTE>
<TT>An example of a variable comment:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp; * The X-coordinate of the window<BR>
&nbsp;&nbsp;&nbsp;&nbsp; * @see window#1<BR>
&nbsp;&nbsp;&nbsp;&nbsp; */<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int x = 1263732;</TT>
</BLOCKQUOTE>
<H4>Method Documentation Tags</H4>
<P>
Can contain <TT>@see</TT> tags, as
well as:
<P>
<TT>@param parameter-name description...
<BR>
</TT>Adds a parameter to the <TT>Parameters</TT>
section. The description may be continued on the next line.
<P>
<TT>@return description...<BR>
</TT>Adds a <TT>Returns</TT>
section, which contains the description of the return value.
<P>
<TT>@exception fully-qualified-class-name
description...<BR>
</TT>Adds a <TT>Throws</TT>
entry, which contains the name of the exception that may be thrown
by the method. The exception is linked to its class documentation.
<P>
Here is an example of a method comment:
<BLOCKQUOTE>
<TT>/**<BR>
&nbsp;&nbsp;* Return the character at the specified index. An
index ranges<BR>
&nbsp;&nbsp;* from &lt;tt&gt;0&lt;/tt&gt; to &lt;tt&gt;length()
- 1&lt;/tt&gt;.<BR>
&nbsp;&nbsp;* @param index&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The
index of the desired character<BR>
&nbsp;&nbsp;* @return&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
The desired character<BR>
&nbsp;&nbsp;* @exception&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringIndexOutOfRangeException
When the index<BR>
&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
is not in the range &lt;tt&gt;0&lt;/tt&gt;&gt; to &lt;tt&gt;length()
- 1&lt;/tt&gt;.<BR>
&nbsp;&nbsp;*/<BR>
&nbsp;public char charAt(int index) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp; ...<BR>
&nbsp;}</TT>
</BLOCKQUOTE>
<H3><A NAME="Otions">Options</A></H3>
<H4><TT>-classpath path</TT></H4>
<P>
Specifies the path <TT>javadoc</TT>
uses to look up the <TT>.java</TT>
files. Overrides the default or the <TT>CLASSPATH</TT>
environment variable, if it is set. Directories are separated
by semicolons, for example:
<BLOCKQUOTE>
<TT>.;C:\users\dac\classes;C:\tools\java\classes</TT>
</BLOCKQUOTE>
<H4><TT>-d directory</TT></H4>
<P>
Specifies the directory where <TT>javadoc</TT>
stores the generated HTML files. For example:
<P>
<TT>javadoc -d C:\usrs\dac\public_html\doc
java.lang</TT>
<H4><TT>-verbose</TT></H4>
<P>
Causes the compiler and linker to print out messages about what
source files are being compiled and what object files are being
loaded.
<H2><A NAME="appletviewerTheJavaAppletViewer"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">appletviewer</TT></FONT><FONT SIZE=5 COLOR=#FF0000>-The
Java Applet Viewer</FONT></A></H2>
<P>
The <TT>appletviewer</TT> command
allows you to run applets outside of the context of a World Wide
Web browser.
<H3><A NAME="Synosis">Synopsis</A></H3>
<BLOCKQUOTE>
<TT>appletviewer [ options ] urls ...</TT>
</BLOCKQUOTE>
<H3><A NAME="Decription">Description</A></H3>
<P>
The <TT>appletviewer</TT> command
connects to the document(s) or resource(s) designated by <TT>urls</TT>
and displays each applet referenced by that document in its own
window. Note: if the document(s) referred to by <TT>urls</TT>
does not reference any applets with the <TT>APPLET</TT>
tag, <TT>appletviewer</TT> does nothing.
<H3><A NAME="Optios">Options</A></H3>
<H4><TT>-debug</TT></H4>
<P>
Starts the applet viewer in the Java debugger-<TT>jdb</TT>-thus
allowing you to debug the applets in the document.

<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="appb.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="appc.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
