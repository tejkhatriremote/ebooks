<HTML>

<HEAD>
   <TITLE>Chapter 19 --Product Maintenance</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 19</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Product Maintenance</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>



<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#WhoWouldUseThisApplication" >Who Would Use This Application?</A>
<UL>
<LI><A HREF="#JohnstonUlyssesNormanandKaiser" >Johnston, Ulysses, Norman, and Kaiser</A>
</UL>
<LI><A HREF="#ApplicationDesign" >Application Design</A>
<UL>
<LI><A HREF="#UsingaPickList" >Using a Pick List</A>
</UL>
<LI><A HREF="#DatabaseDesign" >Database Design</A>
<LI><A HREF="#Implementation" >Implementation</A>
<UL>
<LI><A HREF="#UserInterface" >User Interface</A>
<LI><A HREF="#TheProductPickList" >The Product Pick List</A>
<LI><A HREF="#DatabaseAccess" >Database Access</A>
</UL>
<LI><A HREF="#ProgrammingConsiderations" >Programming Considerations</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<I><B><FONT SIZE=5>pro duct \prod'ukt\ n:</FONT></B><FONT SIZE=5>
something produced by natural, human, or mechanical effort</FONT></I>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
Welcome to the penultimate sample intranet application. This,
the Product Maintenance application, isn't as simple as the last
few have been. It is more in line with your first application,
Employee Files, and should give you a good understanding of reading
and writing database rows.
<P>
Most companies in business for profit have something to sell.
Whether it is services or a tangible item, it is a product. This
application enables you to manage information about these products.
When you have your products under control, you can track certain
aspects. One such aspect is customer support, which is explored
in your final application-Customer Support Maintenance.
<P>
This application enables the user to create, update, and delete
rows in the product table. This new table holds rows that describe
products that you or your company sell, manufacture, distribute,
and so on. The product is what you output.
<P>
This chapter covers the following topics in regard to the Product
Maintenance application:
<UL>
<LI><FONT COLOR=#000000>Application Design-The general design
of the application is covered in detail, including functionality
and user interface considerations.</FONT>
<LI><FONT COLOR=#000000>Database Design-This section covers the
database requirements for this application. Here the data model
used to support the application design is examined.</FONT>
<LI><FONT COLOR=#000000>Implementation-This section covers how
the application and database design are implemented.</FONT>
<LI><FONT COLOR=#000000>Programming Considerations-This section
recaps the implementation and summarizes any difficult programming
situations that have arisen.</FONT>
</UL>
<P>
This four-step format just outlined is used throughout all of
the sample application chapters, and it should provide you with
valuable insight and ideas for creating your own intranet applications.
<H2><A NAME="WhoWouldUseThisApplication"><FONT SIZE=5 COLOR=#FF0000>Who
Would Use This Application?</FONT></A></H2>
<P>
This application is useful for companies that sell products. To
better clarify this, let's take a look at one such fictitious
company: Johnston, Ulysses, Norman, and Kaiser.
<H3><A NAME="JohnstonUlyssesNormanandKaiser">Johnston, Ulysses,
Norman, and Kaiser</A></H3>
<P>
Johnston, Ulysses, Norman, and Kaiser (JUNK) is a fictitious corporation
that will serve as a model for the product and customer support
sample applications in this book. They are an average-sized company
and sell a variety of odd and obscure products throughout the
world. These sales are through large chain-stores, smaller mom-and-pop
stores, and mail-order catalogs. Their products are bought from
small manufacturers and distributors around the United States.
<P>
The catalogs are small, presenting hundreds of items to the consumer,
and they are one of JUNK's biggest sales tools. Generally, all
the items in the catalog are under $5.00. JUNK makes its money
on the shipping and handling charges, and the fact that consumers
often buy 10 items from the catalog because items are so inexpensive.
<P>
By now you're wondering what kind of products JUNK sells. I was
going to have them sell widgets. However, in the last 10 years
or so, widgets, in relation to software construction, have taken
on a new connotation. Widgets now refer to software components
more than a generic product line.
<P>
So JUNK sells the types of products that you don't go out and
buy. That is to say, 99 percent of its product line is impulse-buy
material. JUNK sells the kind of stuff you see at check-out counters
in stores, such as red rubber snakes or cartoon character figurines
that you stick on the end of your finger. My favorite JUNK product
is the electric lollipop. This is a large sucker on a motorized
stick. Press the button and it spins the lollipop. All you need
to do is stick out your tongue!
<P>
This is the type of company that can use the product maintenance
and customer support applications on its intranet. This company
constantly gets calls from customers with problems. These problems
are answered by customer support people on a daily basis. However,
they currently have no central repository, or knowledge base,
that holds all of the answers. By using the product maintenance
and customer support applications, they will be able to better
use their combined knowledge for support calls.
<H2><A NAME="ApplicationDesign"><FONT SIZE=5 COLOR=#FF0000>Application
Design</FONT></A></H2>
<P>
This application is quite similar to the Employee Files application,
and it has many of the same qualities. At the core, it's a database
row manipulation application. With it you can create, update,
and delete rows in the product table.
<P>
The proposed interface is similar to the Employee Files as well.
Figure 19.1 is the proposed user interface for the Product Maintenance
program.
<P>
<A HREF="f19-1.gif" ><B>Figure 19.1 : </B><I>The Product maintenance user interface.</I></A>
<P>
This application is semi-modeless, which means that it has no
operating mode. You shouldn't have to inform the program that
you're going to be adding new records or removing records. You
can just flow through the program and it determines what should
be done.
<P>
The basic function of this application is to create, read, update,
and delete product records. These records are stored in a database.
The database design is discussed in detail later in this chapter.
<P>
Think of this application as a pointer into the product table.
The record that the pointer is situated upon is the current record.
This current record is displayed to the user, and the user can
do with it what he or she will. The user can also insert records
into the table.
<P>
The user needs a method of moving this pointer from product to
product. The best way to present this information to the user
is through the use of a pick list.
<H3><A NAME="UsingaPickList">Using a Pick List</A></H3>
<P>
The pick list, as previously discussed, is a selection of all
the records in the product table. This selection should include
the name of each product. The user should be allowed to select
one name from the displayed list. After the selection is made,
the chosen record should be fully retrieved and displayed.
<P>
The selection of a record can be accomplished by either a double-click
on the list item, or a single-click followed by the user pressing
the OK button.
<P>
Figure 19.2 represents the concept of the product pick list.
<P>
<A HREF="f19-2.gif" ><B>Figure 19.2 : </B><I>The product pick list.</I></A>
<P>
This pick list should be opened in response to the user pressing
the Choose button, a standard <TT>SimpleDBUI</TT>
button.
<H2><A NAME="DatabaseDesign"><FONT SIZE=5 COLOR=#FF0000>Database
Design</FONT></A></H2>
<P>
This application is responsible for manipulating news rows. These
rows should be stored in a single table. The table used in this
sample application is called the News table.
<P>
The information stored in the News table corresponds to the information
that is to be edited as described earlier. Table 19.1 shows the
columns that need to be stored in the product table.<BR>
<P>
<CENTER><B>Table 19.1. The product table layout.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=116><I>Description</I></TD><TD WIDTH=115><I>Column Name</I>
</TD><TD WIDTH=105><I>Type</I></TD><TD WIDTH=108><CENTER><I>Can Be Null?</I></CENTER>
</TD><TD WIDTH=69><CENTER><I>Default</I></CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=116>Product ID</TD><TD WIDTH=115>prod_id</TD><TD WIDTH=105>number( 5 )
</TD><TD WIDTH=108><CENTER>No</CENTER></TD><TD WIDTH=69><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=116>Description</TD><TD WIDTH=115>desc_text</TD>
<TD WIDTH=105>char( 80 )</TD><TD WIDTH=108><CENTER>Yes</CENTER>
</TD><TD WIDTH=69><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=116>Quantity On Hand</TD><TD WIDTH=115>qty_on_hand
</TD><TD WIDTH=105>number( 10 )</TD><TD WIDTH=108><CENTER>No</CENTER>
</TD><TD WIDTH=69><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=116>Quantity On Order</TD><TD WIDTH=115>qty_on_order
</TD><TD WIDTH=105>number( 10 )</TD><TD WIDTH=108><CENTER>No</CENTER>
</TD><TD WIDTH=69><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=116>Last Received Date</TD><TD WIDTH=115>last_rcv_date
</TD><TD WIDTH=105>date</TD><TD WIDTH=108><CENTER>Yes</CENTER>
</TD><TD WIDTH=69><CENTER>Null</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=116>Comment</TD><TD WIDTH=115>comment_text</TD>
<TD WIDTH=105>char( 80 )</TD><TD WIDTH=108><CENTER>Yes</CENTER>
</TD><TD WIDTH=69><CENTER>None</CENTER></TD></TR>
</TABLE></CENTER>
<P>
<P>
Figure 19.3 shows the entity relationship diagram for the database
as it stands in this chapter. In <A HREF="ch20.htm" >Chapter 20</A>,
&quot;Customer Support Maintenance,&quot; you see the final entity
relationship diagram. It will represent all of the tables that
have developed for the applications in this book.
<P>
<A HREF="f19-3.gif" ><B>Figure 19.3 : </B><I>The entity relationship diagram, including the new product table.</I></A>
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
Entity relationship diagrams are discussed in <A HREF="ch13.htm" >Chapter 13</A>, &quot;Employee Files.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
In addition to creating a table, a database synonym for the table
is created as well. This enables everyone to access the table
with the same name, without having to worry about the schema in
which the table resides.
<P>
Listing 19.1 is the list of SQL commands used to create the product
table and synonym.
<HR>
<BLOCKQUOTE>
<B>Listing 19.1. The product table creation SQL.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>/*&nbsp;&nbsp;&nbsp;&nbsp;Create the
table */<BR>
create table prod_t<BR>
(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;prod_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(
5 ) not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;desc_text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(
80 ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;qty_on_hand&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(
10 ) not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;qty_on_order&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(
10 ) not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;last_rcv_date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date
default null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;comment_text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(
80 )<BR>
);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create a primary key */<BR>
alter table prod_t<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add<BR>
&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primary key<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Grant access for the table to the user
role */<BR>
grant select,insert,delete,update on prod_t to ia_user_r ;<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Drop any existing public synonym */
<BR>
drop public synonym prod ;<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create a public synonym for our table
*/<BR>
</TT>create public synonym prod for prod_t ;
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The preceding SQL is quite generic, but it still might not work on every database. This particular SQL has been tested with Oracle.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The first SQL clause creates the table <TT>prod_t</TT>.
The second clause creates a primary key using the <TT>prod_id</TT>
column. Making this the primary key ensures that the values in
the column are unique across all rows. Lastly, the public synonym
<TT>prod</TT> is created for the table
<TT>prod_t</TT>.
<H2><A NAME="Implementation"><FONT SIZE=5 COLOR=#FF0000>Implementation</FONT></A>
</H2>
<P>
The rest of this chapter discusses the implementation of the Product
Maintenance program. The first item discussed is the user interface
and how it was created. Secondly, the database access used in
the program is covered. Finally, any programming pitfalls that
came up during the application construction are examined.
<H3><A NAME="UserInterface">User Interface</A></H3>
<P>
To achieve the design goal presented earlier, you need no special
user-interface components. The <TT>GridBagLayout</TT>
layout manager is used for this application. It uses the same
hard-coded row and column heights as the Employee Files program.
<P>
Listing 19.2 shows the user-interface construction code for the
Product Maintenance program.
<HR>
<BLOCKQUOTE>
<B>Listing 19.2. The Product Maintenance interface construction
source code.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
prod_id;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
desc_text;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
qty_on_hand;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
qty_on_order;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
last_rcv_date;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
comment_text;<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;ProductUI( SimpleDBJiflet jiflet )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( jiflet
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GridBagLayout
gbl = new GridBagLayout();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int cw[] = { 14,
14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;14,
14, 14 }; // 17<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rh[] = { 14,
14, 14, 14, 14, 14, 14, 14, 14 }; // 9<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double rc14_0[]
= { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.columnWidths
= new int[ 17 ];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.rowHeights
= new int[ 9 ];<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.columnWeights
= new double[ 17 ];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.rowWeights
= new double[ 9 ];<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
cw, 0, gbl.columnWidths, 0, 17 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
cw, 0, gbl.rowHeights, 0, 9 );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
rc14_0, 0, gbl.columnWeights, 0, 17 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
rc14_0, 0, gbl.rowWeights, 0, 9 );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout( gbl
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Product ID:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=0&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Description:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=1&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Quantity On Hand:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=3&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Quantity On Order:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=4&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Last Received Date:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=6&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Comments:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=8&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id = new
JifTextField( &quot;&quot;, &quot;prod_id&quot;, true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id.setStyle(
JifTextField.NUMERIC );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
prod_id, &quot;x=1;y=0;width=5;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;desc_text = new
JifTextField( &quot;&quot;, &quot;desc_text&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
desc_text, &quot;x=1;y=1;width=13;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qty_on_hand =
new JifTextField( &quot;&quot;, &quot;qty_on_hand&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qty_on_hand.setStyle(
JifTextField.NUMERIC );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
qty_on_hand, &quot;x=1;y=3;width=13;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qty_on_order =
new JifTextField( &quot;&quot;, &quot;qty_on_order&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qty_on_order.setStyle(
JifTextField.NUMERIC );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
qty_on_order, &quot;x=1;y=4;width=13;fill=horizontal&quot; );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last_rcv_date
= new JifTextField( &quot;&quot;, &quot;last_rcv_date&quot; );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
last_rcv_date, &quot;x=1;y=6;width=13;fill=horizontal&quot; );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;comment_text =
new JifTextField( &quot;&quot;, &quot;comment_text&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
comment_text, &quot;x=1;y=8;width=13;fill=horizontal&quot; );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Disable
buttons...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chooseButton.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deleteButton.disable();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add
the buttons...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
newButton, &quot;x=15;y=0;width=2;fill=horizontal&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
saveButton, &quot;x=15;y=2;width=2;fill=horizontal&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
chooseButton, &quot;x=15;y=4;width=2;fill=horizontal&quot; );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Tell
which are which...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id.setPrimaryKey(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id.setNumeric(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qty_on_hand.setNumeric(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qty_on_order.setNumeric(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last_rcv_date.setDate(
true );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Set
the focus to the first field...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearScreen();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
A notable item about this user interface (and other <TT>GridBagLayout</TT>
jiflets in this book) is that the grid settings are hard-coded.
A permanent 9 row by 17 column grid was used for the user interface.
Only after the grid has been set are components placed within
the grid.
<P>
First the layout to a new <TT>GridBagLayout</TT>
is set. Then the labels that go into the layout next to where
the text areas will go are created and placed. Next the <TT>JifTextField</TT>s
that represent the columns are placed into the layout.
<P>
The New, Save, and Choose buttons are added to the layout as well.
These are first disabled because they aren't active until certain
events occur.
<P>
Finally the screen is cleared of any values, and defaults are
placed in the correct columns.
<H3><A NAME="TheProductPickList">The Product Pick List</A></H3>
<P>
Another class was developed for this application, the <TT>ProductPickList</TT>
class. This class derives from the <TT>PickList</TT>
class of the <TT>jif.awt</TT> package
(as discussed in <A HREF="ch11.htm" >Chapter 11</A>, &quot;User
Interface Classes&quot;) and presents the user with a selection
of products. When one is chosen, the object stores the selection
and waits for someone to ask who was chosen. Now take a look at
some of the source code.
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
ProductPickList&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
ProductPickList<BR>
extends PickList<BR>
</TT>
</BLOCKQUOTE>
<P>
As stated, the <TT>PickList</TT> class
is extended. When doing this, an <TT>init()</TT>
method must be supplied. The following is that method:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;init()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rows = retrieveProducts();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( rows &gt;
0 &amp;&amp; getParent() instanceof Jiflet )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
( Jiflet )getParent() ).verboseLog( &quot;Retrieved &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer.toString(
rows ) + &quot; Products&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
This method calls the <TT>retrieveProducts()</TT>
method. Also, if this pick list is used with a jiflet and verbose
mode is turned on, the number of products that were retrieved
is written to the log file.
<P>
The <TT>retrieveProducts()</TT> method,
shown in Listing 19.3, is the meat of this class. It performs
an <TT>SQL SELECT</TT> statement from
the database, parses the results, and places them in the pick
list for the user to select from.
<HR>
<BLOCKQUOTE>
<B>Listing 19.3. The </B><TT><B>retrieveProducts()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
retrieveProducts&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int<BR>
&nbsp;&nbsp;&nbsp;&nbsp;retrieveProducts()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rv
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows
= 0;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql = &quot;select
* from prod order by desc_text&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rv
= myConnection.getStatement().execute( sql );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myConnection.errorLog(
e.toString() );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;No
products to return...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
0 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Is
this a result set?<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( rv )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
rs = myConnection.getStatement().getResultSet();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Spin
through the results and add them to the list...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
( rs.next() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductRecord
er = new ProductRecord( rs );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add
to list...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( er.prod_id != -1 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList.addItem(
er.desc_text );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add
to row mapper...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowMap.insertElementAt(
er, rows );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Increment
row counter...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch
( SQLException e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Indicate
an error!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;We're
done!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( rows );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
The interesting twist here is that each product row is stored
in another class called <TT>ProductRecord</TT>.
This class has a corresponding instance variable for each column
in the employee table. The class is smart and knows how to read
a row out of a JDBC <TT>ResultSet</TT>
object.
<P>
As the results are returned by the SQL statement, new <TT>ProductRecord</TT>s
are created. These records are stored in a <TT>Vector</TT>
for later use.
<P>
At the end, the number of rows that were retrieved are returned
and added to the pick list. If there was an error, a <TT>-1</TT>
is returned.
<P>
The reason each record is stored is for easy access. When the
user selects the product he or she wants from the list, you simply
ask the pick list to produce a copy of the record that it already
retrieved. This is done in the <TT>getRecord()</TT>
method:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
getRecord&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public ProductRecord<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getRecord( int where )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( ( ProductRecord
)rowMap.elementAt( where ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
The pick list returns the index of the selected item. This class
uses a neat trick to keep track of what row is where in the <TT>List</TT>.
A <TT>Vector</TT> is created called
<TT>rowMap</TT>. As a row of data
is retrieved from the database and placed into the pick list's
<TT>List</TT>, it is also stored in
the <TT>Vector</TT> object at the
same index level.
<P>
Later, when you need a <TT>ProductRecord</TT>
from the pick list, instead of rereading the data from the database,
you simply retrieve the row from the <TT>Vector</TT>.
This is done in the preceding <TT>getRecord()</TT>
method. This trick has been used in several applications in this
book.
<H4>Calling the Pick List</H4>
<P>
The <TT>ProductPickList</TT> object
is created and displayed in the main program when the user presses
the Choose button. Listing 19.4 shows how it is done.
<HR>
<BLOCKQUOTE>
<B>Listing 19.4. The </B><TT><B>action()</FONT></B></TT><B>
and </B><TT><B>chooseProduct()</FONT></B></TT><B>
methods.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;action( Event event, Object arg )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== getUIPanel() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch
( ( ( Integer )arg ).intValue() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
JifMessage.chOOSE:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( getDBRecord().didDataChange() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chgDlg
= new ResponseDialog( this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Data
Change&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;The
record has changed.\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Do
you wish to save your changes?&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Yes,No,Cancel&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chgDlg.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chooseProduct();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Handle
picklist events...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
instanceof ProductPickList )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rv
= ( ( Integer )arg ).intValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ProductPickList&nbsp;&nbsp;&nbsp;&nbsp; epl = ( ProductPickList
)event.target;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( rv != -1 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Disable
save on choose...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().saveButton.disable();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Display
it on the screen...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setDBRecord(
( DBRecord )epl.getRecord( rv ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().moveToScreen();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Kill
the dialog box...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epl.hide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epl.dispose();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Reset
the focus...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().requestFocus();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;We
handled it...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Not
handled...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( super.action(
event, arg ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
chooseProduct&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;chooseProduct()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startWait();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductPickList
epl = new ProductPickList( this, getConnector() );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epl.center( true
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epl.show();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endWait();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
When the Choose button is clicked, a <TT>JifMessage.chOOSE</TT>
is sent to the parent. This is received in the <TT>action()</TT>
event handler method. At this point, you need to see whether any
changes have been made to the currently displayed record. If so,
the user is asked whether he or she wants to save them.
<P>
If there are no changes to save, the method <TT>chooseProduct()</TT>
is called. This method creates and displays a <TT>ProductPickList</TT>
object.
<P>
When the user selects a pick list item or closes the pick list
window, it generates an <TT>ACTION_EVENT</TT>
event. This event is captured and appropriate action is taken.
<P>
If the pick list returns a <TT>-1</TT>
value, you know the user canceled the selection. Otherwise, the
value returned is the selected row number. The <TT>ProductRecord</TT>
is then retrieved at that row, made the current record, and the
user interface displays it.
<P>
Finally, a little cleanup is in order. <TT>hide()</TT>
and <TT>dispose()</TT> of the pick
list window, and then reset the focus back to the window.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The <TT>ProductPickList</TT> and other database classes are reused in several other applications. They have been placed in their own package along with other shared code. This package is called <TT>jif.common</TT>. It contains all the common classes 
between all the applications. This and all of the other source code is on the CD-ROM that accompanies this book.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H3><A NAME="DatabaseAccess">Database Access</A></H3>
<P>
This application communicates with the database through the use
of a <TT>ProductRecord</TT> object.
This <TT>DBRecord</TT> derivation
knows how to create, read, update, and delete records from the
News table. The following are the instance variables of this class:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Constants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static String&nbsp;&nbsp;&nbsp;&nbsp;
TABLE_NAME = &quot;prod&quot;;<BR>
<BR>
//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;A variable for
each table column...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;desc_text
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qty_on_hand
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qty_on_order
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last_rcv_date
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;comment_text
= &quot;&quot;;</TT>
</BLOCKQUOTE>
<P>
As you can see, each column is represented by an instance variable.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The <TT>ProductRecord</TT> and other database classes are reused in several other applications. They have been placed in their own package along with other shared code. This package is called <TT>jif.common</TT>. It contains all the common classes between 
all the applications. This and all of the other source code is on the CD-ROM that accompanies this book.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H2><A NAME="ProgrammingConsiderations"><FONT SIZE=5 COLOR=#FF0000>Programming
Considerations</FONT></A></H2>
<P>
This simple application presented no unusual programming considerations.
It is very similar to the Employee Files application. Both have
pick lists to select the current row. The rows can be manipulated
by the application in a normal fashion.
<P>
To recap, this application introduced the following Java intranet
programming topics:
<UL>
<LI><FONT COLOR=#000000>Using a </FONT><TT>GridBagLayout</TT>:
A <TT>GridBagLayout</TT> layout manager
was used for the application, enabling the quick placement of
elements into a hard-coded row/column setting.
<LI><FONT COLOR=#000000>Using a pick list: A pick list was used
to present the user with a list of products to choose from.</FONT>
</UL>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter introduced you to the seventh sample application
in the intranet application suite-Product Maintenance. This program
is responsible for creating and maintaining the product table,
and it will be useful for some of the employees. It enables them
to view the current product line and stocking levels. It also
can be used by telemarketers or sales persons when taking orders.
<P>
In <A HREF="ch20.htm" >Chapter 20</A>, you are introduced to an
application that enables you to track problems with your product
line.

<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch18.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch20.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
