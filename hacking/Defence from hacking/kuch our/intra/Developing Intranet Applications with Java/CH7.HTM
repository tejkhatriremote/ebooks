<HTML>

<HEAD>
   <TITLE>Chapter 7 -- A Model Intranet Application</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 7</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>A Model Intranet Application</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>


<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#AQuickOverviewofIntranetApplication" >A Quick Overview of Intranet Applications</A>
<UL>
<LI><A HREF="#ConfigurationFileProcessing" >Configuration File Processing</A>
<LI><A HREF="#LoggingtoDiskorScreen" >Logging to Disk or Screen</A>
<LI><A HREF="#DatabaseConnectivity" >Database Connectivity</A>
<LI><A HREF="#LookandFeel" >Look and Feel</A>
</UL>
<LI><A HREF="#CodingStyleNotes" >Coding Style Notes</A>
<LI><A HREF="#CodeLayout" >Code Layout</A>
<UL>
<LI><A HREF="#ParenthesesandCodeBlocking" >Parentheses and Code Blocking</A>
<LI><A HREF="#UsingTabsVersusSpaces" >Using Tabs Versus Spaces</A>
<LI><A HREF="#LiberalUseofSpaces" >Liberal Use of Spaces</A>
<LI><A HREF="#MultipleLinesPerStatement" >Multiple Lines Per Statement</A>
</UL>
<LI><A HREF="#Comments" >Comments</A>
<LI><A HREF="#CodeOrder" >Code Order</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<I><B><FONT SIZE=5 COLOR=#000000>model \'m&auml;d-l\ n:</FONT></B><FONT SIZE=5 COLOR=#000000>
a pattern of something to be made</FONT></I>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
Intranet applications are like a corporate application suite.
These include word processors, project planners, spreadsheets,
and many other useful and productive applications. They encompass
all departments and touch many types of data. But unlike the business
productivity application suites available today, your intranet
applications should all share a common foundation.
<P>
Creating a suite of applications from scratch is tedious and boring.
Cutting and pasting code is easy, but that goes against all object-oriented
programming practices. What is needed is a basic structure from
which to build your applications. This foundation should be flexible,
stable, and extensible.
<P>
This chapter introduces you to four standards that all of our
applications share. These standards provide a flexible, stable,
and extensible foundation for developing intranet applications.
These four standards together produce a prototype or a model application
that can be used as a base when developing applications.
<H2><A NAME="AQuickOverviewofIntranetApplication"><FONT SIZE=5 COLOR=#FF0000>A
Quick Overview of Intranet Applications</FONT></A></H2>
<P>
On an intranet, the applications that are built share much of
the same functionality. Sure they all do different things but
they also do a lot of the same things. These commonalties should
become the foundation for your intranet application framework.
They are the base and are truly your application standards.
<P>
Our primary design goal is to provide a set of standard application
features. These features create a familiar atmosphere for all
your intranet applications. Familiarity provides users with a
sense of comfort because they don't have to learn an entirely
new program. Apple capitalized on this idea years ago when it
introduced the Macintosh computer. If you learned how to use the
Mac, then you knew how to run almost every Macintosh application
written. It was the consistency and adherence to set standards
that made this possible. Microsoft Windows has since capitalized
on the same concept. The design presented here is not quite a
Macintosh but what it provides is something similar: consistency.
<P>
The following four standard features are what we strive to provide
in the model intranet application design:
<UL>
<LI><FONT COLOR=#000000>Standard configuration file processing</FONT>
<LI><FONT COLOR=#000000>Standard logging to screen or disk</FONT>
<LI><FONT COLOR=#000000>Standard database connectivity</FONT>
<LI><FONT COLOR=#000000>Standard look and feel</FONT>
</UL>
<P>
Let's examine each goal individually, show an example, then point
you in the right direction to find more information regarding
each particular standard.
<H3><A NAME="ConfigurationFileProcessing">Configuration File Processing</A>
</H3>
<P>
Using configuration parameters in programming can be a real hassle
unless a stable foundation is in place. Generally you end up coding
a new configuration scheme with each application. What we can
create is a class that provides a solid method of getting configuration
parameters. This method encompasses configuration files on disk
and overridden parameters passed in by way of the command line
of the application.
<P>
The configuration file in Listing 7.1 is an example of the kind
of configuration files the applications have.
<HR>
<BLOCKQUOTE>
<B>Listing 7.1. A sample configuration file.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT># Configuration file for Employee Maintenance
<BR>
WindowTitle=Employee Maintenance<BR>
server=tcp-loopback.world<BR>
user=munster<BR>
password=</TT>
</BLOCKQUOTE>
<HR>
<P>
At the start of the application, we read the configuration file
into memory. These parameters are merged with any configuration
parameters that are passed in by way of the command line. The
applications then need a consistent method of retrieving these
parameters from the configuration parameter storage area. We should
model the retrieval method after the method used in regular Java
applets.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
<A HREF="ch8.htm" >Chapter 8</A>, &quot;Utility Classes,&quot; discusses the <TT>ConfigProperties</TT> class which implements these design goals.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="LoggingtoDiskorScreen">Logging to Disk or Screen</A>
</H3>
<P>
For tracking problems during the development cycle and for error
logging after your application has been deployed, a log file is
just the ticket. A common log file is even better for all of your
applications and users. A common log file is easily searched and
filtered for errors. This standard logging mechanism is the first
standard feature that we need to supply.
<P>
To facilitate such a log file, we need to create it on disk. The
log file is appended to each time; it is never overwritten. If
we overwrite the file, then information from a previous session
can be lost. You know how annoying that can be.
<P>
But what if the disk log fails to open, or if it can't be written
to? Well, we need a backup log. These failed log entries should
go to the screen.
<P>
This screen logging facility produces the same log information
to a window, or using the <TT>System.out</TT>
facility. When an application fails to create a disk log, all
log output goes to the screen. Also, this screen log is used automatically
if no disk log is specified or if there is an error.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
<TT>System.out</TT> is a Java system object. It is an alias for the console in Windows. In UNIX it is an alias for <TT>stdout</TT>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>Common Log Entries</H4>
<P>
The entries in the log file should follow a standard, one that
is easy to view and search. This format should be used across
all of your intranet applications, and possibly your non-intranet
applications as well. This log file format should be simple enough
so that other programs might even use it.
<P>
You might find in the future that you use a third-party network
management tool that can monitor your intranet applications and
their log files. These tools can be a lifesaver in a pinch, so
why not think about their needs as well?
<P>
Therefore, the following log file format is what to go with as
the design. It includes all the information needed in an easy-to-use
format:
<P>
<TT><I>application</FONT></I>|<I>user</I>|<I>date</I>|<I>level</I>|<I>entry</I></TT>
<P>
where
<BLOCKQUOTE>
<TT><I>application</FONT></I></TT> is the
name of the application
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>user</FONT></I></TT> is the user who
is running the application
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>date</FONT></I></TT> is the date of
the log entry<BR>
<TT><I>level</FONT></I></TT> indicates the
severity of the entry. 
</BLOCKQUOTE>
<P>
Six predefined levels are available: debug, informational, notice,
warning, error, and fatal. Each is denoted in the log by the first
letter in its name. D for debug, I for information, and so on.
<P>
Listing 7.2 shows some sample log entries.
<HR>
<BLOCKQUOTE>
<B>Listing 7.2. Sample log entries.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>Employee|960609|I|Application [Employee]
started at Sun Jun 09 22:27:33  1996<BR>
Employee|960609|I|Port = 4333</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>Employee|960609|I|Server = mars.mcs.net
<BR>
Employee|960609|I|Title = Employee Maintenance<BR>
Employee|960609|I|Application [Employee] ended at Sun Jun 09 22:28:38
 1996</TT>
</BLOCKQUOTE>
<HR>
<P>
At startup, all of the intranet applications write several things
to the log:
<UL>
<LI><FONT COLOR=#000000>A startup message showing the application
and time/date of startup</FONT>
<LI><FONT COLOR=#000000>Optionally, the contents of the configuration
file</FONT>
<LI><FONT COLOR=#000000>Optionally, any arguments passed in on
the command line</FONT>
</UL>
<P>
At shutdown, the application writes a corresponding entry to its
startup message. This is shown in Listing 7.2, also.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
<A HREF="ch9.htm" >Chapter 9</A>, &quot;Logging Classes,&quot; discusses the <TT>DiskLog</TT> and <TT>ScreenLog</TT> classes which implement these design goals.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="DatabaseConnectivity">Database Connectivity</A></H3>
<P>
Connecting to databases with Java is a key point in your intranet
application design stage. Various methods are currently available.
Some are HTTP server extensions that return data in HTML format.
Others are non-portable system-dependent solutions. A more Java-like
option is JDBC.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
JDBC, along with other database connectivity options are covered in depth in <A HREF="ch6.htm" >Chapter 6</A>, &quot;Database Connectivity Options.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
It appears today that JDBC is the strongest supported database
standard for Java. For this reason alone, JDBC is chosen as the
database connectivity package for the intranet applications in
this book. Using JDBC allows us to choose from almost any database
and provides the flexibility to change databases when coding is
complete.
<P>
To simplify database connectivity just a bit, we need to create
a class that encapsulates the more monotonous aspects of connecting
and disconnecting from a database server. This new class provides
a connection strategy that is simple to use and easily extensible.
This class also encapsulates much of the rudimentary JDBC initialization
and cleanup. All we need to do is extend this class for each database
we need to connect with.
<P>
Listing 7.3 shows how easy the class is to use.
<HR>
<BLOCKQUOTE>
<B>Listing 7.3. How you should use your Database Connector Class.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//&nbsp;&nbsp;Make the connection...
<BR>
if ( myConnector.connect( &quot;munster&quot;, &quot;hermy&quot;,
&quot;tcp-loopback.world&quot; ) )<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;Connection successful...
<BR>
}<BR>
else<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;Connection failed...<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
As you can see, the <TT>connect()</TT>
method is called with the connection parameters necessary to make
the connection. The exception handling is handled for you in the
class, returning nothing but a simple <TT>true</TT>
or <TT>false</TT>. This indicates
the connection state as well.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
<A HREF="ch10.htm" >Chapter 10</A>, &quot;Database Classes,&quot; discusses many database classes. One of them is the <TT>DBConnector</TT> class. This class implements many of these design goals.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="LookandFeel">Look and Feel</A></H3>
<P>
The final standard about the intranet applications is that they
should have a consistent look and feel. This is achieved through
the use of standard font, and a consistent layout of components.
<P>
Figure 7.1 illustrates the standard look and feel of the model
intranet application. This application is the &quot;Hello World&quot;
example presented in <A HREF="ch11.htm" >Chapter 11</A>, &quot;User
Interface Classes.&quot;
<P>
<A HREF="f7-1.gif" ><B>Figure 7.1 : </B><I>The standard intranet application look and feel.</I></A>
<P>
Referring to Figure 7.1, you see the following standard application
attributes:
<UL>
<LI><FONT COLOR=#000000>A standard Java font. We choose Dialog,
size 12. In Windows 95, this is 8-point MS Sans Serif.</FONT>
<LI><FONT COLOR=#000000>A status bar along the bottom to display
messages to the user.</FONT>
</UL>
<P>
You might notice that there is a menu shown in Figure 7.1; however,
no menu is shown as a standard look and feel. This menu varies
from application to application. It is not fair to impose a rigid
menu structure on applications that might not even need a menu.
Therefore, menus are not part of the application design.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
<A HREF="ch11.htm" >Chapter 11</A> discusses many classes which implement these design goals.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="CodingStyleNotes"><FONT SIZE=5 COLOR=#FF0000>Coding
Style Notes</FONT></A></H2>
<P>
There are several things about the source code in this book that
might be different from other Java books that you have seen. A
good percentage of the code styles here are simply done for readability.
Here is a list of what I think is different and superior:
<UL>
<LI><FONT COLOR=#000000>Code layout is cleaner.</FONT>
<LI><FONT COLOR=#000000>Comments are used.</FONT>
<LI><FONT COLOR=#000000>Source code order is different.</FONT>
</UL>
<P>
Let's go over each individually and show some examples.
<H2><A NAME="CodeLayout"><FONT SIZE=5 COLOR=#FF0000>Code Layout</FONT></A>
</H2>
<P>
The code in this book is laid out, or rather formatted, in a manner
that might be different from other Java books that have been published.
The format used in this book is my personal coding style for C
and C++. I feel that this format is more readable and easier on
the eyes and brain. My style differs in the ways described in
the next few sections.
<H3><A NAME="ParenthesesandCodeBlocking">Parentheses and Code
Blocking</A></H3>
<P>
The original Java samples and source code that come with the JDK
use what is known as the K&amp;R style of code blocking. This
style places the open parenthesis at the end of the statement
that begins the block. Listing 7.4 is an example of K&amp;R style.
<HR>
<BLOCKQUOTE>
<B>Listing 7.4. The </B><TT><B><FONT SIZE=1 FACE="Courier">BadKitty</FONT></B></TT></FONT><B>
class-K&amp;R style.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>public class BadKitty extends Kitty {
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public BadKitty( int clawCount ) {<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
K&amp;R stands for Kernigham (Brian) and Ritchie (Dennis), the
creators of the C programming language. In their (in)famous book,
<I>The C Programming Language,</I> this was the manner of code
layout, hence the name.
<P>
In this book however, the parenthetical style used is that the
braces match up in the same column. This style is easier to read
and more clearly marks the blocks of code. Listing 7.5 illustrates
this point.
<HR>
<BLOCKQUOTE>
<B>Listing 7.5. The </B><TT><B><FONT SIZE=1 FACE="Courier">BadKitty</FONT></B></TT></FONT><B>
class-Non-K&amp;R style.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>public class BadKitty extends Kitty<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public BadKitty( int clawCount )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Code goes here!
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
</TT>}
</BLOCKQUOTE>
<HR>
<H3><A NAME="UsingTabsVersusSpaces">Using Tabs Versus Spaces</A>
</H3>
<P>
Whenever code is indented, tabs are used. Tabs keep code aligned
and are portable between operating systems. The tab stops for
the code in this book are every four spaces.
<H3><A NAME="LiberalUseofSpaces">Liberal Use of Spaces</A></H3>
<P>
As you may or may not know, the compiler really doesn't care about
spaces in your code. All white space and comments are stripped
out before the actual compilation is done. Adding more spaces
than necessary is another readability issue. Wherever possible,
spaces are used. This might seem a bit lengthy. However, you will
see the improvement. The following line of code uses no spacing:
<BLOCKQUOTE>
<TT>blackBoxToUse=(myBlackBox==null)?defaultBlackBox:myBlackBox;</TT>
</BLOCKQUOTE>
<P>
And this one spaces things out nicely:
<BLOCKQUOTE>
<TT>blackBoxToUse = ( myBlackBox == null
) ? defaultBlackBox : myBlackBox;</TT>
</BLOCKQUOTE>
<P>
Look how much more readable the second line is! You can quickly
parse the line and understand what is going on. You don't spend
time parsing.
<H3><A NAME="MultipleLinesPerStatement">Multiple Lines Per Statement</A>
</H3>
<P>
In an effort to make the code more readable, all class and function
declarations are split into two, three, or four lines. The number
of lines depends on the number of elements that make up the statement.
The rules are different between class and function declarations.
<H4>Class Declarations</H4>
<P>
Class declarations in this book can appear on up to four lines
and are in the following order:
<BLOCKQUOTE>
<TT>[<I>access</I>] <B>class<BR>
</B><I>name<BR>
</I>[<B>extends</B><I> super_class</I>]<BR>
[<B>implements</B> <I>interface</I>]</TT>
</BLOCKQUOTE>
<P>
Usually this declaration is made on a single line. However, by
splitting it up into multiple lines you can immediately learn
information about the class without even reading the declaration.
Listing 7.6 illustrates the class declaration.
<HR>
<BLOCKQUOTE>
<B>Listing 7.6. A beautiful class declaration.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>public class<BR>
FileDate<BR>
extends Date<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;...<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H4>Function Declarations</H4>
<P>
Functions are declared in much the same manner as classes. However,
the function name is always on the second line, and all other
information about the function is on the first line. Function
declarations are always two lines long. The declarations are in
the following format:
<BLOCKQUOTE>
<TT>[<I>access</I>] <I>return_type<BR>
<I>function_name</I></I>( <I>arguments </I>)</TT>
</BLOCKQUOTE>
<P>
Listing 7.7 shows a complete function declaration using our described
style.
<HR>
<BLOCKQUOTE>
<B>Listing 7.7. A well-styled function declaration.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>public String<BR>
toFileString()<BR>
{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;retString
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= 1 + getMonth();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d
= getDate();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y
= getYear() % 100;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if ( y &lt; 10 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retString += &quot;0&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;retString += y;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if ( m &lt; 10 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retString += &quot;0&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;retString += m;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;if ( d &lt; 10 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retString += &quot;0&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;retString += d;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;return( retString );<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="Comments"><FONT SIZE=5 COLOR=#FF0000>Comments</FONT></A>
</H2>
<P>
Comments are a sore issue with many programmers. A friend of mine
(Hey Bill!) used to tell me that the only purpose comments serve
are to amuse the compiler. In some cases, he might be right. However,
to better document the code in this book, comments are everywhere.
Generally the comments are restricted to a single line, right
above the line of code to which it pertains. This is common practice.
<P>
In addition to the single line comments, I like to distinguish
chunks of code from others with the use of a block header. It
serves no purpose other than to segregate blocks of code visually.
Listing 7.8 shows an example of such segregation.
<HR>
<BLOCKQUOTE>
<B>Listing 7.8. Comments really do improve the readability of
your code!<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
package&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jif.util;<BR>
<BR>
//****************************************************************************
<BR>
//* 
Imports&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.util.Date;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
/**<BR>
&nbsp;* An extension of the default Java Date.<BR>
</TT>&nbsp;<TT>*<BR>
&nbsp;* @see java.util.Date<BR>
</TT>&nbsp;<TT>*<BR>
&nbsp;* @version&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.00,
1 May 1996<BR>
</TT>&nbsp;<TT>* @author&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jerry
Ablan, munster@mcs.net<BR>
&nbsp;*/<BR>
<BR>
public class FileDate<BR>
extends Date<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* 
toFileString&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* This method returns the date in
a format suitable for using in<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* file names. This format is YYMMDD,
where YY is the year, MM is the<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* month, and DD is the day.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @see java.util.Date#toString<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String<BR>
&nbsp;&nbsp;&nbsp;&nbsp;toFileString()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;retString
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m
= 1 + getMonth();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d
= getDate();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y
= getYear() % 100;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( y &lt; 10
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retString
+= &quot;0&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retString += y;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( m &lt; 10
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retString
+= &quot;0&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retString += m;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( d &lt; 10
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retString
+= &quot;0&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retString += d;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( retString
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<H2><A NAME="CodeOrder"><FONT SIZE=5 COLOR=#FF0000>Code Order</FONT></A>
</H2>
<P>
Finally, there is code order. Again, some of the Java books published
have different orders. The oddest order I've seen is that all
class variable declarations are below all of the function declarations.
This is quite odd, and not at all like any other programming language.
I've tried to keep the coding style similar to C and C++ for clarity.
<P>
All the source code in this book lays out in the following order:
<OL>
<LI>Package name
<LI>Imports
<LI>Class declaration
<LI>Class members declaration
<LI>Class functions
</OL>
<P>
All class functions lay out in a similar manner:
<OL>
<LI>Function declaration
<LI>Function variables
<LI>Function code
</OL>
<P>
Maintaining consistency throughout the code considerably improves
readability.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter introduces the four application design standards
that are implemented in the next four chapters. These standards
produce configuration processing, common logging, database connectivity,
and consistent user interface. Through the use of these standards,
the intranet application development will just fly by!
<P>
In the following chapters, the standards set forth in this chapter
are implemented.

<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch6.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch8.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
