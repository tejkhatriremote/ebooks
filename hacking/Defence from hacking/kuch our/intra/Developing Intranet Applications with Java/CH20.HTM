<HTML>

<HEAD>
   <TITLE>Chapter 20 --Customer Support Maintenance</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 20</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Customer Support Maintenance</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>




<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#ApplicationDesign" >Application Design</A>
<LI><A HREF="#DatabaseDesign" >Database Design</A>
<LI><A HREF="#Implementation" >Implementation</A>
<UL>
<LI><A HREF="#BuildingtheUserInterface" >Building the User Interface</A>
<LI><A HREF="#DatabaseAccess" >Database Access</A>
<LI><A HREF="#RetrievingtheProductandProblemLists" >Retrieving the Product and Problem Lists</A>
<LI><A HREF="#ProductandProblemSelectionChanges" >Product and Problem Selection Changes</A>
</UL>
<LI><A HREF="#ProgrammingConsiderations" >Programming Considerations</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
In <A HREF="ch19.htm" >Chapter 19</A>, &quot;Product Maintenance,&quot;
you created a data entry program that allows users to create and
maintain data in a product table. It is a useful application in
itself; however, the application that you are going to create
for this chapter relies on the data entered by that program. This
is the Customer Support Maintenance program.
<P>
Although this is the last sample application of the book, it certainly
is not the least. It is the second most complex intranet application
that you've created, the first being the Customer Support Maintenance
application. This application allows customer service representatives
on your intranet to track problem reports generated by your customers.
<P>
This chapter follows the same topic format as the last chapters
and covers the following topics in regards to the Customer Support
Maintenance application:
<UL>
<LI><FONT COLOR=#000000>Application Design-This section covers
the general design of the application, including functionality
and user interface considerations.</FONT>
<LI><FONT COLOR=#000000>Database Design-This section covers the
database requirements for this application. Here you examine the
data model used to support the application design.</FONT>
<LI><FONT COLOR=#000000>Implementation-This section covers how
the application and database design are implemented.</FONT>
<LI><FONT COLOR=#000000>Programming Considerations-In this section,
I'll recap the implementation and summarize any difficult programming
situations that have arisen.</FONT>
</UL>
<P>
This four-step format is used throughout all of the sample application
chapters. Hopefully, it will provide you with valuable insight
and ideas for creating your own intranet applications.
<H2><A NAME="ApplicationDesign"><FONT SIZE=5 COLOR=#FF0000>Application
Design</FONT></A></H2>
<P>
Remember that your goal is to make intranet users want to use
the application. Simply placing an application out on the network
is not enough. A program has to be functional, goodlooking, and
most of all, easy to use.
<P>
This application has been designed primarily for ease of use.
Figure 20.1 is the proposed user interface for the Customer Support
Maintenance program.
<P>
<A HREF="f20-1.gif" ><B>Figure 20.1 : </B><I>The Customer Support Maintenance user interface</I></A><I>.</I>
<P>
At the top are two lists. The list on the left contains all the
available products. The list on the right contains all of the
problems for a given product.
<P>
The product list on the left frees you from the need to have a
product pick list in this application. At startup, all of the
products are displayed.
<P>
The problem list on the right is not active until a product is
selected on the left. After the user selects a product, any problems
associated with that product are retrieved from the database and
displayed in that list.
<P>
When choosing a problem from the list, the user might add a resolution
or, perhaps, augment the current problem. Maintenance is fairly
free-form. Changes are saved with the Save button.
<P>
By selecting New, a new problem can be entered for the chosen
product. This new problem can also be saved with the Save button.
<P>
Figure 20.2 shows what the screen program will look like when
editing an existing problem.
<P>
<A HREF="f20-2.gif" ><B>Figure 20.2 : </B><I>The application editing an existing problem.</I></A>
<H2><A NAME="DatabaseDesign"><FONT SIZE=5 COLOR=#FF0000>Database
Design</FONT></A></H2>
<P>
This application will be responsible for manipulating problem
records. These records represent a problem that a customer has
or had with a product. Each stored row represents a single problem.
Your SQL to retrieve and update the table will be simple because
each problem has a unique identifying number. The table you're
going to use in this sample application is called the product
problem table.
<P>
This table is a child table from the product table described in
<A HREF="ch19.htm" >Chapter 19</A>.
<P>
Table 20.1 shows the columns that you need to store your problem
information.<BR>
<P>
<CENTER><B>Table 20.1. The product table layout.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER = 1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=121><I>Description</I></TD><TD WIDTH=115><I>Column Name</I>
</TD><TD WIDTH=95><I>Type</I></TD><TD WIDTH=106><CENTER><I>Can Be Null?</I></CENTER>
</TD><TD WIDTH=122><CENTER><I>Default</I></CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Product ID</TD><TD WIDTH=115>prod_id</TD><TD WIDTH=95>number( 5 )
</TD><TD WIDTH=106><CENTER>No</CENTER></TD><TD WIDTH=122><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Problem ID</TD><TD WIDTH=115>prob_id</TD><TD WIDTH=95>number( 5 )
</TD><TD WIDTH=106><CENTER>No</CENTER></TD><TD WIDTH=122><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Description</TD><TD WIDTH=115>desc_text</TD>
<TD WIDTH=95>char( 255 )</TD><TD WIDTH=106><CENTER>No</CENTER>
</TD><TD WIDTH=122><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Reported By</TD><TD WIDTH=115>reported_by_text
</TD><TD WIDTH=95>char( 80 )</TD><TD WIDTH=106><CENTER>Yes</CENTER>
</TD><TD WIDTH=122><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Problem Resolution</TD><TD WIDTH=115>resolution_text
</TD><TD WIDTH=95>char( 255 )</TD><TD WIDTH=106><CENTER>Yes</CENTER>
</TD><TD WIDTH=122><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Problem Date</TD><TD WIDTH=115>start_date</TD>
<TD WIDTH=95>date</TD><TD WIDTH=106><CENTER>Yes</CENTER></TD>
<TD WIDTH=122><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=121>Resolution Date</TD><TD WIDTH=115>end_date</TD>
<TD WIDTH=95>date</TD><TD WIDTH=106><CENTER>Yes</CENTER></TD>
<TD WIDTH=122><CENTER>None</CENTER></TD></TR>
</TABLE></CENTER>
<P>
<P>
Figure 20.3 shows the entity relationship diagram for your database.
This data model diagram represents the entire database developed
for this book.
<P>
<A HREF="f20-3.gif" ><B>Figure 20.3 : </B><I>The entity relationship diagram with employee tables.</I></A>
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER = 1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
Entity relationship diagrams are discussed in <A HREF="ch13.htm" >Chapter 13</A>, &quot;Employee Files.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
In addition to creating a table, you create a database synonym
for your table. This allows everyone to access the table with
the same name, without having to worry about the schema that the
table resides in.
<P>
Listing 20.1 shows the SQL commands to create the product problem
table.
<HR>
<BLOCKQUOTE>
<B>Listing 20.1. SQL commands.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>/*&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;the&nbsp;table&nbsp;*/
<BR>
create&nbsp;table&nbsp;prod_prob_t<BR>
(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;prod_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(&nbsp;5&nbsp;)&nbsp;not&nbsp;null,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;prob_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(&nbsp;5&nbsp;)&nbsp;not&nbsp;null,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;desc_text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;255&nbsp;)&nbsp;not&nbsp;null,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;reported_by_text&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;80&nbsp;),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;resolution_text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;255&nbsp;),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;start_date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date&nbsp;default&nbsp;sysdate,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;end_date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date
<BR>
);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;a&nbsp;primary&nbsp;key&nbsp;*/
<BR>
alter&nbsp;table&nbsp;prod_prob_t<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add<BR>
&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primary&nbsp;key
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob_id
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;a&nbsp;foreign&nbsp;key&nbsp;*/
<BR>
alter&nbsp;table&nbsp;prod_prob_t<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add<BR>
&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreign&nbsp;key
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;references&nbsp;prod_t
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Grant&nbsp;access&nbsp;for&nbsp;the&nbsp;table&nbsp;to&nbsp;the&nbsp;user&nbsp;role&nbsp;*/
<BR>
grant&nbsp;select,insert,delete,update&nbsp;on&nbsp;prod_prob_t&nbsp;to&nbsp;ia_user_r&nbsp;;
<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Drop&nbsp;any&nbsp;existing&nbsp;public&nbsp;synonym&nbsp;*/
<BR>
drop&nbsp;public&nbsp;synonym&nbsp;prod_prob&nbsp;;<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;a&nbsp;public&nbsp;synonym&nbsp;for&nbsp;our&nbsp;table&nbsp;*/
<BR>
create&nbsp;public&nbsp;synonym&nbsp;prod_prob&nbsp;for&nbsp;prod_prob_t&nbsp;;</TT>
</BLOCKQUOTE>
<HR>
<P>
This SQL is similar to table creation presented in the previous
chapters. After the table is created, a primary key is created.
Then a foreign key is created to reference the product table.
Access rights are granted to your demonstration user, and a public
synonym is created.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER = 1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=580><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=580>
<BLOCKQUOTE>
You must create the <TT>prod_t</TT> (Product) table before you can create the <TT>prod_prob_t</TT> (Product Problem) table. Otherwise, the <TT>prod_prob_t</TT> SQL will fail!
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H2><A NAME="Implementation"><FONT SIZE=5 COLOR=#FF0000>Implementation</FONT></A>
</H2>
<P>
The rest of this chapter covers the implementation of the Customer
Support Maintenance program. First, I'll discuss the user interface
and how it was created. Secondly, I'll discuss the database access
used in the program. Finally, I'll go over some of the programming
considerations that came up during the application construction.
<H3><A NAME="BuildingtheUserInterface">Building the User Interface</A>
</H3>
<P>
The Customer Support Maintenance program is the second most complex
program in this book. It utilizes some of the cooler user interface
classes discussed in <A HREF="ch11.htm" >Chapter 11</A>, &quot;User
Interface Classes.&quot; However, it doesn't operate like any
other application in the book. This application does use the <TT>SimpleDBJiflet</TT>,
<TT>SimpleDBUI</TT>, and <TT>DBRecord</TT>
classes, although their use is unconventional compared to the
last applications.
<P>
This application consists of two separate sets of components on
one screen. This is done by creating two subpanels and inserting
them into a <TT>BorderLayout</TT>.
Figure 20.4 illustrates your user interface.
<P>
<A HREF="f20-4.gif" ><B>Figure 20.4 : </B><I>The Customer Support Maintenance layout.</I></A>
<P>
Listing 20.2 shows the source code for the construction of the
user interface.
<HR>
<BLOCKQUOTE>
<B>Listing 20.2. The Product Maintenance interface construction
code.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;List&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prodList
= new List();<BR>
&nbsp;&nbsp;&nbsp;List&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probList
= new List();<BR>
<BR>
&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id
= new JifTextField( &quot;&quot;, &quot;prod_id&quot; );<BR>
&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob_id
= new JifTextField( &quot;&quot;, &quot;prob_id&quot; );<BR>
&nbsp;&nbsp;&nbsp;JifTextArea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob_desc_text
= <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new
JifTextArea( &quot;&quot;, &quot;desc_text&quot; );<BR>
&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob_rep_by_text
= <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new
JifTextField( &quot;&quot;, &quot;reported_by_text&quot; );<BR>
&nbsp;&nbsp;&nbsp;JifTextArea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolution_text
= <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new
JifTextArea( &quot;&quot;, &quot;resolution_text&quot; );<BR>
&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_date
= <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new
JifTextField( &quot;&quot;, &quot;start_date&quot; );<BR>
&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
end_date = new JifTextField( &quot;&quot;, &quot;end_date&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;Vector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rowMap = new Vector( 5 );<BR>
&nbsp;&nbsp;&nbsp;Vector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
prodMap = new Vector( 5 );<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;ProblemTrackerUI( SimpleDBJiflet jiflet )<BR>
&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( jiflet );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout( new BorderLayout()
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp; Build a big
panel...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JifPanel p2 = new JifPanel();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p2.setLayout( new BorderLayout()
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp; Build a label
panel...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JifPanel p1 = new JifPanel();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.setFont( new Font( &quot;Helvetica&quot;,
Font.PLAIN, 14 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.setLayout( new GridLayout(
1, 2, 5, 5 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JifPanel tp = new JifPanel(
JifPanel.LOWERED );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tp.setText( &quot;Products&quot;,
JifPanel.TEXT_RAISED, JifPanel.CENTER );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.add( tp );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tp = new JifPanel( JifPanel.LOWERED
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tp.setText( &quot;Problems&quot;,
JifPanel.TEXT_RAISED, JifPanel.CENTER );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.add( tp );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p2.add( &quot;North&quot;,
p1 );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp; Build a listbox
panel...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1 = new JifPanel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.setFont( new Font( &quot;Helvetica&quot;,
Font.PLAIN, 14 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prodList.setFont( new Font(
&quot;Helvetica&quot;, Font.PLAIN, 14 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probList.setFont( new Font(
&quot;Helvetica&quot;, Font.PLAIN, 14 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.setLayout( new GridLayout(
1, 2, 5, 5 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.add( prodList );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.add( probList );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p2.add( &quot;Center&quot;,
p1 );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp; Build a UI
panel...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1 = new JifPanel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GridBagLayout gbl = new GridBagLayout();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int cw[] = { 10, 10, 10, 10,
10, 10, 10, 10, 10, 10, 10, 10, 10 };<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double rc14_0[] = { 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.columnWidths = new int[
13 ];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.rowHeights = new int[
10 ];<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.columnWeights = new double[
13 ];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.rowWeights = new double[
10 ];<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy( cw, 0, gbl.columnWidths,
0, 13 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy( cw, 0, gbl.rowHeights,
0, 10 );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy( rc14_0,
0, gbl.columnWeights, 0, 13 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy( rc14_0,
0, gbl.rowWeights, 0, 10 );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.setLayout( gbl );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( new
Label( &quot;Problem:&quot;, Label.RIGHT ), <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=0&quot;
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( prob_desc_text,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;x=1;y=0;width=9;height=3;fill=both&quot;
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( new
Label( &quot;Resolution:&quot;, Label.RIGHT ), <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=4&quot;
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( resolution_text,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;x=1;y=4;width=9;height=3;fill=both&quot;
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( new
Label( &quot;Reported By:&quot;, Label.RIGHT ), <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=7&quot;
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( prob_rep_by_text,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;x=1;y=7;width=9;fill=horizontal&quot;
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( new
Label( &quot;Problem Date:&quot;, Label.RIGHT ), <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=8&quot;
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( start_date,
&quot;x=1;y=8;width=9;fill=both&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( new
Label( &quot;Resolution Date:&quot;, Label.RIGHT ), <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=9&quot;
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( end_date,
&quot;x=1;y=9;width=9;fill=both&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Note: The prod_id and prob_id
fields need to get on the panel.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If they don't, the SQL is
not generated for them, and you cannot<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* save anything. I trick them
onto the panel below. I don't want<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* the user to see them, so
I hide them after adding them behind<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* another component.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Try commenting out the hide()
calls below and see what happens.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* It is pretty cool! ;)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp; Hide this behind
the new button...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( prod_id,
&quot;x=11;y=0;width=2;fill=horizontal&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( newButton,
&quot;x=11;y=0;width=2;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp; Hide this behind
the save button...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( prob_id,
&quot;x=11;y=2;width=2&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints( saveButton,
&quot;x=11;y=2;width=2;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp; Hide the two
fields...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id.hide();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob_id.hide();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp; Make the sauce...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;North&quot;, p2
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;Center&quot;, p1
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp; Disable buttons...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newButton.disable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton.disable();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp; Tell which
are numeric...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob_id.setNumeric( true );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id.setNumeric( true );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob_id.setPrimaryKey( true
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id.setPrimaryKey( true
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_date.setDate( true );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end_date.setDate( true );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearScreen();<BR>
&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
First, build a panel that contains two labels and two list boxes.
These make up the top half of the interface. Then create a panel
that holds the <TT>GridBagLayout</TT>
of text fields and areas. These are where the user will type data.
<P>
The two panels are then placed into a master <TT>BorderLayout</TT>.
<H4>Hiding Components</H4>
<P>
This application uses a cool trick. There are two columns, <TT>prod_id</TT>
and <TT>prob_id</TT>, that the user
should never see. However, they are required to be part of the
layout because you need the values they hold for proper SQL generation
by your <TT>SQLFactory</TT> classes.
<P>
The solution is to add them to the layout, but make them invisible
from the user. You accomplish this by placing them behind the
two buttons and then hiding them. The following is the source
code:
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Hide
this behind the new button...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints(
prod_id, &quot;x=11;y=0;width=2;fill=horizontal&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints(
newButton, &quot;x=11;y=0;width=2;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Hide
this behind the save button...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints(
prob_id, &quot;x=11;y=2;width=2&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1.addWithConstraints(
saveButton, &quot;x=11;y=2;width=2;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Hide
the two fields...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id.hide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob_id.hide();</TT>
</BLOCKQUOTE>
<P>
Without hiding the components, you get a weird double-component
look that is not natural. But when they are hidden, only the container
itself knows that they are there.
<P>
Being there, they can store values and generate SQL code. It's
a pretty cool trick.
<H3><A NAME="DatabaseAccess">Database Access</A></H3>
<P>
This application communicates with the database through the use
of the <TT>DBRecord</TT> extension
class <TT>ProductProblemRecord</TT>.
This class is used solely to retrieve product problem table rows
from the database.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER = 1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The <TT>ProductProblemRecord</TT> and other database classes are reused in several other applications. They have been placed in their own package along with other shared code. This package is called <TT>jif.common</TT>. It contains all the common classes 
between all the applications.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Before you can edit problems, you need the user to select a product.
<H3><A NAME="RetrievingtheProductandProblemLists">Retrieving the
Product and Problem Lists</A></H3>
<P>
Before the user can edit product problems, you must populate the
list of products. This is done the same way the product pick list
was done in the previous chapter:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
loadLists&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;loadLists()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newButton.disable();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().showStatus(
&quot;Loading lists...&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().startWait();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prodList.clear();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prodMap.removeAllElements();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rows = 0;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probList.clear();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
sql = &quot;select * from prod order by desc_text&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
rs =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().getConnector().getStatement().executeQuery(
sql );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
( rs.next() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductRecord
pr = new ProductRecord( rs );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prodList.addItem(
pr.desc_text );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prodMap.insertElementAt(
pr, rows );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( rows &gt; 0 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prodList.select(
0 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadProblemList();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().getConnector().errorLog(
e.toString() );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().endWait();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().showStatus(
&quot;Products Loaded!&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
Retrieve all the products in sorted order. Each one is stored
in your product cache and then placed into the list. After all
of the products have been loaded, select the first one in the
list and load any problems associated with that product:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
loadProblemList&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* Load the problem lists...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;loadProblemList()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().showStatus(
&quot;Loading problems...&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Set
the current product id...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductRecord
pr =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
ProductRecord )prodMap.elementAt( prodList.getSelectedIndex()
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod_id.setText(
Integer.toString( pr.prod_id ) );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probList.clear();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowMap.removeAllElements();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Clear
out any records...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().getDBRecord().clear();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearScreen();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rows = 0;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
sql = &quot;select * from prod_prob &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;where
prod_id = &quot; + Integer.toString( pr.prod_id ) + &quot; &quot;
+<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;
order by desc_text&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
rs =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().getConnector().getStatement().executeQuery(
sql );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
( rs.next() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductProblemRecord
ppr =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
ProductProblemRecord )getJiflet().getDBRecord();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ppr.parseResultSet(
rs );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
s = Integer.toString( ppr.prob_id );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= &quot; &quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= ( new FileDate( ppr.start_date ) ).toNormalString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= &quot; &quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= ( new FileDate( ppr.end_date ) ).toNormalString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= &quot; &quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= ppr.desc_text;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probList.addItem(
s );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Make
a row map...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowMap.insertElementAt(
ppr, rows );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( rows &gt; 0 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probList.select(
0 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showProblemDetail();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().getConnector().errorLog(
e.toString() );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().showStatus(
&quot;Problems Loaded!&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newButton.enable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
This routine relies on the fact that a product has been selected.
It retrieves the selected index from the product <TT>List</TT>
and uses that to get the product ID to use for its lookup.
<P>
After the problems for that particular product ID have been retrieved,
they are loaded into the problem <TT>List</TT>.
After all of these have been loaded, the first one is chosen by
default.
<P>
When it is chosen, the problem detail is displayed:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
showProblemDetail&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;showProblemDetail()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Get
my record...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductProblemRecord
ppr =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
ProductProblemRecord )rowMap.elementAt( <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probList.getSelectedIndex()
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Fill
in the fields...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().setDBRecord(
ppr );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveToScreen();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
Here, you utilize the display mechanism built into your <TT>SimpleDBUI</TT>
class. This enables you to use the <TT>setDBRecord()</TT>
method and call the <TT>moveToScreen()</TT>
method. This method formats the data and moves it to the screen.
<H3><A NAME="ProductandProblemSelectionChanges">Product and Problem
Selection Changes</A></H3>
<P>
When the user changes products, you need to reload the problem
list. To do this, trap some of the events for your lists. When
a list item is selected, an <TT>Event.LIST_SELECT</TT>
is generated. Simply capture this event and reload accordingly:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
handleEvent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;handleEvent( Event event )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== prodList )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( event.id == Event.LIST_SELECT )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadProblemList();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== probList )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( event.id == Event.LIST_SELECT )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showProblemDetail();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( super.handleEvent(
event ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
When the product list has a new selection, call the <TT>loadProblemList()</TT>
method. When the problem list changes, show the problem detail
with the <TT>showProblemDetail()</TT>
method.
<H2><A NAME="ProgrammingConsiderations"><FONT SIZE=5 COLOR=#FF0000>Programming
Considerations</FONT></A></H2>
<P>
This application presented you with an interesting user interface
challenge, not to mention two table database lookups. You needed
to present an intuitive interface to the user that was easy to
use.
<P>
You also enhanced the interface using nested layout managers.
You nested a <TT>GridLayout</TT> within
a <TT>BorderLayout</TT> to space your
components evenly. You also nested a <TT>GridBagLayout</TT>
within another <TT>BorderLayout</TT>.
<P>
To recap, this application introduced the following Java Intranet
programming topics:
<UL>
<LI>Nested Layout Managers: You nested several layout managers
into your master layout. This was illustrated in Figure 20.4.
<LI>Hidden Components: You needed two components to hold a portion
of your SQL statement, but they shouldn't be seen by the user.
So, they were hidden behind the New and Save buttons.
<LI>Cascading Lookups: When the user selects a product, the problems
need to be retrieved for that product. Then, when the user selects
a problem, the problem detail needs to be displayed. This cascading
lookup is used in this application.
</UL>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter introduced you to the final sample application in
your intranet application suite: the Customer Support Maintenance
application. This program is responsible for tracking customer
support information regarding problems with the products that
you sell. This application should be useful to customer service
as well as technical support employees on your intranet.
<P>
In the next chapter, &quot;Extending the Java Intranet Framework,&quot;
I'll talk about the future of the Java Intranet Framework (JIF)
and your intranet.

<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch19.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch21.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
