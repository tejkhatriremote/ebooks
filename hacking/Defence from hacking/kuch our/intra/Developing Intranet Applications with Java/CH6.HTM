<HTML>

<HEAD>
   <TITLE>Chapter 6 -- Database Connectivity Options</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 6</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Database Connectivity Options</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>


<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#DatabaseOverview" >Database Overview</A>
<LI><A HREF="#DatabaseTerminology" >Database Terminology</A>
<LI><A HREF="#DatabaseLocations" >Database Locations</A>
<UL>
<LI><A HREF="#LocalandRemote" >Local and Remote</A>
<LI><A HREF="#Tiering123" >Tiering 1-2-3</A>
</UL>
<LI><A HREF="#DatabaseAccessMethods" >Database Access Methods</A>
<UL>
<LI><A HREF="#NativeDrivers" >Native Drivers</A>
<LI><A HREF="#ODBC" >ODBC</A>
<LI><A HREF="#SQL" >SQL</A>
</UL>
<LI><A HREF="#DatabasesandJava" >Databases and Java</A>
<UL>
<LI><A HREF="#AccessviaWebServer" >Access via Web Server</A>
<LI><A HREF="#AccessviaProprietaryServer" >Access via Proprietary Server</A>
<LI><A HREF="#NetworkAccess" >Network Access</A>
<LI><A HREF="#DirectAccess" >Direct Access</A>
<LI><A HREF="#JDBC" >JDBC</A>
<LI><A HREF="#JDBCGoals" >JDBC Goals</A>
<LI><A HREF="#JDBCOverview" >JDBC Overview</A>
<LI><A HREF="#JDBCVendorSupport" >JDBC Vendor Support</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<I><B><FONT SIZE=5>connect \k-'nekt\ v:</FONT></B><FONT SIZE=5>
to join or fasten together</FONT></I>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
A computer application is nothing more than a bundle of source
code that manipulates a set of data. That data is key to the operation
and functionality of the application. The data, however, can come
from a variety of places. Be it user entered, in-memory defaults,
or offline stored databases, these databases and their relationship
to Java are the subject of this chapter.
<P>
In this chapter I'll cover the following topics:
<UL>
<LI><FONT COLOR=#000000>A quick introduction to databases. This
will cover some &quot;databasics,&quot; and some terms that will
be used in the remainder of this book</FONT>
<LI><FONT COLOR=#000000>How Java can interact with databases</FONT>
<LI><FONT COLOR=#000000>A sampling of several Java/Database connectivity
solutions</FONT>
<LI><FONT COLOR=#000000>The Java Database Connectivity Package,
or JDBC</FONT>
<LI><FONT COLOR=#000000>A working JDBC/Database package called
mSQL</FONT>
</UL>
<P>
This chapter will set the stage for developing our database framework
and the database applications later in the book.
<H2><A NAME="DatabaseOverview"><FONT SIZE=5 COLOR=#FF0000>Database
Overview</FONT></A></H2>
<P>
Databases come in all different shapes and sizes. They can be
flat files of ASCII data (like Q&amp;A) or complex binary tree
structures (Oracle or Sybase). In any form, a database is a <I>data
store</I>, or a place that holds data. The type of data that is
contained in the store is irrelevant.
<P>
If a database is simply a collection of data, then what keeps
track of changes to this data? That is the job of the <I>database
management system</I>, or DBMS. Some DBMSs are <I>relational</I>.
Those are RDBMSs. The relational part refers to the fact that
separate collections of data within the reaches of the RDBMS can
be looked at together in unison. The RDBMS is responsible for
ensuring the integrity of the database. Sometimes, things will
get out of whack and the RDBMS will keep all that data in line.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Very few DBMSs are not RDBMSs these days. We will refer to any database, be it DBMS or RDBMS as RDBMS for the remainder of this chapter and book.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
There are so many different types of RDBMSs available today that
it would probably take two full books to give a summary of each
one. This overview is a quick start guide for those of you who
are not familiar with some newer concepts in data storage.
<H2><A NAME="DatabaseTerminology"><FONT SIZE=5 COLOR=#FF0000>Database
Terminology</FONT></A></H2>
<P>
In the days of yore, programming database applications was pretty
simple. There were mainframe databases and there were very few
microcomputer databases available. The ones that were available
cost an arm and a leg. The cheap ones were, well, you got what
you paid for. But you always had database files, records, and
fields. 
<P>
The database terms of yesteryear, however, have been replaced
by new ones. Some of the bigger database companies like Oracle
and Sybase have redefined database terminology. The main thrust
of this redefining is most likely in response to the larger customer
base that is not &quot;programming-literate.&quot;
<P>
A programmer can deal with files, records, and fields. But more
and more non-technical people are creating database applications
and queries these days. Their formal training is through the use
of applications. As you'll see, some of the new terms are commonly
found in spreadsheet and word processing programs.
<P>
The following is a list of current database terms that will be
used in the rest of this chapter and throughout the book:
<UL>
<LI><I>Client\Server</I>. Client\server is more of an architecture
than a tangible entity. The client is a computer system that requests
the services provided by an entirely different computer system.
On a smaller scale, the client and server may be separate processes
running on the same computer system. The distinction is that there
is a service provider (the server), and a consumer of that service
(the client). For your purposes here, the server would be the
RDBMS, and the client is your application that is requesting data
from the server.
<LI><I>Database </I>or <I>Instance</I>. The database or instance
is the entity, or collection of data, that is created and stored
for retrieval and modification. Depending on the RDBMS, several
of these entities can exist on a single machine. For instance,
multiple Oracle instances can exist on a UNIX server. Each has
a distinct area for data, and unless properly configured, they
have no knowledge of each other. A database or instance is comprised
of <I>schemas</I>.
<LI><I>Schema</I>. A schema is a collection of database objects
that belongs to a single user of the database. Databases have
many users.
<LI><I>Table<B>.</B></I> A table is a database object that contains
a single set of data. Like things are stored in tables. For instance,
at a company a normal table to have is an employee table. This
would store all kinds of information about an employee. A table
contains <I>rows</I> of data.
<LI><I>Row</I>. A row of data is a single record in a table. A
row is divided into <I>columns</I>.
<LI><I>Column</I>. A column is the smallest unit of data in a
table. It is a part of the row. When data is displayed in a spreadsheet-like
fashion, a column would be the up/down slice of data.
</UL>
<P>
Figure 6.1 is a visual representation of the preceding terminology.
<P>
<A HREF="f6-1.gif" ><B>Figure 6.1 : </B><I>A visual guide to the database terminology used in this book.</I></A>
<H2><A NAME="DatabaseLocations"><FONT SIZE=5 COLOR=#FF0000>Database
Locations</FONT></A></H2>
<P>
Databases can exist in various places. Larger databases require
the horsepower of a multiple CPU server. Smaller databases can
get away with only a microcomputer serving data. But where the
data is stored is important to the application programmer. There
are only two options for database location: local and remote.
<H3><A NAME="LocalandRemote">Local and Remote</A></H3>
<P>
A local database is one that resides on the machine on which client
applications run. Local databases offer the fastest response time
because there is no network traffic between the client (your application)
and the server (the RDBMS engine). Some examples of local databases
are Paradox from Borland, Access from Microsoft, and Personal
Oracle from Oracle.
<P>
A remote database, on the other hand, is one that resides on a
machine that the client software does not run on. This is an important
distinction for two reasons:
<UL>
<LI><FONT COLOR=#000000>Response time will be </FONT>slower. Even
the fastest network connections will not get you the same response
time as a local database. Bear in mind, the difference might be
seconds or less.
<LI><FONT COLOR=#000000>An additional software layer is needed
to communicate with the database.</FONT>
</UL>
<P>
The first item is the general case. It is also only relevant for
performance-critical applications.  A well-tuned RDBMS server
can out-perform a poorly tuned local server in some cases.
<P>
The second item, however, might cause grief and headaches that
weren't expected. With some database server and client products,
a second software layer is necessary to transparently interact
with the remote database. This software might be an optional software
package that is not included with the server software. I'll get
to this layer in the next topic, &quot;Database Access.&quot;
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Here are some of the database software vendor Web sites, and some excellent sources of database information:</BLOCKQUOTE>
<UL>
<LI>Data Access Corporation. <TT><A HREF="http://www.daccess.com/">http://www.daccess.com/</A></TT>
<LI>Informix Software, Inc. <TT><A HREF="http://www.informix.com">http://www.informix.com</A></TT>
<LI>Free Database List. <BR>
<TT><A HREF="http://cuiwww.unig.e.ch/~scg/FreeDB/FreeDB.list.html">http://cuiwww.unig.e.ch/~scg/FreeDB/FreeDB.list.html</A></TT>
<LI>Microsoft Corporation. <TT><A HREF="http://www.microsoft.com">http://www.microsoft.com</A></TT>
<LI>Oracle Corporation. <TT><A HREF="http://www.oracle.com">http://www.oracle.com</A></TT>
<LI>Progress Software Corporation. <TT><A HREF="http://www.progress.com">http://www.progress.com</A></TT>
<LI>Sybase, Inc. <TT><A HREF="http://www.sybase.com">http://www.sybase.com</A></TT>
</UL>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="Tiering123">Tiering 1-2-3</A></H3>
<P>
There is one more topic I'd like to touch upon before I get into
accessing databases: it is the client-server concept of multi-tiering.
Unfortunately, I have heard about ten different explanations of
this concept and not one of them ever is the same. The following
is my take on the single-, two- and three-tiered architectures.
<H4>Single-Tiered</H4>
<P>
The application and the data reside together logically. These
are not usually database programs. An example would be a calculator
program. The logic and its data reside together. Figure 6.2 shows
a model of a single-tier application.
<P>
<A HREF="f6-2.gif" ><B>Figure 6.2 : </B><I>A single-tier application.</I></A>
<H4>Two-Tiered</H4>
<P>
The application resides in a different logical location than the
data. These are usually database applications. Most client/server
applications fit into this category. Figure 6.3 shows a model
of a two-tier application.
<P>
<A HREF="f6-3.gif" ><B>Figure 6.3 : </B><I>A two-tier application.</I></A>
<H4>Three-Tiered</H4>
<P>
In a three-tiered system, the application resides in a different
logical location than the logic of the application <I>and</I>
the data.
<P>
To put it another way, the client software makes a call to a remote
service. That remote service is responsible for interacting with
the data and responding to the client. The client has no knowledge
of how and where the data is stored. All it knows about is the
remote service. Conversely, the remote service has no knowledge
of the clients that will be calling it. It only knows about the
data.
<P>
This partitioning of logic allows for better data control and
reuse of existing code. Three-tier architecture is becoming more
widespread because more and more tools are being created that
handle the tiering automatically.
<P>
Figure 6.4 shows a model of a three-tier application.
<P>
<A HREF="f6-4.gif" ><B>Figure 6.4 : </B><I>A three-tier application.</I></A>
<H2><A NAME="DatabaseAccessMethods"><FONT SIZE=5 COLOR=#FF0000>Database
Access Methods</FONT></A></H2>
<P>
In order to &quot;talk&quot; to your database you need to use
some sort of software. Whether it comes with your server or you
have to write the code yourself, this software is essential for
database communications.
<P>
Although there are innumerable methods of retrieving and storing
data, the following are the most common: native, ODBC, and SQL.
SQL is probably the most common data access method, ODBC a close
second, and, except for driver creators, native methods are rarely
used. Figure 6.5 illustrates the software layers in the three
methods outlined.
<P>
<A HREF="f6-5.gif" ><B>Figure 6.5 : </B><I>The software layers that can be used to access data.</I></A>
<P>
The following is a short discussion on each of the three access
methods.
<H3><A NAME="NativeDrivers">Native Drivers</A></H3>
<P>
Native drivers give you the raw power of talking directly to your
database. When you make the connection and retrieve data, you
are talking right to the file system. An example of a native driver
is the Oracle Call Interface, or OCI from Oracle Corporation for
Oracle databases.
<P>
Native drivers are usually statically or dynamically linked into
your software at compile time.
<H4>Advantages</H4>
<UL>
<LI><FONT COLOR=#000000>Very fast - with the actual database access
code linked together with your program, data access is lightning
fast.</FONT>
</UL>
<H4>Disadvantages</H4>
<UL>
<LI><FONT COLOR=#000000>Not portable - applications created in
this manner are usually not portable to other platforms without
code modifications.</FONT>
<LI><FONT COLOR=#000000>Inflexible - because the driver is linked
into your application, changes in the driver software require
possible recompilation of your application.</FONT>
</UL>
<H3><A NAME="ODBC">ODBC</A></H3>
<P>
<I>Open Database Connectivity</I>, or ODBC, is a standard developed
by Microsoft Corporation. ODBC is an application program interface
for accessing data in a standard manner from an abundance of data
sources regardless of their type. If the data source is ODBC compliant,
your program can talk to it.
<P>
ODBC drivers are available for almost every major database vendor.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Check out the ODBC Homepage for some cool ODBC links!<BR>
<TT><A HREF="http://ourworld.compuserve.com/homepages/VBrant/">http://ourworld.compuserve.com/homepages/VBrant/</A></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>Advantages</H4>
<UL>
<LI><FONT COLOR=#000000>Fast - Not as fast as native drivers,
but pretty fast. You have one additional layer of software to
go through to get to your data.</FONT>
<LI><FONT COLOR=#000000>SQL Enabled - You can use SQL to query
the database.</FONT>
</UL>
<H4>Disadvantages</H4>
<UL>
<LI><FONT COLOR=#000000>Not portable - Applications created in
this manner are usually not portable to other platforms without
code modifications.</FONT>
<LI><FONT COLOR=#000000>Inflexible - Because the driver stub is
linked into your application, changes in the driver software API
require possible recompilation of your application.</FONT>
</UL>
<H3><A NAME="SQL">SQL</A></H3>
<P>
Although not a &quot;layer&quot; of access to databases like ODBC
or native drivers, the Structured Query Language, or SQL, provides
a standard method of querying data from different data sources.
<P>
SQL, usually pronounced like the word &quot;sequel,&quot; was
adopted as an industry standard in 1986. SQL was completely overhauled
in 1992 and the new language was called SQL92, or SQL2. Work is
currently in progress to produce the next generation, SQL3. The
following is a short list of SQL commands and their meanings:
<UL>
<LI><TT>COMMIT</TT> - Most RDBMS's
work with units called <I>transactions.</I> A transaction can
be made up of multiple actions. The <TT>COMMIT</TT>
command instructs the database to record all the actions that
you have performed up until this point, and to reset the transaction.
When you <TT>COMMIT</TT><I>,</I> the
data is available to everyone who has access. Before the <TT>COMMIT</TT>
occurs, however, only people with access to your schema can see
the changes.
<LI><TT>INSERT</TT> - Instructs the
database to insert rows into a table.
<LI><TT>DELETE</TT> - Instructs the
database to delete rows from a table.
<LI><TT>ROLLBACK</TT> - The <TT>ROLLBACK</TT>
command is used instead of a <TT>COMMIT</TT>.
This instructs the database to remove any changes you've made
all the way back to the last <TT>COMMIT</TT>.
This is very useful for long, multiple-table updates. For example,
let's say you need to add 10 rows to a table. After inserting
9 rows, the 10<FONT SIZE=1>th</FONT> insert fails. The first 9
rows must be removed for the data to retain its integrity. Using
the <TT>ROLLBACK</TT> command, the
9 inserted rows will not be recorded.
<LI><TT>SELECT</TT> - Instructs the
database to return rows from a table.
<LI><TT>UPDATE</TT> - Instructs the
database to modify rows in a table.
</UL>
<P>
We'll go over the syntax of some of the more commonly SQL commands.
Just a reminder, though, that this is by no means an exhaustive
SQL syntax review. Dozens of books about SQL have been published.
The command syntax that follows is general ANSI SQL and might
not be correct for your RDBMS. Please check your documentation
if there is any doubt.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
In the syntax examples that follow, any parameter that is enclosed in square brackets ([]) is an optional parameter and may be left out.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>The <TT>WHERE</TT> Clause</H4>
<P>
Most SQL commands act on all the rows of a table at one time.
These global actions can be restricted to a limited number of
rows by the use of a <TT>WHERE</TT><I>
</I>clause. The <TT>WHERE</TT> clause
allows you to specify criteria that is used to limit the number
of rows that an action is performed.
<P>
The general syntax for a <TT>WHERE</TT>
clause is as follows:
<BLOCKQUOTE>
<TT>COMMAND arguments WHERE [[[schema.]table.]column
OPERATOR value] [AND|OR [[[schema.]table.]column OPERATOR value]]</TT>
</BLOCKQUOTE>
<P>
where
<BLOCKQUOTE>
<TT><I>arguments</FONT></I></TT> are the
arguments specific to the <TT>COMMAND</TT><B>.</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>schema</FONT></I></TT><I> </I>is the
area where the table exists.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>table</FONT></I></TT><I> </I>is the
table where the column lives.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>column</FONT></I></TT><I> </I>is the
column name to compare with <TT><I>value</FONT></I></TT><I>.</I>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>value</FONT></I></TT> is a literal
or column name to compare with <TT><I>column</FONT></I></TT><I>.</I>
</BLOCKQUOTE>
<P>
Multiple operations may be checked in the <TT>WHERE</TT>
clause. These can be linked with either the <TT>AND</TT>
or <TT>OR</TT> keyword.
<P>
The <TT>OPERATOR</TT> might be many
things depending on the RDBMS in use. Table 6.1 shows the <TT>OPERATOR</TT>s
that are available in most RDBMSs.<BR>
<P>
<CENTER><B>Table 6.1. Operators.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=78><I>Operator</I></TD><TD WIDTH=222><I>Meaning</I>
</TD><TD WIDTH=282><I>Example</I></TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT>&lt;</TT></TD>
<TD WIDTH=222>Less than</TD><TD WIDTH=282><TT>emp_id &lt; 10</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT>&gt;</TT></TD>
<TD WIDTH=222>Greater than</TD><TD WIDTH=282><TT>salary &gt; 50000</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT>=</TT></TD><TD WIDTH=222>Equal to
</TD><TD WIDTH=282><TT>can_be_paged = 'Y'</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT>&lt;=</TT></TD>
<TD WIDTH=222>Less than or equal to</TD><TD WIDTH=282><TT>user_count &lt;= 128</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT>&gt;=</TT></TD>
<TD WIDTH=222>Greater than or equal to</TD><TD WIDTH=282><TT>user_count &gt;= 0</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT>&lt;&gt;</TT>
</TD><TD WIDTH=222>Not equal to</TD><TD WIDTH=282><TT>lost_shovels &lt;&gt; 5</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT>is</TT></TD>
<TD WIDTH=222>For checking NULL values</TD><TD WIDTH=282><TT>name_suffix is NULL</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT>not</TT></TD>
<TD WIDTH=222>For negating an operator</TD><TD WIDTH=282><TT>name_suffix is not NULL</TT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=78><TT>like</TT></TD>
<TD WIDTH=222>Allows for the use of wildcards</TD><TD WIDTH=282><TT>first_name like '%MUNSTER%'</TT>
</TD></TR>
</TABLE></CENTER>
<P>
<P>
Please note that the <TT>WHERE</TT>
clause cannot be used alone. It must be appended to a <TT>DELETE</TT>,
<TT>SELECT</TT>, or <TT>UPDATE</TT>
command.
<H4><TT>INSERT</TT></H4>
<P>
The <TT>INSERT</TT> statement allows
you to create a new row in a table.
<P>
The syntax for an <TT>INSERT</TT>
statement is as follows:
<BLOCKQUOTE>
<TT>INSERT INTO [<I>schema</I>.]<I>table
</I>[(<I>column</I>[,<I>column</I>&#133;])] VALUES (<I>value</I>[,<I>value</I>])</TT>
</BLOCKQUOTE>
<P>
Where:
<BLOCKQUOTE>
<TT><I>schema</FONT></I></TT><I> </I>is where
the table exists
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>table</FONT></I></TT><I> </I>is the
target table
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>column</FONT></I></TT><I> </I>is the
column name(s) of the data you wish to insert
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>value</FONT></I></TT><I> </I>is the
value(s) that you wish to insert
</BLOCKQUOTE>
<H5>Examples</H5>
<BLOCKQUOTE>
<TT>INSERT INTO EMPLOYEE ( EMP_ID, LAST_NAME
) values ( 1, 'Munster' )<BR>
INSERT INTO ADDRESS ( EMP_ID, STREET_ADDRESS ) VALUES <BR>
</TT><FONT FACE="ZapfDingbats">&#165;</FONT><TT>
( 1, '1313 Mockingbird Lane' )</TT>
</BLOCKQUOTE>
<H4><TT>DELETE</TT></H4>
<P>
The <TT>DELETE</TT> statement allows
you to remove a row or rows from a table.
<P>
The syntax for a <TT>DELETE</TT> statement
is as follows:
<BLOCKQUOTE>
<TT>DELETE FROM [<I>schema</I>.]<I>table
</I>[WHERE <I>expression</I>]</TT>
</BLOCKQUOTE>
<P>
where
<BLOCKQUOTE>
<TT><I>schema</FONT></I></TT><I> </I>is where
the table exists
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>table</FONT></I></TT><I> </I>is the
target table
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>expression</FONT></I></TT> is an expression
as outlined in the preceding <TT>WHERE</TT>
clause section<BR>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Without a <TT>WHERE</TT> clause, the <TT>DELETE</TT> command removes all rows from a table.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H5>Examples</H5>
<BLOCKQUOTE>
<TT>DELETE FROM EMPLOYEE WHERE EMP_ID = 1
<BR>
DELETE FROM ADDRESS WHERE CITY LIKE 'chICAG%'</TT>
</BLOCKQUOTE>
<H4><TT>SELECT</TT></H4>
<P>
The <TT>SELECT</TT> statement allows
you to retrieve a row or rows from a table.
<P>
The syntax for a <TT>SELECT</TT> statement
is as follows:
<BLOCKQUOTE>
<TT>SELECT [[schema.]table.]column [,[[schema.]table.]column]
FROM [schema.]table [WHERE expression]</TT>
</BLOCKQUOTE>
<P>
where
<BLOCKQUOTE>
<TT><I>schema</FONT></I></TT><I> </I>is where
the table exists
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>table</FONT></I></TT><I> </I>is the
target table
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>column</FONT></I></TT><I> </I>is column
or columns to retrieve. You can use the asterisk ('*') to indicate
that the <TT>SELECT</TT> statement
should return all columns.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>expression</FONT></I></TT> is an expression
as outlined in the preceding <TT>WHERE</TT>
clause section
</BLOCKQUOTE>
<H5>Examples</H5>
<BLOCKQUOTE>
<TT>SELECT EMP_ID FROM EMPLOYEE<BR>
SELECT LAST_NAME, FIRST_NAME, MID_NAME FROM EMPLOYEE WHERE EMP_ID
= 666</TT>
</BLOCKQUOTE>
<H4><TT>UPDATE</TT></H4>
<P>
The <TT>UPDATE</TT> statement allows
you to modify a column or columns in one or more rows in a table.
<P>
The syntax for an <TT>UPDATE</TT>
statement is as follows:
<BLOCKQUOTE>
<TT>UPDATE [schema.]table SET [[schema.]table.]column
= value [,[[schema.]table.]column = value] [WHERE expression]</TT>
</BLOCKQUOTE>
<P>
where
<BLOCKQUOTE>
<TT><I>schema</FONT></I></TT><I> </I>is where
the table exists
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>table</FONT></I></TT><I> </I>is the
target table
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>column</FONT></I></TT><I> </I>is column
or columns to modify
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>expression</FONT></I></TT> is an expression
as outlined in the preceding <TT>WHERE</TT>
clause section
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>value</FONT></I></TT> is the new value
that the column should hold
</BLOCKQUOTE>
<H5>Examples</H5>
<BLOCKQUOTE>
<TT>UPDATE EMPLOYEE SET SALARY = SALARY +
( SALARY * .05 )<BR>
UPDATE ADDRESS SET ZIP_CODE = 60805 WHERE ZIP_CODE = 60642</TT>
</BLOCKQUOTE>
<H4>Advantages</H4>
<UL>
<LI><FONT COLOR=#000000>Simple English Syntax - You do not need
to know how to program to use SQL.</FONT>
<LI><FONT COLOR=#000000>Standardized - Usually, SQL accesses one
RDBMS, which can be used to access another RDBMS.</FONT>
</UL>
<H4>Disadvantages</H4>
<UL>
<LI><FONT COLOR=#000000>Wordy - SQL queries can become quite complex
and lengthy. Because SQL syntax uses regular English words, the
results can get somewhat monotonous.</FONT>
</UL>
<P>
SQL uses simple English words to instruct the database to perform
certain actions. SQL can be used with almost every major database
product available today. In addition, you can even use SQL syntax
to interact with a data source using ODBC!<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Here are some useful SQL Web sites:</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>Ask the SQL Pro:</FONT><TT> <A HREF="http://www.inquiry.com/techtips/thesqlpro/">http://www.inquiry.com/techtips/thesqlpro/</A></TT></FONT>
<LI><FONT COLOR=#000000>SQL Reference Page: </FONT><TT><A HREF="http://www.contrib.andrew.cmu.edu/~shadow/sql.html">http://www.contrib.andrew.cmu.edu/~shadow/sql.html</A></TT>
</UL>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="DatabasesandJava"><FONT SIZE=5 COLOR=#FF0000>Databases
and Java</FONT></A></H2>
<P>
Java is a platform independent programming language. In order
to access a database with Java you need to use a platform-independent
method. This is easy to accomplish, but might be quite cumbersome.
Usually, you'd have to create a server program that speaks to
the database of your choice and then your Java programs would
need to interact with your server.
<P>
If you want to abandon your platform independence, you can always
write native code to access your data. This would involve C or
C++ programming in UNIX or Windows 95/NT. Without the proper tools,
this can be a real headache.
<P>
So what does a programmer do when he needs data access from Java?
There are several ways to get data to your application. These
database access services include:
<UL>
<LI><FONT COLOR=#000000>Access via Web Server. The client requests
data and a CGI program talks to the database and returns the formatted
data to the Java program.</FONT>
<LI><FONT COLOR=#000000>Proprietary Server. The proprietary server
knows how to talk to databases. Your Java program makes requests
of this server, which in turn fulfills your requests.</FONT>
<LI><FONT COLOR=#000000>Network Access. Network access, through
the use of a class library, interacts with networked database
servers. These database servers are capable of responding to direct
queries from your Java program.</FONT>
<LI><FONT COLOR=#000000>Direct Access. A direct access is also
a class library that allows you to manipulate local databases.
Those are databases that are on the same machine your Java program
is running on.</FONT>
</UL>
<P>
The latest arrival onto the database scene is Sun Microsystem's
own Java Database Connectivity, or JDBC. JDBC is big news and
I'll get into that in a bit. But for now, let's take a closer
look at these other data access options.
<H3><A NAME="AccessviaWebServer">Access via Web Server</A></H3>
<P>
To access data via CGI scripts, the applet or application requests
data from an HTTP server just like any other Web document. However,
encoded in the CGI parameters is the database query that is to
be executed. Once the HTTP server receives the request, it passes
the parameters to the proper CGI program. The CGI program then
performs the database query on the program's behalf.
<P>
Because this is a three step process, response time is not fantastic.
But if the HTTP server is on the same machine as the application
and the database, response times are better. Figure 6.6 illustrates
a typical database access method via a Web server.
<P>
<A HREF="f6-6.gif" ><B>Figure 6.6 : </B><I>Database requests through HTTP and CGI.</I></A>
<P>
This option is useful for specific types of databases that cannot
be moved or can only live on certain types of environments.
<P>
Of note is Oracle's WebServer product, which can access Oracle
databases directly without going through a CGI program. Using
the WebServer, you can embed database requests right in your HTML
pages. Once these pages are received by the Oracle WebServer,
they are parsed, and recreated on-the-fly. The recreated pages
include, for instance, data from an Oracle database. This seamless
integration removes the need for a separate CGI program to access
data. This is a lot faster and is a complete database solution.
<H4>Web Server Database Solutions</H4>
<P>
Here are some CGI/HTTP database access solutions available for
Java:
<UL>
<LI><FONT COLOR=#000000>Bulletproof's JAGG - </FONT><TT><A HREF="http://www.bulletproof.com">http://www.bulletproof.com</A></TT>
<LI><FONT COLOR=#000000>Oracle WebServer 2.0 - </FONT><TT><A HREF="http://www.oracle.com">http://www.oracle.com</A></TT>
</UL>
<H3><A NAME="AccessviaProprietaryServer">Access via Proprietary
Server</A></H3>
<P>
Another Java database option is going with a proprietary server.
In this access mode, a non-Web server listens for service requests.
Once one is received, it will perform a database query on the
client's behalf and return the results to the client.
<H4>Proprietary Server Access Solutions</H4>
<P>
Here are some proprietary server database access solutions available
for Java:
<UL>
<LI><FONT COLOR=#000000>dbKona - </FONT><TT><A HREF="http://www.weblogic.com/">http://www.weblogic.com/</A></TT>
<LI><FONT COLOR=#000000>javaSQL - </FONT><TT><A HREF="http://www.patriot.net/users/anil/java/javaSQL/">http://www.patriot.net/users/anil/java/javaSQL/</A></TT>
<LI><FONT COLOR=#000000>Jade - </FONT><TT><A HREF="http://hktrade.com/clients/kwan/">http://hktrade.com/clients/kwan/</A></TT>
</UL>
<H3><A NAME="NetworkAccess">Network Access</A></H3>
<P>
Network access database solutions for Java are the best. These
provide platform independence because the actual network connection
and requesting is done in Java.
<H4>Network Access Solutions</H4>
<P>
Here are some network database access solutions available for
Java:
<UL>
<LI><FONT COLOR=#000000>Ask Joe - </FONT><TT><A HREF="http://www.imsweb.com/AskJoe.html">http://www.imsweb.com/AskJoe.html</A></TT>
<LI><FONT COLOR=#000000>MsqlJava - </FONT><TT><A HREF="http://mama.minmet.uq.oz.au/msqljava/">http://mama.minmet.uq.oz.au/msqljava/</A></TT>
<LI><FONT COLOR=#000000>OCI/Java Gateway - </FONT><TT><A HREF="http://multiserver.kuai.se/">http://multiserver.kuai.se/</A></TT>
</UL>
<H3><A NAME="DirectAccess">Direct Access</A></H3>
<P>
Direct access is probably the fastest method of database access,
however it is the least portable. You could possibly lose any
platform independence you've gained by using Java in the first
place. However, if you don't care about independence, this method
of database access is by far the best performance-wise.
<H4>Direct Access Solutions</H4>
<P>
Here are some direct database access solutions available for Java:
<UL>
<LI><FONT COLOR=#000000>JavaBase - </FONT><TT><A HREF="http://sio.ucsd.edu/~gabe/">http://sio.ucsd.edu/~gabe/</A></TT>
<LI><FONT COLOR=#000000>OraJava - </FONT><TT><A HREF="http://users.aimnet.com/~omd/OraJava.html">http://users.aimnet.com/~omd/OraJava.html</A></TT>
<LI><FONT COLOR=#000000>SybJava - </FONT><TT><A HREF="http://users.aimnet.com/~omd/SybJava.html">http://users.aimnet.com/~omd/SybJava.html</A></TT>
</UL>
<H3><A NAME="JDBC">JDBC</A></H3>
<P>
In an effort to set an independent database standard API for Java,
Sun Microsystems developed Java Database Connectivity, or JDBC.
JDBC offers a generic SQL database access mechanism that provides
a consistent interface to a variety of RDBMSs. This consistent
interface is achieved through the use of &quot;plug-in&quot; database
connectivity modules, or <I>drivers</I>. If a database vendor
wishes to have JDBC support, he or she must provide the driver
for each platform that the database and Java run on.
<P>
To gain a wider acceptance of JDBC, Sun based JDBC's framework
on ODBC. As you discovered earlier in this chapter, ODBC has widespread
support on a variety of platforms. Basing JDBC on ODBC will allow
vendors to bring JDBC drivers to market much faster than developing
a completely new connectivity solution.
<P>
JDBC was announced in March of 1996. It was released for a 90
day public review that ended June 8, 1996. As a result of user
input, the final JDBC v1.0 specification was released soon after.
<P>
The remainder of this section will cover enough information about
JDBC for you to know what it is about and how to use it effectively.
This is by no means a complete overview of JDBC. That would fill
an entire book.
<H3><A NAME="JDBCGoals">JDBC Goals</A></H3>
<P>
Few software packages are designed without goals in mind. JDBC
is one that, because of its many goals, drove the development
of the API. These goals, in conjunction with early reviewer feedback,
have finalized the JDBC class library into a solid framework for
building database applications in Java.
<P>
The goals that were set for JDBC are important. They will give
you some insight as to why certain classes and functionalities
behave the way they do. The eight design goals for JDBC are as
follows:
<OL>
<LI><I>SQL Level API<BR>
</I>The designers felt that their main goal was to define a SQL
interface for Java. Although not the lowest database interface
level possible, it is at a low enough level for higher-level tools
and APIs to be created. Conversely, it is at a high enough level
for application programmers to use it confidently. Attaining this
goal allows for future tool vendors to &quot;generate&quot; JDBC
code and to hide many of JDBC's complexities from the end user.
<LI><I>SQL Conformance<BR>
</I>SQL syntax varies as you move from database vendor to database
vendor. In an effort to support a wide variety of vendors, JDBC
will allow any query statement to be passed through it to the
underlying database driver. This allows the connectivity module
to handle non-standard functionality in a manner that is suitable
for its users.
<LI><I>JDBC must be implementable on top of common database interfaces
<BR>
</I>The JDBC SQL API must &quot;sit&quot; on top of other common
SQL level APIs. This goal allows JDBC to use existing ODBC level
drivers by the use of a software interface. This interface would
translate JDBC calls to ODBC and vice versa.
<LI><I>Provide a Java interface that is consistent with the rest
of the Java system<BR>
</I>Because of Java's acceptance in the user community thus far,
the designers feel that they should not stray from the current
design of the core Java system.
<LI><I>Keep it simple<BR>
</I>This goal probably appears in all software design goal listings.
JDBC is no exception. Sun felt that the design of JDBC should
be very simple, allowing for only one method of completing a task
per mechanism. Allowing duplicate functionality only serves to
confuse the users of the API.
<LI><I>Use strong, static typing wherever possible<BR>
</I>Strong typing allows for more error checking to be done at
compile time; also, less errors appear at runtime.
<LI><I>Keep the common cases simple<BR>
</I>Because more often than not, the usual SQL calls used by the
programmer are simple <TT>SELECT</TT>'s,
<TT>INSERT</TT>'s, <TT>DELETE</TT>'s
and <TT>UPDATE</TT>'s, these queries
should be simple to perform with JDBC. However, more complex SQL
statements should also be possible.
<LI><I>Use multiple methods to express multiple functionality
<BR>
</I>There are two schools of thought on functionality. One is
to provide a single entry point into an API. The programmer must
then use a variety of control parameters to achieve the desired
result. The second is to provide multiple points of entry into
the API. This second school of thought was the goal of JDBC. This
goal is similar to the way that the Java system was designed.
</OL>
<H3><A NAME="JDBCOverview">JDBC Overview</A></H3>
<P>
JDBC is divided into two parts: The JDBC API, and the JDBC Driver
API. The JDBC API is the programmer's API. This half is where
you will spend most of your time coding. The JDBC Driver API is
for driver writers and database vendors to create connectivity
modules for their database software. Figure 6.7 shows the complete
JDBC API class hierarchy.
<P>
<A HREF="f6-7.gif" ><B>Figure 6.7 : </B><I>The JDBC class hierarchy.</I></A>
<P>
The JDBC API consists of many classes and interfaces. This structure
makes the API a semi-abstract set of functionality. In order for
JDBC to be of any use, a database vendor must fill in the blanks.
<P>
Four of these blanks will be the center of any database programming
that you do with the JDBC API. These four classes are
<UL>
<LI><TT>DriverManager</TT> - This
class is responsible for managing all the available database drivers.
The <TT>DriverManager</TT> class retrieves
the list of available classes for drivers from the system property
called <TT>jdbc.drivers</TT>. Each
of the found drivers is loaded.
<LI><TT>Connection</TT> - This interface
defines a session between an application and a database.
<LI><TT>Statement</TT> - This interface
is used to issue a single SQL statement through a <TT>Connection</TT>.
It owns only one <TT>ResultSet</TT>.
Therefore, multiple concurrent SQL statements must be done through
multiple <TT>Statement</TT>s. Issuing
a SQL statement while processing the <TT>ResultSet</TT>
of a previous <TT>Statement</TT> will
result in the overwriting of the results.
<LI><TT>ResultSet</TT> - This interface
provides access to the data returned from the execution of a <TT>Statement</TT>.
</UL>
<P>
This short overview is only a small portion of the JDBC API. There
is support for other database features such as cursors and stored
procedures.
<H3><A NAME="JDBCVendorSupport">JDBC Vendor Support</A></H3>
<P>
Many database vendors have already pledged support of JDBC. The
following is a list of vendors who plan on supporting JDBC. This
list is from the JDBC Web site as of June, 1996.
<UL>
<LI><FONT COLOR=#000000>Borland International Inc. - </FONT><TT><A HREF="http://www.borland.com">http://www.borland.com</A></TT>
<LI><FONT COLOR=#000000>Bulletproof - </FONT><TT><A HREF="http://www.bulletproof.com">http://www.bulletproof.com</A></TT>
<LI><FONT COLOR=#000000>Cyber SQL Corporation - </FONT><TT><A HREF="http://www.cybersql.com">http://www.cybersql.com</A></TT>
<LI><FONT COLOR=#000000>Dharma Systems Inc. - </FONT><TT><A HREF="http://www.dharmas.com">http://www.dharmas.com</A></TT>
<LI><FONT COLOR=#000000>Gupta Corporation - </FONT><TT><A HREF="http://www.gupta.com">http://www.gupta.com</A></TT>
<LI><FONT COLOR=#000000>IBM's Database 2 (DB2) - </FONT><TT><A HREF="http://www.software.ibm.com/data/db2/index.html">http://www.software.ibm.com/data/db2/index.html</A></TT>
<LI><FONT COLOR=#000000>Imaginary (mSQL) - </FONT><TT><A HREF="http://www.imaginary.com/~borg/Java/">http://www.imaginary.com/~borg/Java/</A></TT>
<LI><FONT COLOR=#000000>Informix Software Inc. - </FONT><TT><A HREF="http://www.informix.com">http://www.informix.com</A></TT>
<LI><FONT COLOR=#000000>Intersoft - </FONT><TT><A HREF="http://www.inter-soft.com/eng/products/system/essentia/essentia.html">http://www.inter-soft.com/eng/products/system/essentia/essentia.html</A></TT>
<LI><FONT COLOR=#000000>Intersolv - </FONT><TT><A HREF="http://www.intersolv.com">http://www.intersolv.com</A></TT>
<LI><FONT COLOR=#000000>Object Design Inc. - </FONT><TT><A HREF="http://www.odi.com">http://www.odi.com</A></TT>
<LI><FONT COLOR=#000000>Open Horizon - </FONT><TT><A HREF="http://www.openhorizon.com">http://www.openhorizon.com</A></TT>
<LI><FONT COLOR=#000000>OpenLink Software - </FONT><TT><A HREF="http://www.openlink.co.uk"><A HREF="http://www.openlink.co.uk">http://www.openlink.co.uk</A></A></TT>
<LI><FONT COLOR=#000000>Oracle Corporation - </FONT><TT><A HREF="http://www.oracle.com">http://www.oracle.com</A></TT>
<LI><FONT COLOR=#000000>Persistence Software - </FONT><TT><A HREF="http://www.persistence.com">http://www.persistence.com</A></TT>
<LI><FONT COLOR=#000000>Presence Information Design - </FONT><TT><A HREF="http://cloud9.presence.com/pbj/">http://cloud9.presence.com/pbj/</A></TT>
<LI><FONT COLOR=#000000>PRO-C Inc. - </FONT><TT><A HREF="http://www.pro-c.com">http://www.pro-c.com</A></TT>
<LI><FONT COLOR=#000000>RogueWave Software Inc. - </FONT><TT><A HREF="http://www.roguewave.com">http://www.roguewave.com</A></TT>
<LI><FONT COLOR=#000000>SAS Institute Inc. (tm) - </FONT><TT><A HREF="http://www.sas.com">http://www.sas.com</A></TT>
<LI><FONT COLOR=#000000>SCO - </FONT><TT><A HREF="http://www.vision.sco.com/brochure/sqlretriever.html">http://www.vision.sco.com/brochure/sqlretriever.html</A></TT>
<LI><FONT COLOR=#000000>Sybase Inc. - </FONT><TT><A HREF="http://www.sybase.com"><A HREF="http://www.sybase.com">http://www.sybase.com</A></A></TT>
<LI><FONT COLOR=#000000>Symantec - </FONT><TT><A HREF="http://www.symantec.com/cafe">http://www.symantec.com/cafe</A></TT>
<LI><FONT COLOR=#000000>Thunderstone - </FONT><TT><A HREF="http://www.thundestone.com">http://www.thundestone.com</A></TT>
<LI><FONT COLOR=#000000>Visigenic Software Inc. - </FONT><TT><A HREF="http://www.visigenic.com">http://www.visigenic.com</A></TT>
<LI><FONT COLOR=#000000>WebLogic Inc. - </FONT><TT><A HREF="http://www.weblogic.com">http://www.weblogic.com</A></TT>
<LI><FONT COLOR=#000000>Working Set, Inc. - </FONT><TT><A HREF="http://dataramp.com">http://dataramp.com</A></TT>
<LI><FONT COLOR=#000000>XDB Systems, Inc. - </FONT><TT><A HREF="http://www.xdb.com">http://www.xdb.com</A></TT>
</UL>
<P>
Most big database vendors are on this list. If your database vendor
is not on this list, fear not. There will be a JDBC-ODBC bridge
driver from Sun. If your database vendor has ODBC support, then
you will be in the clear.
<P>
For more information on JDBC, please visit the JDBC Web site at
JavaSoft: <TT><A HREF="http://www.javasoft.com">http://www.javasoft.com</A></TT>.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter was an overview of databases and database connectivity
options that you have at your disposal. I discussed the database
terminology that you will be using in the book for the first time.
You are now familiar with rows and columns of data. The more you
use these terms, the more comfortable you will be using them (it
took me nearly 6 months!).
<P>
After the terminology discussion, I talked about the differences
between local and remote databases. This led you right to a discussion
about the advantages and disadvantages of various database access
methods.
<P>
Finally, I ended this chapter discussing Java Database Connectivity,
or JDBC. JDBC is the hot, new, up-and-coming database connectivity
tool for Java.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch5.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch7.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
