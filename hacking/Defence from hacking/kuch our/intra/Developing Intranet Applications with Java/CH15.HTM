<HTML>

<HEAD>
   <TITLE>Chapter 15 --Conference Room Scheduling</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 15</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Conference Room Scheduling</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>



<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#ApplicationDesign" >Application Design</A>
<LI><A HREF="#DatabaseDesign" >Database Design</A>
<LI><A HREF="#Implementation" >Implementation</A>
<UL>
<LI><A HREF="#BuildingtheUserInterface" >Building the User Interface</A>
<LI><A HREF="#InteractingwiththeUser" >Interacting with the User</A>
<LI><A HREF="#DatabaseAccess" >Database Access</A>
<LI><A HREF="#ReadingtheExistingSchedule" >Reading the Existing Schedule</A>
<LI><A HREF="#StoringYourSchedule" >Storing Your Schedule</A>
<LI><A HREF="#GeneratingtheSQL" >Generating the SQL</A>
</UL>
<LI><A HREF="#ProgrammingConsiderations" >Programming Considerations</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
In the last chapter, &quot;Human Resources: Benefits Maintenance,&quot;
you created a very simple intranet application that allows employees
to modify some of the parameters that define their company benefits.
Although a useful application, it was really only a snack. This
chapter, however, is an entire four-course meal. In this chapter
you will design and build an application that any company would
kill for: Conference Room Scheduling.
<P>
Most companies these days have more than one conference room.
It's when you need one most that they are always full; if you'd
only gotten in there five minutes sooner. This application will
hopefully let you and your users schedule conference room usage,
alleviating any possible violent outbreaks.
<P>
This chapter will cover the following topics in regards to the
Conference Room Scheduling application:
<UL>
<LI>Application Design. You'll go over the general design of the
application. This includes functionality and user interface considerations.
<LI>Database Design. This section will cover the database requirements
for this application. Here you'll examine the data model used
to support the application design.
<LI>Implementation. This section will cover how the application
and database design are implemented.
<LI>Programming Considerations. In this section you'll recap the
implementation and summarize any difficult programming situations
that have arisen.
</UL>
<P>
This four-step format will be used throughout all of the sample
application chapters. Hopefully, it will provide you with valuable
insight and ideas for creating your own intranet applications.
<H2><A NAME="ApplicationDesign"><FONT SIZE=5 COLOR=#FF0000>Application
Design</FONT></A></H2>
<P>
This application needs to be visually stunning (read cool-looking)
and functional at the same time. It should be simple to operate
and be configurable. Remember: you want people to use it. Because
scheduling a conference room is a two-step process, you need to
convey that to the user visually. Therefore, I've chosen to implement
this application using a tab panel.
<P>
The program has two portions. The first portion allows the user
to select the date and to schedule the conference room for that
date. The second portion allows the user to select the start and
end times for the scheduling. To present this information in a
fashion that conveys the idea that the first step must be completed
before the second step can be done, we will use the <TT>JifTabPanel</TT>
class.
<P>
This serves a couple of useful purposes. The first being that
the user cannot mistakenly select incorrect information regarding
the date and the room while scheduling the time. Secondly, the
first step is on pane one, and the second on pane two. This means
the order of completion is visually represented.
<P>
This application is not like the last two applications we designed.
It is a very modal program. The last maintenance programs were
deemed semi-modeless because they did not force the user into
an operation mode. This application is more modal because the
user must select a date and a conference room before scheduling
the time.
<P>
Figure 15.1 is the proposed user interface for the Conference
Room Scheduling program.
<P>
<A HREF="f15-1.gif" ><B>Figure 15.1 : </B><I>The Conference Room Scheduling user interface.</I></A>
<P>
The first pane is divided into two halves. The first half represents
the date with a calendar. The second half lists the conference
rooms that are available.
<P>
Because the first figure doesn't show the second pane, Figure
15.2 shows the second pane of your application, which you get
to by clicking on the &quot;Schedule&quot; tab.
<P>
<A HREF="f15-2.gif" ><B>Figure 15.2 : </B><I>The dark side of conference room scheduling.</I></A>
<P>
The second pane presents the user with two lists of times. The
left side is the start time of the scheduling and the right side
is the end time of the scheduling. Along the bottom is a space
for comments. These can include anything the user wants to include,
usually their name.
<P>
Only after all the necessary information has been selected (date,
room, start and end times), and a comment has been entered, the
Save button will become enabled. The user may then save this schedule.
The application will inform the user of any conflicts. Otherwise,
the records are saved, and the list boxes are reloaded to show
their true state. Upon successful saving, the message &quot;Record
saved&#133;&quot; is shown in the status bar of the application.
<P>
The application will not allow the user to select time slots that
are taken. In addition, attempts to select an end time slot that
is before the start time slot will be thwarted.
<P>
Figure 15.3 shows what the schedule looks like after the user
has saved his choices.
<P>
<A HREF="f15-3.gif" ><B>Figure 15.3 : </B><I>The saved schedule is redrawn</I></A><I>.</I>
<P>
This application requires information from two tables. The first
table being the conference room table, the second is the schedule
table. This presents you with a parent-child relationship similar
to the one presented in <A HREF="ch14.htm" >Chapter 14</A>, &quot;Human
Resources: Benefits Maintenance.&quot;
<H2><A NAME="DatabaseDesign"><FONT SIZE=5 COLOR=#FF0000>Database
Design</FONT></A></H2>
<P>
This application will be responsible for manipulating schedule
records. These records simply represent a time slot range on a
certain day for a particular room. This simplistic design gives
you a ton of flexibility in your application design. Each stored
row will schedule one room for one period of time. Plus, your
SQL to retrieve and update the table is simple. The table you're
going to use in this sample application is called the room schedule
table.
<P>
In addition to this child table, you want to make your application
configurable. Administrative users should be able to add new conference
rooms to the scheduler program as they need to. To accomplish
this, you need a table to hold conference rooms as well.
<P>
The design of the schedule table is interesting because no times
are actually stored in it. You use the concept of <I>time slots</I>.
Not unlike network television programming, you schedule rooms
for use during these slots. The usage of the slots is entirely
up to the table user. However, your application will have predefined
slot numbers. You are going to use 0 through 47 with each representing
a one-half-hour slot during a twenty-four hour period.
<P>
Table 15.1 shows the columns you'll need to store your conference
room information.<BR>
<P>
<CENTER><B>Table 15.1. The layout of the conference room table.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=117><I>Description</I></TD><TD WIDTH=115><I>Column Name</I>
</TD><TD WIDTH=97><I>Type</I></TD><TD WIDTH=108><CENTER><I>Can Be Null?</I></CENTER>
</TD><TD WIDTH=69><CENTER><I>Default</I></CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=117>Room Number</TD><TD WIDTH=115>room_nbr</TD>
<TD WIDTH=97>number( 5 )</TD><TD WIDTH=108><CENTER>No</CENTER>
</TD><TD WIDTH=69><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=117>Floor Number</TD><TD WIDTH=115>floor_nbr</TD>
<TD WIDTH=97>number( 5 )</TD><TD WIDTH=108><CENTER>No</CENTER>
</TD><TD WIDTH=69><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=117>Description</TD><TD WIDTH=115>desc_text</TD>
<TD WIDTH=97>char( 80 )</TD><TD WIDTH=108><CENTER>Yes</CENTER>
</TD><TD WIDTH=69><CENTER>None</CENTER></TD></TR>
</TABLE></CENTER>
<P>
<P>
Table 15.2 shows the columns you'll need to store your schedule
information.<BR>
<P>
<CENTER><B>Table 15.2. The layout of the conference room schedule
table.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=117><I>Description</I></TD><TD WIDTH=115><I>Column Name</I>
</TD><TD WIDTH=97><I>Type</I></TD><TD WIDTH=108><CENTER><I>Can Be Null?</I></CENTER>
</TD><TD WIDTH=102><CENTER><I>Default</I></CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=117>Room Number</TD><TD WIDTH=115>room_nbr</TD>
<TD WIDTH=97>number( 5 )</TD><TD WIDTH=108><CENTER>No</CENTER>
</TD><TD WIDTH=102><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=117>Floor Number</TD><TD WIDTH=115>floor_nbr</TD>
<TD WIDTH=97>number( 5 )</TD><TD WIDTH=108><CENTER>No</CENTER>
</TD><TD WIDTH=102><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=117>Schedule Date</TD><TD WIDTH=115>sched_date</TD>
<TD WIDTH=97>date</TD><TD WIDTH=108><CENTER>No</CENTER></TD><TD WIDTH=102><CENTER>System Date</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=117>Starting Slot</TD><TD WIDTH=115>start_slot</TD>
<TD WIDTH=97>number( 5 )</TD><TD WIDTH=108><CENTER>No</CENTER>
</TD><TD WIDTH=102><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=117>Ending Slot</TD><TD WIDTH=115>end_slot</TD>
<TD WIDTH=97>number( 5 )</TD><TD WIDTH=108><CENTER>No</CENTER>
</TD><TD WIDTH=102><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=117>Comments</TD><TD WIDTH=115>comment_text</TD>
<TD WIDTH=97>char( 60 )</TD><TD WIDTH=108><CENTER>Yes</CENTER>
</TD><TD WIDTH=102><CENTER>None</CENTER></TD></TR>
</TABLE></CENTER>
<P>
<P>
Figure 15.4 shows the entity relationship diagram for your database
as it stands in this chapter. As you get deeper into your sample
applications, you'll see your entity relationship diagram grow
to encompass all the tables.
<P>
<A HREF="f15-4.gif" ><B>Figure 15.4 : </B><I>The entity relationship diagram including the employee tables.</I></A>
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=509><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=509>
<BLOCKQUOTE>
Entity relationship diagrams are discussed in <A HREF="ch13.htm" >Chapter 13</A>, &quot;Employee Files.&quot;
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
In addition to creating a table, you'll create a database synonym
for your table. This will allow everyone to access the table with
the same name, and not have to worry about the schema that the
table resides in.
<P>
Listing 15.1 is the SQL commands to create the conference room
table.
<HR>
<BLOCKQUOTE>
<B>Listing 15.1. The SQL used to create the conference room table.
<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>/*&nbsp;&nbsp;&nbsp;&nbsp;Create the
table */<BR>
create table conf_room_t<BR>
(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;room_nbr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(
5 ) not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;floor_nbr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(
5 ) not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;desc_text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(
80 )<BR>
);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create a primary key */<BR>
alter table conf_room_t<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add<BR>
&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primary key<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;room_nbr,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;floor_nbr
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Grant access for the table to the user
role */<BR>
grant select,insert,delete,update on conf_room_t to ia_user_r
;<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Drop any existing public synonym */
<BR>
drop public synonym conf_room ;<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create a public synonym for our table
*/<BR>
create public synonym conf_room for conf_room_t ;</TT>
</BLOCKQUOTE>
<HR>
<P>
This SQL is extremely similar to earlier table creation SQL presented
in the last two chapters. After the table is created, a primary
key is created. Access rights are granted to your demonstration
user and a public synonym is created.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=589><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=589>
<BLOCKQUOTE>
You must create the <TT>conf_room_t</TT> (Conference Room) table before you can create the <TT>conf_room_sched_t</TT> (Conference Room Schedule) table. Otherwise, the <TT>conf_room_sched_t</TT> SQL will fail!
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
However, you do have a child table to go with your parent above.
This table is the conference room schedule table, and called <TT>conf_room_sched_t</TT>
in the database. The SQL is shown in Listing 15.2.
<HR>
<BLOCKQUOTE>
<B>Listing 15.2. The SQL used to create the conference room schedule
table.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>/*&nbsp;&nbsp;&nbsp;&nbsp;Create the
table */<BR>
create table conf_room_sched_t<BR>
(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;room_nbr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(
5 ) not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;floor_nbr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(
5 ) not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;sched_date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date
default sysdate not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;start_slot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(
5 ) not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;end_slot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(
5 ) not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;comment_text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(
60 )<BR>
);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create a primary key */<BR>
alter table conf_room_sched_t<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add<BR>
&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primary key<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;room_nbr,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;floor_nbr,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sched_date,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_slot
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create a foreign key */<BR>
alter table conf_room_sched_t<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add<BR>
&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreign key<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;room_nbr,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;floor_nbr
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;references conf_room_t
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Grant access for the table to the user
role */<BR>
grant select,insert,delete,update on conf_room_sched_t to ia_user_r
;<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Drop any existing public synonym */
<BR>
drop public synonym conf_room_sched ;<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create a public synonym for our table
*/<BR>
create public synonym conf_room_sched for conf_room_sched_t ;</TT>
</BLOCKQUOTE>
<HR>
<P>
The first SQL clause creates the table <TT>conf_room_sched_t</TT>.
The second clause creates a four column primary key using the
<TT>room_nbr</TT>, <TT>floor_nbr</TT>,
<TT>sched_date</TT>, and <TT>start_slot</TT>
columns. Making this the primary key ensures that the values in
the column are unique across all rows.
<P>
The third SQL clause creates our foreign key. The foreign key
in this table is the <TT>room_nbr</TT>
and <TT>floor_nbr</TT> columns. These
columns point back to, or reference, the columns in the <TT>conf_room_t</TT>
table.
<P>
Lastly, the public synonym <TT>conf_room_sched</TT>
is created for the table <TT>conf_room_sched_t</TT>.
<P>
After you have created this table, you are ready to start building
your application.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=584><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=584>
<BLOCKQUOTE>
The SQL presented in this chapter is quite generic; however, it might not work on every database. This particular SQL has been tested with Oracle.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H2><A NAME="Implementation"><FONT SIZE=5 COLOR=#FF0000>Implementation</FONT></A>
</H2>
<P>
The rest of this chapter will discuss the implementation of the
Conference Room Scheduling program. The first thing we'll discuss
is the user interface and how it was created. Secondly, we'll
discuss the database access used in the program. Finally, we'll
go over some of the programming considerations that came up during
our application construction.
<H3><A NAME="BuildingtheUserInterface">Building the User Interface</A>
</H3>
<P>
The Conference Room Scheduling program is probably the most complex
program in this book. It utilizes some of the cooler user interface
classes discussed in <A HREF="ch11.htm" >Chapter 11</A>, &quot;User
Interface Classes.&quot; It doesn't really operate like the last
two applications you developed, though. This application does
use the <TT>SimpleDBJiflet</TT>, <TT>SimpleDBUI</TT>,
and <TT>DBRecord</TT> classes. However,
their use is unconventional compared to the last two applications.
<P>
This application requires two separate user interfaces to cooperate.
However, because they work more closely together than not, they
are managed by the same class. This class, <TT>RoomSchedulerUI</TT>,
extends the <TT>SimpleDBUI</TT> class
as discussed in <A HREF="ch12.htm" >Chapter 12</A>, &quot;Putting
Them All Together.&quot;
<P>
To construct the user interface for this application, you need
to make two separate panes. Each pane will be placed on its own
tab in a tab panel. I'll discuss each pane's construction separately.
<H4>Calendar and Room List Pane</H4>
<P>
This pane is the more complex of the two panes. To achieve your
interface design, you need to split the screen into four parts,
then split those parts. The easiest way to do this is with a <TT>BorderLayout</TT>
and a <TT>GridLayout</TT>.
<P>
The <TT>BorderLayout</TT> allows you
to place five objects in an orientation that mimics a compass.
This orientation is illustrated in Figure 15.5.
<P>
<A HREF="f15-5.gif" ><B>Figure 15.5 : </B><I>The </I>BorderLayout.</A>
<P>
The five placements you can have are North, South, East, West,
and Center. Each placement will grow to the largest size necessary.
For example, if you put something in the Center that is 500 pixels
high, the East and West sides will stretch to 500 pixels. The
North and South placements remain zero pixels high, therefore
hidden, until they contain something that has a height. For this
pane in the user interface, you will only use the North and Center
placements.
<P>
To create your first pane, you need to create a standard <TT>JifPanel</TT>
object. This object's layout is set to a new <TT>BorderLayout</TT>:
<BLOCKQUOTE>
<TT>//&nbsp;&nbsp;&nbsp;&nbsp;Create a date/room
selector...<BR>
JifPanel jp = new JifPanel();<BR>
jp.setLayout( new BorderLayout() );</TT>
</BLOCKQUOTE>
<P>
The next step is to place some things in this panel. To do this
you will create two additional <TT>JifPanel</TT>
objects: one for the North, and one for the Center.
<P>
The North one is your label panel. It displays the title for the
widgets that sit below it. If you refer back to Figure 15.1, you'll
see the panels I'm talking about. These are created and placed
into the North placement of your main panel:
<BLOCKQUOTE>
<TT>//&nbsp;&nbsp;&nbsp;&nbsp;Make a label
panel...<BR>
JifPanel jp3 = new JifPanel();<BR>
jp3.setLayout( new GridLayout( 1, 2, 10, 1 ) );<BR>
<BR>
JifPanel tp = new JifPanel( JifPanel.LOWERED );<BR>
tp.setFont( new Font( &quot;Helvetica&quot;, Font.BOLD, 12 ) );
<BR>
tp.setText( &quot;Dates&quot;, JifPanel.TEXT_RAISED, JifPanel.CENTER
);<BR>
jp3.add( tp );<BR>
<BR>
tp = new JifPanel( JifPanel.LOWERED );<BR>
tp.setFont( new Font( &quot;Helvetica&quot;, Font.BOLD, 12 ) );
<BR>
tp.setText( &quot;Conference Rooms&quot;, JifPanel.TEXT_RAISED,
JifPanel.CENTER );<BR>
jp3.add( tp );<BR>
jp.add( &quot;North&quot;, jp3 );</TT>
</BLOCKQUOTE>
<P>
What's interesting about this placement is that you use an embedded
<TT>GridLayout</TT> inside the panel
that is placed in the &quot;North&quot; of your main panel. This
layout is set at 1 row by 2 columns, with some additional spacing.
This guarantees you that your panel will be evenly halved. It
allows you to place two new label panels into the layout, and
they are automatically sized correctly for you.
<P>
Creating the Center panel is quite similar. However, instead of
using label panels, you are going to use actual user interface
components:
<BLOCKQUOTE>
<TT>JifPanel p2 = new JifPanel();<BR>
p2.setLayout( new GridLayout( 1, 2, 5, 0 ) );<BR>
<BR>
p2.add( new CalendarPanel() );<BR>
<BR>
roomList = new List();<BR>
roomList.setFont( new Font( &quot;Helvetica&quot;, Font.PLAIN,
14 ) );<BR>
roomList.addItem( &quot;No Database Connection&quot; );<BR>
p2.add( roomList );<BR>
<BR>
jp.add( &quot;Center&quot;, p2 );</TT>
</BLOCKQUOTE>
<P>
You use the same technique, only the spacing is a little different.
The calendar is placed in first, forcing it to the left, and the
<TT>List</TT> of rooms is placed in
second. This forces the list to be on the right. Finally it is
added to the Center of your main panel.
<P>
Figure 15.6 illustrates the complete layout of the date and room
selection pane.
<P>
<A HREF="f15-6.gif" ><B>Figure 15.6 : </B><I>The date and room pane layout.</I></A>
<H5>Loading the List of Rooms</H5>
<P>
You need to populate your list with all the available conference
rooms from your conference room table (<TT>conf_room_t</TT>).
To do this, you'll employ the same technique that was used in
the <TT>EmployeePicklist</TT> to load
it with data. Below is the source code for the <TT>loadRoomList()</TT>
method.
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
loadRoomList&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;loadRoomList()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Use
a reference alias...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DBConnector c
= getJiflet().getConnector();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Not
connected?<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( c == null
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String sql = &quot;select
* from conf_room&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Clear
out the old rooms...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearScreen();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( c.getStatement().execute( sql ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
rs = c.getStatement().getResultSet();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
row = 0;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
( rs.next() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConfRoomRecord
crr = new ConfRoomRecord( rs );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().setDBRecord(
crr );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveToScreen();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowMap.insertElementAt(
crr, row );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().errorLog(
&quot;Error during loading: &quot; + e.toString() );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
</TT>
</BLOCKQUOTE>
<P>
This issues an SQL query that returns all of the conference rooms
in your conference room table. Each returned row is stored into
a <TT>ConfRoomRecord</TT> object.
The stored row is then placed into a <TT>Vector</TT>
for later use.
<P>
You might notice that the room list is really never populated
here. That is because you've placed that code in the <TT>moveToScreen()</TT>
method of your user interface class. Only there is data moved
to the screen. But before it can move data to your list, you need
to tell the base class which <TT>DBRecord</TT>
to use. This is done with the call to <TT>setDBRecord()</TT>.
<P>
The <TT>moveToScreen()</TT> code is
quite simple:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
moveToScreen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;moveToScreen()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( getJiflet().getDBRecord()
== null )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConfRoomRecord
crr = ( ConfRoomRecord )getJiflet().getDBRecord();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roomList.addItem(
crr.desc_text );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
Here you simply retrieve the <TT>ConfRoomRecord</TT>
from your <TT>jiflet</TT> and add
the description to your room list.
<H4>Start and End Time Pane</H4>
<P>
This pane is constructed very much like the first pane. However,
there are some slight differences.
<P>
First, the Center panel is filled with two <TT>List</TT>s
instead of the one. But for this pane, and to add a little variety
to your program, I am using a <TT>FlowLayout</TT>
instead of the grid. It does basically the same thing and is easier
to set up.
<P>
Secondly, the comment field is placed in the South. This is where
the user types in the reason or comment regarding the schedule
of the conference room.
<P>
Figure 15.7 illustrates the layout of this pane.
<P>
<A HREF="f15-7.gif" ><B>Figure 15.7 : </B><I>The schedule times pane.</I></A>
<P>
The entire user interface construction code for this pane is presented
below:
<BLOCKQUOTE>
<TT>//&nbsp;&nbsp;&nbsp;&nbsp;Create a scheduler
panel...<BR>
jp = new JifPanel();<BR>
jp.setLayout( new BorderLayout() );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Make a label panel...<BR>
jp3 = new JifPanel();<BR>
jp3.setLayout( new GridLayout( 1, 2, 10, 1 ) );<BR>
<BR>
tp = new JifPanel( JifPanel.LOWERED );<BR>
tp.setFont( new Font( &quot;Helvetica&quot;, Font.BOLD, 12 ) );
<BR>
tp.setText( &quot;Start Time&quot;, JifPanel.TEXT_RAISED, JifPanel.CENTER
);<BR>
jp3.add( tp );<BR>
<BR>
tp = new JifPanel( JifPanel.LOWERED );<BR>
tp.setFont( new Font( &quot;Helvetica&quot;, Font.BOLD, 12 ) );
<BR>
tp.setText( &quot;End Time&quot;, JifPanel.TEXT_RAISED, JifPanel.CENTER
);<BR>
jp3.add( tp );<BR>
jp.add( &quot;North&quot;, jp3 );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Make the list panel...<BR>
JifPanel jp2 = new JifPanel();<BR>
jp2.setLayout( new FlowLayout() );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Create some time selectors...<BR>
startList = new List( 12, false );<BR>
endList = new List( 12, false );<BR>
<BR>
startList.setFont( new Font( &quot;Helvetica&quot;, Font.PLAIN,
14 ) );<BR>
endList.setFont( new Font( &quot;Helvetica&quot;, Font.PLAIN,
14 ) );<BR>
<BR>
jp2.add( startList );<BR>
jp2.add( endList );<BR>
jp.add( &quot;Center&quot;, jp2 );<BR>
jp.add( &quot;South&quot;, comment_text );</TT>
</BLOCKQUOTE>
<H4>Using a Tab Panel</H4>
<P>
After you've created your panels, you need to put them into a
tab panel so the user can switch between them. Using the tab panel
is easy! First you must create it:
<BLOCKQUOTE>
//&nbsp;&nbsp;&nbsp;&nbsp;Create a tab panel...<BR>
JifTabPanel jtp = new JifTabPanel();<BR>
</BLOCKQUOTE>
<P>
The next step is to add each completed pane to the tab panel.
This is done with the <TT>addPane()</TT>
method. It takes two arguments: the name to display on the tab,
and the object to display on the pane.
<BLOCKQUOTE>
<TT>//&nbsp;&nbsp;&nbsp;&nbsp;Add the panes...
<BR>
jtp.addPane( &quot;Date/Room&quot;, jp );<BR>
jtp.addPane( &quot;Schedule&quot;, jp );<BR>
</TT>
</BLOCKQUOTE>
<P>
The rest is handled by the tab panel class. There is nothing more
for you to worry about.
<H4>Making the Buttons Look Nice</H4>
<P>
The last part of the user interface are the buttons along the
side of the tab panel. These are two of the buttons that are provided
to you from your base class, <TT>SimpleDBUI</TT>.
You're going to use the Save and Delete buttons.
<P>
To place these nicely, create yet another <TT>JifPanel</TT>
(YAJP?) object. Set a grid layout of 2 rows by 1 column. However,
you set the spacing wide so your buttons will spread out:
<BLOCKQUOTE>
<TT>//&nbsp;&nbsp;&nbsp;&nbsp;Add the buttons...
<BR>
JifPanel p = new JifPanel();<BR>
p.setLayout( new GridLayout( 2, 1, 5, 20 ) );<BR>
p.add( saveButton );<BR>
p.add( deleteButton );<BR>
</TT>
</BLOCKQUOTE>
<H4>Finalizing the Interface</H4>
<P>
The last step in creating your interface is to place your sub-panels
into your master panel. Remember that your base class, <TT>SimpleDBUI</TT>,
provides you with a container panel to work with. This panel is
already set up with a <TT>BorderLayout</TT>.
You utilize the Center and East placements of this layout for
placing your sub-panels:
<BLOCKQUOTE>
<TT>//&nbsp;&nbsp;&nbsp;&nbsp;Add the tab
panel to the center of myself...<BR>
add( &quot;Center&quot;, jtp );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Add the button panel&#133;<BR>
add( &quot;East&quot;, p );</TT>
</BLOCKQUOTE>
<P>
As you can see from your screen shots in Figures 15.1 and 15.2,
the layouts work quite well. Figure 15.8 shows this final addition
to the master layout.
<P>
<A HREF="f15-8.gif" ><B>Figure 15.8 : </B><I>The master layout.</I></A>
<H3><A NAME="InteractingwiththeUser">Interacting with the User</A>
</H3>
<P>
After you've constructed all the necessary components, you've
got this great looking user interface. But how do you command
it to do your bidding? Simple! Through the use of the events generated
by the components in your interface.
<H4>Event Handling</H4>
<P>
Before you can select a schedule start and end time, you need
to choose a date and a room to work with. You want to trap these
selections and store them in instance variables for later use.
To accomplish this you first need those two instance variables:
<BLOCKQUOTE>
<TT>java.util.Date&nbsp;&nbsp;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRoom
= null;</TT>
</BLOCKQUOTE>
<P>
When the user selects a date on your calendar, or chooses a conference
room from the list, an <TT>ACTION_EVENT</TT>
event is generated. To capture these events, all you need to do
is override the <TT>action()</TT>
method in your class. The following is that method from your <TT>RoomSchedulerUI()</TT>
class:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;action( Event event, Object arg )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Get
the room record from the room list<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== roomList )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedRoom
=( ConfRoomRecord )rowMap.elementAt(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roomList.getSelectedIndex()
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showSelection();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Get
date selection...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
instanceof CalendarPanel )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;User
selected a date...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedDate
= ( java.util.Date )arg;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showSelection();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( super.action(
event, arg ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
</TT>
</BLOCKQUOTE>
<P>
First you check to see if the event was generated by your room
list. If so, you retrieve the cached <TT>ConfRoomRecord</TT>
object from your room list. Secondly, you see if the event was
generated by your calendar. If it is, you store the date returned
by that object.
<H4>Showing the Selection</H4>
<P>
After either of these events have fired, you call the <TT>showSelection()</TT>
method. This method is responsible for showing some status information
regarding the selections that have been made so far:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
showSelection&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;showSelection()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s = &quot;&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String coolDate
= FileDate.toNormalString( selectedDate );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( !coolDate.equals(
&quot;&quot; ) &amp;&amp; selectedRoom != null )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
= &quot;Room &quot; + Integer.toString( selectedRoom.room_nbr
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= &quot;, Floor &quot; + Integer.toString( selectedRoom.floor_nbr
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= &quot; on &quot; + coolDate;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadLists();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( coolDate.equals(
&quot;&quot; ) &amp;&amp; selectedRoom != null )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
= &quot;Room &quot; + Integer.toString( selectedRoom.room_nbr
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= &quot;, Floor &quot; + Integer.toString( selectedRoom.floor_nbr
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( !coolDate.equals(
&quot;&quot; ) &amp;&amp; selectedRoom == null )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
= coolDate;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( s.equals(
&quot;&quot; ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
s = &quot;Select a date and a room...&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dateStatus.setText(
s );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
</TT>
</BLOCKQUOTE>
<P>
It is a simple method. It converts the selected date into a normal
human readable form. This date is then concatenated to the conference
room information that was chosen. This new <TT>String</TT>
is then shown in the status bar of your mainframe.
<H3><A NAME="DatabaseAccess">Database Access</A></H3>
<P>
This application communicates with the database through the use
of the <TT>DBRecord</TT> extension
class <TT>ConfRoomRecord</TT>. This
class is used solely to retrieve information about conference
rooms that are available to be scheduled.
<P>
The actual scheduling database work is done with custom constructed
SQL statements, and not the use of your SQL generator classes
as in the last two chapters. This allows you to explore some more
interesting uses of the framework and SQL.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=525><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=525>
<BLOCKQUOTE>
The <TT>ConfRoomRecord</TT> and other database classes are reused in several other applications. They have been placed in their own package along with other shared code. This package is called <TT>jif.common</TT>. It contains all the common classes between 
all the applications.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H3><A NAME="ReadingtheExistingSchedule">Reading the Existing
Schedule</A></H3>
<P>
Once a date and room are selected for scheduling, it is necessary
to retrieve the current schedule for this pair from the database.
This is done by <I>stepping</I> through the database. You know
what the date and room are, you just need to check each time slot.
The following source code illustrates how to <I>step</I> through
the database:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
getSlotStatus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getSlotStatus( int slot, int room, int
floor, java.util.Date date )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count
= 0;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;
sql = &quot;select count(*) from conf_room_sched &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;
where room_nbr = &quot; + Integer.toString( room ) +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;
and floor_nbr = &quot; + Integer.toString( floor ) +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;
and &quot; + Integer.toString( slot ) + &quot; &gt;= start_slot
&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;
and &quot; + Integer.toString( slot ) + &quot; &lt;= end_slot
&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;
and sched_date = to_date('&quot; + FileDate.toOracleString( date
) +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;')&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
rs =<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().getConnector().getStatement().executeQuery(
sql );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs.next();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count
= rs.getInt( 1 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getJiflet().errorLog(
&quot;SQL Error:&quot; + e.toString() );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
&quot;Open&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( ( count
&lt; 1 ) ? &quot;Open&quot; : &quot;Used&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
</TT>
</BLOCKQUOTE>
<P>
First construct a query based on the arguments passed to you.
These arguments specify the slot number, room number, floor number
and date of the row to find. The SQL merely returns a count of
records that match the given criteria.
<P>
You then request that your <TT>DBConnector</TT>
execute the query. The query will always return a single row and
column unless there is a database error. Therefore, you can always
expect the row count to be there.
<P>
Finally, barring any errors, you return a string representing
the state of the requested criteria. This is either Open or Used.
The determination is based on whether the row count was less than
one.
<H3><A NAME="StoringYourSchedule">Storing Your Schedule</A></H3>
<P>
Storing your schedule is quite simple. However, you need to override
the default saving mechanism that is built into your framework
classes. To do this, you override the <TT>saveRecord()</TT>
method in your main class:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
saveRecord&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;saveRecord()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RoomSchedulerUI
myUI = ( RoomSchedulerUI )getUIPanel();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( !myUI.canSave()
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox
mb = new MessageBox( this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;No
Way, No How!&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;The
information to schedule a room is incomplete.\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;You
need to select a date, room, a start time and an end time.&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.EXCLAMATION
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mb.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
false );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String sql = myUI.getInsertSQL();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getConnector().getStatement().execute(
sql );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Reload
the schedule...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myUI.loadLists();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Disable
UI components...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myUI.saveButton.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getDBRecord().setDataChange(
false );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showStatus(
&quot;Record saved...&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorLog(
&quot;Error creating schedule row: &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.toString()
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showStatus(
&quot;Record not saved...&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
false );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( true );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
</TT>
</BLOCKQUOTE>
<P>
This overridden method first checks with the user interface to
make sure that the user has selected all the necessary items to
actually schedule a room. If not, a message box is displayed informing
the user.
<P>
Next, you request that the user interface generate some SQL for
you to use to update the database. The SQL statement is then executed.
If no errors occur, the schedule lists are reloaded with data,
and a message is displayed to the user that the save was successful.
<H3><A NAME="GeneratingtheSQL">Generating the SQL</A></H3>
<P>
To generate the SQL for storing your schedule, you need to bring
together all of the selections made by the user:
<UL>
<LI><FONT SIZE=2 COLOR=#000000>The date</FONT>
<LI><FONT SIZE=2 COLOR=#000000>The room</FONT>
<LI><FONT SIZE=2 COLOR=#000000>The floor number of the room</FONT>
<LI><FONT SIZE=2 COLOR=#000000>The starting time slot</FONT>
<LI><FONT SIZE=2 COLOR=#000000>The ending time slot</FONT>
<LI><FONT SIZE=2 COLOR=#000000>A comment</FONT>
</UL>
<P>
Once these have all be selected or entered, the SQL generation
may take place:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
getInsertSQL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getInsertSQL()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rc = -1;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String sql = &quot;insert
into conf_room_sched ( room_nbr, floor_nbr, &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sched_date,
start_slot, end_slot, comment_text ) values ( &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer.toString(
selectedRoom.room_nbr ) + &quot;, &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer.toString(
selectedRoom.floor_nbr ) + &quot;, &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;to_date(
'&quot; + FileDate.toOracleString( selectedDate ) + &quot;' ),
&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer.toString(
startList.getSelectedIndex() ) + &quot;, &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer.toString(
endList.getSelectedIndex() ) + &quot;, &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;'&quot;
+ comment_text.getText() + &quot;' )&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( sql );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
</TT>
</BLOCKQUOTE>
<P>
This statement simply inserts the rows of the selected data into
the database.
<H2><A NAME="ProgrammingConsiderations"><FONT SIZE=5 COLOR=#FF0000>Programming
Considerations</FONT></A></H2>
<P>
This application presented you with quite a challenge. You needed
to present an intuitive interface to the user that flowed and
showed programmatic direction. This was achieved though the use
of the tab panel class, <TT>JifTabPanel</TT>.
<P>
You also enhanced the interface using nested layout managers.
You nested a <TT>GridLayout</TT> within
a <TT>BorderLayout</TT> to evenly
space your components. This technique is one you'll use over and
over again.
<P>
To recap, this application introduced the following Java intranet
programming topics:
<UL>
<LI><FONT SIZE=2 COLOR=#000000>Using different layout managers
within layout managers.</FONT>
</UL>
<BLOCKQUOTE>
You used a technique where you placed a <TT>FlowLayout</TT>
and a <TT>GridLayout</TT> within a
<TT>BorderLayout</TT> to build a cool
interface.
</BLOCKQUOTE>
<UL>
<LI><FONT SIZE=2 COLOR=#000000>Using the </FONT><TT>JifTabPanel.</TT>
</UL>
<BLOCKQUOTE>
You used the <TT>JifTabPanel</TT>
object to present two different sets of data together for the
user in an intuitive manner.
</BLOCKQUOTE>
<UL>
<LI><FONT SIZE=2 COLOR=#000000>Overriding row storage method.</FONT>
</UL>
<BLOCKQUOTE>
You overrode the <TT>saveRecord()</TT>
method of main class to do some special checking and storage for
your schedules.
</BLOCKQUOTE>
<UL>
<LI><FONT SIZE=2 COLOR=#000000>Overriding SQL generation method.</FONT>
</UL>
<BLOCKQUOTE>
You overrode the SQL generation method in your user interface.
This was done because the user interface has all the necessary
information to build the SQL. You didn't use components that were
capable of generating SQL on their own.
</BLOCKQUOTE>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter introduced you to the third sample application in
your intranet application suite. This was the Conference Room
Scheduling application. This program is responsible for maintaining
information about the scheduling of an important company resource:
conference rooms. This application should be useful to all employees
on your intranet.
<P>
In <A HREF="ch16.htm" >Chapter 16</A>, &quot;Online In/Out Board,&quot;
you will design and create an application that allows employees
to check in and out for lunch, or even vacations.

<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch14.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch16.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
