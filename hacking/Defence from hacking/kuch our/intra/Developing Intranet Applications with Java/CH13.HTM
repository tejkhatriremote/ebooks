<HTML>

<HEAD>
   <TITLE>Chapter 13 -- Employee Files</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 13</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Employee Files</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>



<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#ApplicationDesign" >Application Design</A>
<LI><A HREF="#DatabaseDesign" >Database Design</A>
<LI><A HREF="#Implementation" >Implementation</A>
<UL>
<LI><A HREF="#UserInterface" >User Interface</A>
<LI><A HREF="#DatabaseAccess" >Database Access</A>
</UL>
<LI><A HREF="#ProgrammingConsiderations" >Programming Considerations</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
Now that you've learned the foundation for creating intranet applications,
let's get cooking. This chapter and the next several chapters
guide you through some sample intranet applications. These applications
are real-world examples. You don't find any animated buttons or
scrolling text classes sprinkled in either. This is hardcore corporate
database programming, but because you've developed such an excellent
set of foundation classes, it isn't difficult at all to create
the applications.
<P>
This chapter covers the following topics in regard to the Employee
Files application:
<UL>
<LI><FONT COLOR=#000000>Application Design-This section covers
the general design of the application, including functionality
and user interface considerations.</FONT>
<LI><FONT COLOR=#000000>Database Design-This section covers the
database requirements for this application. Here, you examine
the data model used to support the application design.</FONT>
<LI><FONT COLOR=#000000>Implementation-This section covers how
the application and database design are implemented.</FONT>
<LI><FONT COLOR=#000000>Programming Considerations-This section
recaps the implementation and summarizes any difficult programming
situations that have arisen.</FONT>
</UL>
<P>
This four-step format is used throughout the sample application
chapters. Hopefully it provides you with valuable insight and
ideas for creating your own intranet applications.
<H2><A NAME="ApplicationDesign"><FONT SIZE=5 COLOR=#FF0000>Application
Design</FONT></A></H2>
<P>
This is the first sample application, and it is quite simple.
It is the Employee Files. This application enables you to maintain
records on the employees in your company. This application is
sort of the &quot;big toe&quot; for the rest of the programs,
because many of the other programs use information that is stored
in the employee table. Programs such as the online phone book
or the in/out board use this data.
<P>
Figure 13.1 is the proposed user interface for the Employee Files
program.
<P>
<A HREF="f13-1.gif" ><B>Figure 13.1 </B>: <I>The Employee files user interface.</I></A>
<P>
This application is semi-modeless, which means that it has no
operating mode. You don't have to inform the program that you
are going to be adding new records or removing records. You can
flow through the program, and it determines what is done.
<P>
The basic functionality of this application is to create, read,
update, and delete employee records. These records are stored
in a database. You will learn about database design later in this
chapter.
<P>
Think of this application as a pointer into the employee table.
When the pointer is situated on a record, it is the current record.
This current record is displayed to the user and the user can
do whatever he chooses with it. The user can also insert records
into the table at the end.
<P>
The user requires a method of moving this pointer from employee
to employee. The best way to present this information to the user
is through the use of a pick list.
<H3>Using a Pick List</H3>
<P>
The pick list is a selection of all the records in the employee
table. This selection includes the first and last name of each
employee. The user is allowed to select one name from the displayed
list. After the selection is made, the chosen record is fully
retrieved and displayed.
<P>
To select a record, double-click the list item or single-click
and then press the OK button.
<P>
Figure 13.2 shows the concept of the employee pick list.
<P>
<A HREF="f13-2.gif" ><B>Figure 13.2 : </B><I>The employee pick list.</I></A>
<P>
This pick list is opened when the user presses the Choose button,
a standard <TT>SimpleDBUI</TT> button.
<P>
Now that you have a sense of the application design, let's look
at the database.
<H2><A NAME="DatabaseDesign"><FONT SIZE=5 COLOR=#FF0000>Database
Design</FONT></A></H2>
<P>
This application is responsible for manipulating employee records.
These records are stored in a single table. Currently, there is
no need to extend the scope of the employee data to a second table.
<P>
The information stored in the employee table is basic information.
Table 13.1 shows the columns needed in the employee table.<BR>
<P>
<CENTER><B>Table 13.1. The employee table layout.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=162><I>Description</I></TD><TD WIDTH=134><I>Column Name</I>
</TD><TD WIDTH=102><I>Type</I></TD><TD WIDTH=110><CENTER><I>Can Be Null?</I></CENTER>
</TD><TD WIDTH=70><CENTER><I>Default</I></CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>Employee ID</TD><TD WIDTH=134>emp_id</TD><TD WIDTH=102>number(5)
</TD><TD WIDTH=110><CENTER>N</CENTER></TD><TD WIDTH=70><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>First Name</TD><TD WIDTH=134>first_name</TD>
<TD WIDTH=102>char(40)</TD><TD WIDTH=110><CENTER>N</CENTER></TD>
<TD WIDTH=70><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>Middle Name</TD><TD WIDTH=134>mid_name</TD>
<TD WIDTH=102>char(40)</TD><TD WIDTH=110><CENTER>Y</CENTER></TD>
<TD WIDTH=70><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>Last Name</TD><TD WIDTH=134>last_name</TD><TD WIDTH=102>char(40)
</TD><TD WIDTH=110><CENTER>N</CENTER></TD><TD WIDTH=70><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>Social Security Number</TD><TD WIDTH=134>ssn
</TD><TD WIDTH=102>char(15)</TD><TD WIDTH=110><CENTER>Y</CENTER>
</TD><TD WIDTH=70><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>Address Line 1</TD><TD WIDTH=134>addr_line_1
</TD><TD WIDTH=102>char(80)</TD><TD WIDTH=110><CENTER>Y</CENTER>
</TD><TD WIDTH=70><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>Address Line 2</TD><TD WIDTH=134>addr_line_2
</TD><TD WIDTH=102>char(80)</TD><TD WIDTH=110><CENTER>Y</CENTER>
</TD><TD WIDTH=70><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>City</TD><TD WIDTH=134>city</TD><TD WIDTH=102>char(80)
</TD><TD WIDTH=110><CENTER>Y</CENTER></TD><TD WIDTH=70><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>State</TD><TD WIDTH=134>state</TD><TD WIDTH=102>char(80)
</TD><TD WIDTH=110><CENTER>Y</CENTER></TD><TD WIDTH=70><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>Zip Code</TD><TD WIDTH=134>zip_code</TD><TD WIDTH=102>char(20)
</TD><TD WIDTH=110><CENTER>Y</CENTER></TD><TD WIDTH=70><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>Salary</TD><TD WIDTH=134>salary</TD><TD WIDTH=102>number(7,2)
</TD><TD WIDTH=110><CENTER>Y</CENTER></TD><TD WIDTH=70><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>Home Phone Number</TD><TD WIDTH=134>home_phone_nbr
</TD><TD WIDTH=102>char(20)</TD><TD WIDTH=110><CENTER>Y</CENTER>
</TD><TD WIDTH=70><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>Work Extension Number</TD><TD WIDTH=134>work_ext_nbr
</TD><TD WIDTH=102>char(20)</TD><TD WIDTH=110><CENTER>Y</CENTER>
</TD><TD WIDTH=70><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=162>In/Out Indicator</TD><TD WIDTH=134>in_out_ind
</TD><TD WIDTH=102>char(1)</TD><TD WIDTH=110><CENTER>N</CENTER>
</TD><TD WIDTH=70><CENTER>'N'</CENTER></TD></TR>
</TABLE></CENTER>
<P>
<P>
The entire data model is laid out into an <I>entity relationship
diagram</I> or <I>ERD</I>. An ERD represents all the tables in
your data model as an <I>entity</I>. The relationship between
each entity is then shown. There are many types of relationships
between entities: one-to-one, one-to-many, zero-or-more-to-one,
zero-or-more-to-many, and so on.
<P>
Figure 13.3 shows the entity relationship diagram for the database
as it stands in this chapter. As you get deeper into the sample
applications, you see the entity relationship diagram grow to
encompass all the tables.
<P>
<A HREF="f13-3.gif" ><B>Figure 13.3 : </B><I>The employee entity.</I></A>
<P>
In addition to creating a table, you create a database synonym
for the table. This allows everyone to access the table with the
same name and not have to worry about the schema in which the
table resides.
<P>
Before you see the SQL for creating the table, there is a small
matter of users and schemas. The data model for the sample applications
in this book relies on no particular user or schema. However,
the same model is used in the development of the applications.
<P>
All of the tables in this book are created by the master user
for the database. Because you use Oracle for developing the database,
this user is <TT>system</TT>. You
also create an Oracle role and a user for the database. Full access
to all of the tables is granted to the role. The user is granted
access to the role.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=590><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=590>
<BLOCKQUOTE>
Although this book uses Oracle as a database, the table definitions are easily converted to other database management systems. After the tables are created in your own DBMS, this application and the others that follow will run just fine.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=573><B>What's a Role?</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=573>
<BLOCKQUOTE>
A role is like a user group. It can have specific rights granted to it. These rights can be table access or possible system administration capabilities.</BLOCKQUOTE>
<BLOCKQUOTE>
After a role is created, you can grant users access to the role. When a user is granted access to a role, that user can perform all of the functions granted to the role. Users can also be granted to several roles at one time. Many users can also be granted 
to a single role. This flexible structure allows complex database security schemes to be implemented without much work.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The role that you created is called <TT>ia_user</TT>,
for &quot;intranet application&quot; user. The user that you created
shares the same name, <TT>ia_user</TT>.
The user is granted to the role. Therefore, all of the granting
that is done in the creation SQL is only to the role.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=575><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=575>
<BLOCKQUOTE>
The SQL code to create the user and role is on the CD-ROM in the examples directory for this chapter. It is in a file called <TT>user.sql</TT>. This file is Oracle-specific, but should work on other databases with little or no modifications.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Finally, Listing 13.1 is the SQL commands to create the database.
<HR>
<BLOCKQUOTE>
<B>Listing 13.1. The Employee table creation SQL.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>/*&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;the&nbsp;table&nbsp;*/
<BR>
create&nbsp;table&nbsp;emp_t</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;emp_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(&nbsp;5&nbsp;)&nbsp;not&nbsp;null,</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;first_name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;40&nbsp;)&nbsp;not&nbsp;null,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;mid_name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;40&nbsp;),</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;last_name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;40&nbsp;)&nbsp;not&nbsp;null,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;ssn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;15&nbsp;),</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;addr_line_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;80&nbsp;),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;addr_line_2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;80&nbsp;),</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;city&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;80&nbsp;),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;state&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;80&nbsp;),</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;zip_code&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;20&nbsp;),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;salary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(&nbsp;7,2&nbsp;)&nbsp;not&nbsp;null,</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;home_phone_nbr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;20&nbsp;),
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;work_ext_nbr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;20&nbsp;),</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;in_out_ind&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(&nbsp;1&nbsp;)&nbsp;default&nbsp;'N'&nbsp;not&nbsp;null
<BR>
);<BR>
</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>/*&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;a&nbsp;primary&nbsp;key&nbsp;*/</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>alter&nbsp;table&nbsp;emp_t<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primary&nbsp;key</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emp_id</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;);<BR>
</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>/*&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;the&nbsp;synonym&nbsp;*/</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
create&nbsp;public&nbsp;synonym&nbsp;emp&nbsp;for&nbsp;emp_t&nbsp;;
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=579><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=579>
<BLOCKQUOTE>
The SQL in Listing 13.1 is quite generic, but it might not work on every database. This particular SQL has been tested with Oracle.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=451><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=451>
<BLOCKQUOTE>
The code in Listing 13.1 does not work with ODBC.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The first SQL clause creates the table <TT>emp_t</TT>.
The second clause creates a primary key using the <TT>emp_id</TT>
column. Making this the primary key ensures that the values in
the column are unique across all rows. Lastly, the public synonym
<TT>emp</TT> is created for the table
<TT>emp_t</TT>.
<P>
After you create the table, you are ready to build the application.
<H2><A NAME="Implementation"><FONT SIZE=5 COLOR=#FF0000>Implementation</FONT></A>
</H2>
<P>
The rest of this chapter discusses the implementation of the Employee
Files program. The first feature discussed is the user interface
and how it is created. Second, the database access used in the
program is discussed. Finally, you learn about any programming
pitfalls that came up during the application construction.
<P>
Each sample application in this book uses a different approach
to developing the user interface. This variety shows the different
ways you can do your own interfaces. Hopefully, you get a cross-section
of many different styles and can choose the one that suits you
the best.
<H3><A NAME="UserInterface">User Interface</A></H3>
<P>
The screen layout for this application is presented in a nice
manner that is achieved through the use of a <TT>GridBagLayout</TT>.
This ogre of a layout manager is difficult to work with, but when
it is tamed it can provide wonderful layout capabilities.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=590><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=590>
<BLOCKQUOTE>
The <TT>JifPanel</TT> class provides a method called <TT>addWithConstraints()</TT> that allows you to specify <TT>GridBagLayout</TT> constraints in a simple manner and add them with the component to the layout. It is used throughout many of the 
applications in this chapter.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<BR>
<P>
Listing 13.2 gives the user interface construction code for the
Employee program.
<HR>
<BLOCKQUOTE>
<B>Listing 13.2. Employee files interface construction source
code.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
l_emp_id;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
l_fn;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
l_mn;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
l_ssn;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
l_ln;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
l_address;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
l_city;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
l_state;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
l_zc;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_salary;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_home_phone_nbr;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_work_ext_nbr;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_in_out_ind;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
emp_id;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
first_name;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mid_name;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ssn;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
last_name;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addr_line_1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addr_line_2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
city;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
state;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
zip_code;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;salary;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;home_phone_nbr;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work_ext_nbr;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifCheckbox&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in_out_ind;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;EmployeeUI( SimpleDBJiflet jiflet )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( jiflet
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GridBagLayout
gbl = new GridBagLayout();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int cw[] = { 14,
14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;14,
14, 14 }; // 17<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rh[] = { 14,
14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 }; // 12<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double rc14_0[]
= { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.columnWidths
= new int[ 17 ];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.rowHeights
= new int[ 12 ];<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.columnWeights
= new double[ 17 ];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.rowWeights
= new double[ 12 ];<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
cw, 0, gbl.columnWidths, 0, 17 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
cw, 0, gbl.rowHeights, 0, 12 );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
rc14_0, 0, gbl.columnWeights, 0, 17 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
rc14_0, 0, gbl.rowWeights, 0, 12 );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout( gbl
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_emp_id = new
Label( &quot;Employee ID:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_emp_id, &quot;anchor=east;x=0;y=0&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_ssn = new Label(
&quot;SSN:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_ssn, &quot;anchor=east;x=6;y=0&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_fn = new Label(
&quot;First Name:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_fn, &quot;anchor=east;x=0;y=1&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_mn = new Label(
&quot;Middle Name:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_mn, &quot;anchor=east;x=0;y=2&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_ln = new Label(
&quot;Last Name:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_ln, &quot;anchor=east;x=0;y=3&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_address = new
Label( &quot;Address:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_address, &quot;anchor=east;x=0;y=4&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_city = new Label(
&quot;City:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_city, &quot;anchor=east;x=0;y=6&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_state = new
Label( &quot;State:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_state, &quot;anchor=east;x=0;y=7&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_zc = new Label(
&quot;Zip Code:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_zc, &quot;anchor=east;x=6;y=7&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_salary = new
Label( &quot;Salary:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_salary, &quot;anchor=east;x=0;y=9&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_home_phone_nbr
= new Label( &quot;Home Phone:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_home_phone_nbr, &quot;anchor=east;x=0;y=10&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_work_ext_nbr
= new Label( &quot;Work Ext:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_work_ext_nbr, &quot;anchor=east;x=6;y=10&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_in_out_ind =
new Label( &quot;In/Out:&quot;, Label.RIGHT );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
l_in_out_ind, &quot;anchor=east;x=0;y=12&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emp_id = new JifTextField(
&quot;&quot;, &quot;emp_id&quot;, true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
emp_id, &quot;x=1;y=0;width=5;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssn = new JifTextField(
&quot;&quot;, &quot;ssn&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
ssn, &quot;x=7;y=0;width=7;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first_name = new
JifTextField( &quot;&quot;, &quot;first_name&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
first_name, &quot;x=1;y=1;width=13;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mid_name = new
JifTextField( &quot;&quot;, &quot;mid_name&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
mid_name, &quot;x=1;y=2;width=13;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last_name = new
JifTextField( &quot;&quot;, &quot;last_name&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
last_name, &quot;x=1;y=3;width=13;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addr_line_1 =
new JifTextField( &quot;&quot;, &quot;addr_line_1&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
addr_line_1, &quot;x=1;y=4;width=13;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addr_line_2 =
new JifTextField( &quot;&quot;, &quot;addr_line_2&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
addr_line_2, &quot;x=1;y=5;width=13;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;city = new JifTextField(
&quot;&quot;, &quot;city&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
city, &quot;x=1;y=6;width=13;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = new JifTextField(
&quot;&quot;, &quot;state&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.setStyle(
JifTextField.UPPER );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
state, &quot;x=1;y=7;width=5;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zip_code = new
JifTextField( &quot;&quot;, &quot;zip_code&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zip_code.setStyle(
JifTextField.NUMERIC );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
zip_code, &quot;x=7;y=7;width=7;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;salary = new JifTextField(
&quot;&quot;, &quot;salary&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
salary, &quot;x=1;y=9;width=5;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;home_phone_nbr
= new JifTextField( &quot;&quot;, &quot;home_phone_nbr&quot; );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
home_phone_nbr, &quot;x=1;y=10;width=5;fill=horizontal&quot; );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work_ext_nbr =
new JifTextField( &quot;&quot;, &quot;work_ext_nbr&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
work_ext_nbr, &quot;x=7;y=10;width=7;fill=horizontal&quot; );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in_out_ind = new
JifCheckbox( &quot;in_out_ind&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
in_out_ind, &quot;x=1;y=12;width=7;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Disable
buttons...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chooseButton.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deleteButton.disable();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add
the buttons...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
newButton, &quot;x=15;y=0;width=2;fill=horizontal&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
saveButton, &quot;x=15;y=2;width=2;fill=horizontal&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
chooseButton, &quot;x=15;y=4;width=2;fill=horizontal&quot; );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Tell
which are numeric...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emp_id.setNumeric(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;salary.setNumeric(
true );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Set
the focus to the first field...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFocus( emp_id
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
A notable item about this user interface (and other <TT>GridBagLayout</TT>
jiflets in this book) is that the grid settings are hard-coded.
A permanent 12 row by 17 column grid is used for the user interface.
The components are placed within the grid only after the grid
is set.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=551><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=551>
<BLOCKQUOTE>
In this user interface, the <TT>Label</TT>s all have instance variables associated with them. Unless you plan to change the text of a label during the program life-cycle, this is completely unnecessary. It is done here for clarity only.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>The Employee Pick List</H4>
<P>
Another class has been developed for this application. This is
the <TT>EmployeePickList</TT> class.
This class derives from the <TT>PickList</TT>
class of <TT>jif.awt</TT> package
(as discussed in <A HREF="ch11.htm" >Chapter 11</A>, &quot;User
Interface Classes&quot;) and presents the user with a selection
of employees. When one is chosen, the object stores the selection
and waits for someone to ask who has been chosen. Let's take a
look at some of the source code.
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
EmployeePickList&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
EmployeePickList<BR>
extends PickList</TT>
</BLOCKQUOTE>
<P>
As stated earlier, you extend the <TT>PickList</TT>
class. In order to do this, you must supply an <TT>init()</TT>
method. The following is this method:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;init()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rows = retrieveEmployees();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( rows &gt;
0 &amp;&amp; getParent() instanceof Jiflet )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(
( Jiflet )getParent() ).verboseLog( &quot;Retrieved &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer.toString(
rows ) + &quot; Employees&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
This method calls the <TT>retrieveEmployees()</TT>
method. Also, if this pick list is used with a jiflet and verbose
mode is turned on, the number of employees that is retrieved is
written to the log file.
<P>
The <TT>retrieveEmployees()</TT> method
shown in Listing 13.3 is the meat of this class. It performs an
SQL <TT>SELECT</TT> statement from
the database, parses the results, and places them in the pick
list for the user to select from.
<HR>
<BLOCKQUOTE>
<B>Listing 13.3. The </B><TT><B>retrieveEmployees()</FONT></B></TT><B>
method.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
retrieveEmployees&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;int<BR>
&nbsp;&nbsp;&nbsp;&nbsp;retrieveEmployees()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rv
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows
= 0;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql = &quot;select
* from emp order by last_name, first_name&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rv
= myConnection.getStatement().execute( sql );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(
&quot;Error during retrieve: &quot; + e.toString() );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;No
employees to return...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
0 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Is
this a result set?<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( rv )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
rs = myConnection.getStatement().getResultSet();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Spin
through the results and add them to the list...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
( rs.next() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmployeeRecord
er = new EmployeeRecord( rs );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add
to list...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( er.emp_id != -1 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList.addItem(
er.nice_name );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add
to row mapper...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowMap.insertElementAt(
er, rows );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Increment
row counter...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch
( SQLException e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Indicate
an error!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;We're
done!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( rows );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
The interesting twist here is that each employee row is stored
in another class called <TT>EmployeeRecord</TT>.
This class has a corresponding instance variable for each column
in the employee table. The class is smart and knows how to read
a row out of a JDBC <TT>ResultSet</TT>
object.
<P>
So as you walk through the results returned by the SQL statement,
you create a new <TT>EmployeeRecord</TT>.
You store these records in a <TT>Vector</TT>
for later use.
<P>
At the end, you return the number of rows that are retrieved and
added to the pick list. If there is an error, you return <TT>-1</TT>.
<P>
The reason you store each record is for easy access. When the
user selects the employee from the list, you ask the pick list
to give you a copy of the record that it already retrieved. This
is done in the <TT>getRecord()</TT>
method:<BR>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
getRecord&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public EmployeeRecord<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getRecord( int where )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( ( EmployeeRecord
)rowMap.elementAt( where ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
The pick list returns the index of the item selected. This class
uses a neat trick to keep track of what row is where in the <TT>List</TT>.
A <TT>Vector</TT> called <TT>rowMap</TT>
is created. As a row of data is retrieved from the database and
placed into the pick list's <TT>List</TT>,
it is also stored in the <TT>Vector</TT>
object at the same index level.
<P>
Later, when you need an <TT>EmployeeRecord</TT>
from the pick list, instead of rereading the data from the database,
you retrieve the row from the <TT>Vector</TT>.
This is done in the <TT>getRecord()</TT>
method. You see this used quite a bit in various programs.
<P>
The <TT>EmployeePickList</TT> object
is created and displayed in the main program when the user presses
the Choose button. Listing 13.4 shows how it is done.
<HR>
<BLOCKQUOTE>
<B>Listing 13.4. The </B><TT><B>action()</FONT></B></TT><B>
and </B><TT><B>chooseEmployee()</FONT></B></TT><B>
methods.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* My child panel may start up picklists.
It is my responsibility to<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* handle them. That is done here.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;action( Event event, Object arg )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
== getUIPanel() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch
( ( ( Integer )arg ).intValue() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
JifMessage.chOOSE:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( getDBRecord().didDataChange() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chgDlg
= new ResponseDialog( this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Data
Change&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;The
record has changed.\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Do
you wish to save your changes?&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Yes,No,Cancel&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chgDlg.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chooseEmployee();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Handle
picklist events...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
instanceof EmployeePickList )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rv
= ( ( Integer )arg ).intValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
EmployeePickList&nbsp;&nbsp;&nbsp;&nbsp; epl = ( EmployeePickList
)event.target;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( rv != -1 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Disable
save on choose...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().saveButton.disable();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Display
it on the screen...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setDBRecord(
( DBRecord )epl.getRecord( rv ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().moveToScreen();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Kill
the dialog box...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epl.hide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epl.dispose();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Reset
the focus...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().requestFocus();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;We
handled it...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Not
handled...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( super.action(
event, arg ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
chooseEmployee&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;chooseEmployee()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startWait();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmployeePickList
epl = new EmployeePickList( this, getConnector() );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epl.center( true
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epl.show();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endWait();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
When the Choose button is clicked, a <TT>JifMessage</TT>
is sent to the parent. This is received in the <TT>action()</TT>
event handler method. At this point, you need to check whether
any changes have been made to the currently displayed record.
If so, you ask the user whether he wants to save them.
<P>
If there are no changes to save, the method <TT>chooseEmployee()</TT>
is called. This method creates and displays an <TT>EmployeePickList</TT>
object.
<P>
When the user selects a pick list item or closes the pick list
window, it generates an <TT>ACTION_EVENT</TT>
event. You capture this event and act accordingly.
<P>
If the pick list returns a <TT>-1</TT>
value, you know that the user has canceled his selection. Otherwise,
the value returned is the row number that is selected. You retrieve
the <TT>EmployeeRecord</TT> at that
row, make it the current record, and request that the user interface
display it.
<P>
Finally, a little cleanup is in order. You <TT>hide()</TT>
and <TT>dispose()</TT> of the pick
list window and then reset the focus back to your window.
<H3><A NAME="DatabaseAccess">Database Access</A></H3>
<P>
The Employee program communicates with the database through the
use of an <TT>EmployeeRecord</TT>
object. This <TT>DBRecord</TT> derivation
knows how to create, read, update, and delete records from the
employee table. The following are the instance variables of this
class:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Constants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static String&nbsp;&nbsp;&nbsp;&nbsp;
TABLE_NAME = &quot;emp&quot;;<BR>
<BR>
//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;A variable for
each table column...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emp_id
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first_name
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mid_name
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last_name
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssn
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addr_line_1
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addr_line_2
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;city
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zip_code
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;salary
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;home_phone_nbr
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work_ext_nbr
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in_out_ind
= &quot;N&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;A computed column...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nice_name;</TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=589><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=589>
<BLOCKQUOTE>
The <TT>EmployeeRecord</TT>, <TT>EmployeePickList</TT>, and other database classes are reused in several other applications. They are placed in their own package along with other shared code. This package is called <TT>jif.common</TT>. It contains all the 
common classes between all the applications.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="ProgrammingConsiderations"><FONT SIZE=5 COLOR=#FF0000>Programming
Considerations</FONT></A></H2>
<P>
This application is quite routine. Because you use the stock <TT>SimpleDBUI</TT>
and <TT>SimpleDBJiflet</TT> classes
as a base, not much extra work is required.
<P>
The one interesting programming consideration that comes up during
the creation of this application is the caching of data in the
pick list. This class purposely stores a copy of each row retrieved
simply for the convenience of the calling program. When the user
selects an item from the pick list, it does not have to be re-retrieved
from the database because it has been cached.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter introduces you to the first sample application in
the intranet application suite-the Employee Files. This program
is responsible for creating, updating, and deleting rows from
the employee table, which is useful for human resources employees.
Also, it can be modified for the employees to update their own
information.
<P>
In <A HREF="ch14.htm" >Chapter 14</A>, &quot;Human Resources:
Benefits Maintenance,&quot; you design and create an Employee
Benefits Maintenance application. This program allows employees
to change the parameters of their company-provided benefits such
as 401K contributions and even W-4 exemptions.

<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch12.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch14.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
