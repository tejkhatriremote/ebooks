<HTML>

<HEAD>
   <TITLE>Chapter 2 -- Designing Intranet Applications
with Java</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 2</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Designing Intranet Applications
with Java</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>


<UL>
<LI><A HREF="#IntranetProgrammingwithJava" >Intranet Programming with Java</A>
<UL>
<LI><A HREF="#AppletsversusApplications" >Applets versus Applications</A>
<LI><A HREF="#ConceptualizationandDesignofIntranet" >Conceptualization and Design of Intranet Applications</A>
</UL>
<LI><A HREF="#CreatingApplets" >Creating Applets</A>
<UL>
<LI><A HREF="#TheBenefitsandDrawbacksofApplets" >The Benefits and Drawbacks of Applets</A>
<LI><A HREF="#BrowsersforYourApplets" >Browsers for Your Applets</A>
</UL>
<LI><A HREF="#PlacingAppletsinHTMLDocuments" >Placing Applets in HTML Documents</A>
<UL>
<LI><A HREF="#IntroductiontoHTML" >Introduction to HTML</A>
<LI><A HREF="#TheJavaExtensionstoHTML" >The Java Extensions to HTML</A>
</UL>
<LI><A HREF="#CreatingApplications" >Creating Applications</A>
<UL>
<LI><A HREF="#MoreOptionswithApplications" >More Options with Applications</A>
<LI><A HREF="#ApplicationsHaveaDifferentStructure" >Applications Have a Different Structure</A>
<LI><A HREF="#ApplicationsHaveDifferentSecurityCon" >Applications Have Different Security Considerations</A>
</UL>
<LI><A HREF="#RunningApplicationsandApplets" >Running Applications and Applets</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<I><B><FONT SIZE=5 COLOR=#000000>de sign \di-zin'</FONT><FONT SIZE=5>&nbsp;\
v:</FONT></B><FONT SIZE=5> to form a plan for</FONT></I>
<P>
Designing intranet applications involves slightly different methodologies
than you may be used to and opens a whole new world of possibilities.
This chapter explores the design considerations you make when
developing intranet applications with Java. You find many valuable
tips that are designed to help you become a successful intranet
programmer.
<H2><A NAME="IntranetProgrammingwithJava"><FONT SIZE=5 COLOR=#FF0000>Intranet
Programming with Java</FONT></A></H2>
<P>
Intranet applications are network-aware applications that can
retrieve hypertext documents from Web servers, connect to database
servers, and examine the contents of file servers. Some intranet
applications are considered to be clients, meaning they obtain
services from a server. Other intranet applications are considered
to be servers, meaning they provide services to clients.
<P>
Creating intranet applications without Java is difficult, especially
because the programmer must write the networking routines for
accessing remote files and databases. Fortunately, Java demystifies
intranet application programming. Java has built-in features for
working with networks in general. Using these features, you can
easily create routines to retrieve and display the contents of
a file from any computer on the network. Java also has specific
features for intranets. Using these features, you can easily create
routines that connect to databases, log network activities, and
display friendly interfaces.
<P>
Your early plans for your intranet application should focus specifically
on your programming language of choice-Java. In Java, there are
two types of programs you can create: applets and applications.
<H3><A NAME="AppletsversusApplications">Applets versus Applications</A>
</H3>
<P>
When programmers create Java applets, they are generally creating
a small application that is designed to be used within the framework
of an HTML document. Because applets are designed for use in an
HTML document, you need an external viewer to display applets.
External viewers you use to display applets include Web browsers
or applet viewers.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Note that the size of an applet is relative to its purpose. The real key to applets is they are designed to be used with an external viewer.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
When programmers create Java applications, they are generally
creating an application that is designed for standalone use. The
application does not need to be run within an external viewer,
which means you can execute a Java application directly using
the Java interpreter. If you follow Java-related discussion groups
or have read other Java books, you probably have seen references
to Java <I>apps</I>. An <I>app</I> is a slang term for a standalone
application.
<P>
While Java applications usually run on a local machine, Java applets
usually run on a remote machine. Some Java programs can run both
as standalone applications and as applets requiring an external
viewer. This is a function of the program's design. Generally,
programs that can run as both an app and an applet include a main
method required for applications and the <TT>init</TT>
and <TT>run</TT> methods used in applets.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Throughout this book, the phrase intranet application is often used to refer to both applets and applications that are designed to be used on an intranet.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="ConceptualizationandDesignofIntranet">Conceptualization
and Design of Intranet Applications</A></H3>
<P>
Before you create an intranet application, take the time to carefully
conceptualize and design the application. The first step is to
decide whether you want to create the intranet application as
a Java app or as an applet. Three questions that can help you
make this decision are
<UL>
<LI><FONT COLOR=#000000>What is the purpose of the program?</FONT>
<LI><FONT COLOR=#000000>How is the program going to be used?</FONT>
<LI><FONT COLOR=#000000>Who is going to use the program?</FONT>
</UL>
<P>
As you try to answer these questions, look around your workplace
and try to determine how best the intranet and this particular
application can serve your organization. To help you better understand
when to use applications and when to use applets, the next sections
examine applet and application creation in depth.
<H2><A NAME="CreatingApplets"><FONT SIZE=5 COLOR=#FF0000>Creating
Applets</FONT></A></H2>
<P>
The most common type of Java program is the applet. Applets are
widely used on the World Wide Web. Before you automatically create
an intranet application as a Java applet, carefully consider the
questions posed in the previous section.
<H3><A NAME="TheBenefitsandDrawbacksofApplets">The Benefits and
Drawbacks of Applets</A></H3>
<P>
When you create an applet, you want the program to be used with
an external viewer. The two most common external viewers used
with applets are Java-capable browsers and the JDK applet viewer.
The benefit of using an external viewer is that the viewer handles
starting and exiting the applet. This allows you to create applets
without menu bars or dialog boxes. Applets without menu bars and
dialog boxes generally have a very simple and friendly user interface.
<P>
While applets can have simpler interfaces and sometimes require
less code, applets inherit all the overhead of the viewer in which
they are running. This means that even if your applet needs only
50KB of memory, you are still constrained by the memory needs
of the viewer, which may be an additional 2, 4, or 8MB of memory.
On a heavily loaded workstation that is already running multiple
applications, such as a word processor or spreadsheet, the additional
memory needs of the viewer can seriously affect performance.
<P>
Sometimes the overhead involved with applets is not the major
issue, especially on intranets where security is a big concern.
Using an external viewer, you gain an additional layer of security.
This is because the security controls for applets are usually
provided by the applet security manager, which can recognize whether
applets are running on a local machine or a remote machine.
<P>
If an applet exists on the local machine and is in a directory
defined in the <TT>CLASSPATH</TT>
environment variable, the applet is loaded by the file system
loader. Applets loaded by the file system loader are allowed to
read and write files and can access native code.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note </B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Code used with Java programs and written in another programming language, such as C or C++, is called native code. Any program that can invoke native code on a computer can gain direct access to protected system areas, which is a major security 
concern.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
If an applet does not exist on the local machine or is not in
the right directory, the applet is loaded by the applet class
loader and is subject to the restrictions of the applet security
manager. These applets are generally restricted from gaining access
to the local file system and therefore cannot manipulate files
or directories on the local machine in any way. They cannot read
or write files. They cannot start another program on the local
machine. They cannot make directories. They cannot check file
size, modification date, or type.
<H3><A NAME="BrowsersforYourApplets">Browsers for Your Applets</A>
</H3>
<P>
Browsers are the most popular type of external viewer for applets.
Think of browsers as your windows to the Web; change your browser
and you get a whole new view of what is out there. Browsers are
available for virtually any computer operating system from DOS
to Mac to OS/2.
<P>
When you set up your intranet, you want to choose a Java-capable
browser. The number of Java-capable browsers is steadily increasing.
Currently, the most popular browsers that support Java include
<UL>
<LI><FONT COLOR=#000000>HotJava</FONT>
<LI><FONT COLOR=#000000>Microsoft Internet Explorer</FONT>
<LI><FONT COLOR=#000000>Netscape Navigator</FONT>
<LI><FONT COLOR=#000000>Oracle PowerBrowser</FONT>
</UL>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
As you read about Java-capable browsers, keep in mind that some versions of a browser may not support Java. In order to use Java on a particular operating system, there must be a Java runtime environment. Currently, there are Java runtime environments for 
UNIX Solaris, AIX, Macintosh, OS/2, and Windows 95/NT. There are also initiatives to develop Java runtime environments for Windows 3.1, Linux, and Amiga.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>HotJava</H4>
<P>
Not only is HotJava the first browser to support Java, it is also
the first browser written entirely in Java. HotJava is being developed
by JavaSoft. To say that JavaSoft is developing HotJava slowly
is an understatement. Until April 1996, the alpha version of HotJava
was the only version available. Unfortunately, HotJava alpha cannot
run applets written in beta or later versions of Java.
<P>
The current version of HotJava is a beta version. Fortunately,
this version supports JDK 1.0 and later. Versions of HotJava are
available for Windows 95/NT, Sun Solaris, and soon Macintosh.
<P>
Because HotJava is the first Java-capable browser, it is a popular
browser. This popularity leads to disappointment for some new
users, especially because HotJava is not feature-rich like some
of the other Java-capable browsers. You find that HotJava has
a rather plain interface and limited extras. Still, HotJava is
currently in the testing stages and may yet evolve into a full-featured
browser.
<P>
JavaSoft's HotJava page is shown in Figure 2.1. You can download
an evaluation version of HotJava at the following URL:
<P>
<A HREF="f2-1.gif" ><B>Figure 2.1 : </B><I>The HotJava page at JavaSoft.</I></A>
<BLOCKQUOTE>
<TT><A HREF="http://www.javasoft.com/java.sun.com/HotJava/index.html">http://www.javasoft.com/java.sun.com/HotJava/index.html</A>
<BR>
</TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=581><B>Unique Solutions with HotJava</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=581>
<BLOCKQUOTE>
Although HotJava is not the most advanced Java-capable browser today, there are many great reasons to choose HotJava as an intranet publishing solution, especially if you need to handle unique content or protocols. Traditional browsers are limited in the 
type of content they can handle and the protocols they can use. When you want to display documents in a unique or proprietary format such as rich text format (RTF), your traditional browser probably will not be able to handle the format directly and will 
depend on an add-on module or helper application to display the document. If an add-on for the browser is not available, you are out of luck.</BLOCKQUOTE>
<BLOCKQUOTE>
With HotJava, you can easily create your own content handler to display the nonstandard format. Creating content handlers is so easy that many developers needing unique publishing solutions turn to HotJava.</BLOCKQUOTE>
<BLOCKQUOTE>
HotJava also allows you to create protocol handlers. Traditional browsers support popular protocols, such as HTTP and FTP. If a protocol is not supported directly in the browser, there is no practical way to extend the browser to support the protocol. For 
example, most browsers do not directly support the Telnet protocol to access remote hosts. If you want to use Telnet, you start a separate application that is designed for remote host access with Telnet.</BLOCKQUOTE>
<BLOCKQUOTE>
Using HotJava, you can create a protocol handler that allows HotJava to remotely access hosts using Telnet. Direct support for a protocol eliminates error messages and confusion when users try to access nonstandard protocols linked in your published 
documents.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H4>Internet Explorer</H4>
<P>
The Internet Explorer is a feature-rich browser from Microsoft.
As one of the most powerful browsers currently available, Internet
Explorer took the Web by storm when it was first released in 1995
and quickly moved to the number two browser on the market. You
can obtain free versions of Internet Explorer for Macintosh, Windows
95, and Windows NT.
<P>
The popularity of Internet Explorer stems largely from its support
for existing HTML standards and unique extensions to HTML. Internet
Explorer supports HTML 3.2; all Netscape 1.0 and 2.0 extensions;
and powerful multimedia extensions including document soundtracks,
scrolling marquees, and inline video. Versions 3.0 and later also
feature support for Java and ActiveX. As of July 1996, Internet
Explorer was also the only browser to fully support the expanded
HTML table model specification.
<P>
The Internet Explorer home page at Microsoft is shown in Figure
2.2. From the IE home page, you can access the most current version
of the browser and obtain upgrade modules like Internet Explorer
VR. You can access the IE home page at:
<P>
<A HREF="f2-2.gif" ><B>Figure 2.2 : </B><I>Web browsing with the Internet Explorer.</I></A>
<BLOCKQUOTE>
<TT><A HREF="http://www.microsoft.com/ie/default.htm">http://www.microsoft.com/ie/default.htm</A></TT>
</BLOCKQUOTE>
<H4>Netscape Navigator</H4>
<P>
Although the Internet Explorer is vying with the Netscape Navigator
for its coveted position as king of the browsers, the Navigator
remains the hands-on favorite. The Netscape Navigator is available
for Macintosh, Windows, Windows 95/NT, and UNIX.
<P>
Netscape Navigator supports Java and has many features that make
it a great choice for your intranet. These features include support
for HTML 3.2, plug-ins, and JavaScript. With HTML 3.2, you get
support for the advanced features of HTML like tables and client-side
image maps. Plug-ins allow you to add modules for inline video,
sound, and multimedia. Using JavaScript, you can create client-side
scripts for your HTML documents.
<P>
Netscape has also introduced unique extensions to HTML with every
major release of the Navigator. Currently, Netscape and Microsoft
are playing a game of one-up-manship. Netscape Navigator is the
first browser to support HTML tables and is the model for the
table standard adopted in HTML 3.2. By supporting the expanded
HTML table model specification, Internet Explorer went one better
in version 3.0. Netscape Navigator 2.0 introduced frames, which
are mini-windows within documents. Internet Explorer 3.0 went
one better and introduced frames without borders and frames that
can float on the page. Netscape added new extensions to the beta
release of Navigator 3.0 that include support for frames without
borders.
<P>
You can download free versions of the Netscape Navigator at the
Netscape Web site, which is shown in Figure 2.3. The URL to this
site is
<P>
<A HREF="f2-3.gif" ><B>Figure 2.3 : </B><I>Web browsing with the Netscape Navigator.</I></A>
<BLOCKQUOTE>
<TT><A HREF="http://home.netscape.com/">http://home.netscape.com/</A></TT>
</BLOCKQUOTE>
<H4>Oracle PowerBrowser</H4>
<P>
Although PowerBrowser is a fairly new browser on the market, it
has all the features you expect in a browser created by Oracle.
Oracle is known for its powerful databases and not surprisingly,
PowerBrowser includes a local database called Blaze. With Blaze,
you can store and manage large amounts of data efficiently. Because
Blaze and PowerBrowser can communicate, you can easily create
HTML pages that access the Blaze database. Other features of the
browser include support for HTML 3.2 and Java.
<P>
Currently, PowerBrowser is available for Windows 3.1 and Windows
95/NT. You can obtain an evaluation version of the browser at
the site shown in Figure 2.4. You access this site by pointing
your browser to
<P>
<A HREF="f2-4.gif" ><B>Figure 2.4 : </B><I>Learning about the Oracle PowerBrowser.</I></A>
<BLOCKQUOTE>
<TT><A HREF="http://www.oracle.com/products/websystem/powerbrowser/">http://www.oracle.com/products/websystem/powerbrowser/</A></TT>
</BLOCKQUOTE>
<H2><A NAME="PlacingAppletsinHTMLDocuments"><FONT SIZE=5 COLOR=#FF0000>Placing
Applets in HTML Documents</FONT></A></H2>
<P>
When you create an applet, you need to create an HTML document
to display the applet. This section provides an introduction to
HTML and the specific extensions in HTML for Java.
<H3><A NAME="IntroductiontoHTML">Introduction to HTML</A></H3>
<P>
The Hypertext Markup Language is based on a system of markup codes
called tags. Each tag provides specific instructions to your browser.
These instructions tell the browser how to display the contents
of the document.
<P>
Most tags are used in pairs. A tag called the begin tag marks
the start of an element such as <TT>&lt;P&gt;</TT>
that marks the beginning of a paragraph. A tag called the end
tag marks the end of an element such as <TT>&lt;/P&gt;</TT>
that marks the end of a paragraph. The difference between a begin
tag and an end tag is the forward slash before the element name.
Because HTML is not case-sensitive, <TT>&lt;p&gt;</TT>
and <TT>&lt;P&gt;</TT> mean the same
thing.
<P>
Some characters in HTML are reserved, like the open and close
brackets <TT>&lt;&gt;</TT>, which
denote an HTML element. To display reserved characters in your
HTML page, you tell the browser this is a special character and
not a reserved character. To do this, you use a special element
name that begins with an ampersand and ends with a semicolon such
as <TT>&amp;lt;</TT> for the less
than symbol <TT>&lt;</TT>. When browsers
see a special character, they display the corresponding symbol
if possible.
<P>
In general, all HTML documents follow a basic structure that includes:
<UL>
<LI><FONT COLOR=#000000>A document identifier</FONT>
<LI><FONT COLOR=#000000>A header element designator</FONT>
<LI><FONT COLOR=#000000>A body element designator</FONT>
</UL>
<P>
The document identifier identifies the type of document you are
creating. Because you are creating an HTML document, your document
begins with the tag <TT>&lt;HTML&gt;</TT>
and ends with the tag <TT>&lt;/HTML&gt;</TT>.
The begin tag <TT>&lt;HTML&gt;</TT>
tells the browser the document is an HTML-formatted document and
marks the beginning of the document. The end tag <TT>&lt;/HTML&gt;</TT>
marks the end of the document and is the last item in any HTML
document.
<P>
A header element immediately follows the begin document tag <TT>&lt;HTML&gt;</TT>.
Headers are used to specify key aspects of a document such as
its title. The beginning of the header is specified with the begin
header tag <TT>&lt;HEAD&gt;</TT> and
the end of the header is specified with the end tag <TT>&lt;/HEAD&gt;</TT>.
For now, the only element you may want to use in the header is
the <TT>TITLE</TT> element, which
is used to specify a title for your document.
<P>
The body element follows the header element and contains the text
and objects you want to display in the reader's browser. Like
the header, the body has a begin tag <TT>&lt;BODY&gt;</TT>
and an end tag <TT>&lt;/BODY&gt;</TT>.
<P>
You can add attributes to most markup tags. Attributes are used
to assign default formats for text or graphics associated with
the tag. An example of a tag with an attribute is: <TT>&lt;P
ALIGN=CENTER&gt;</TT>. This <TT>ALIGN</TT>
attribute set to the value of <TT>CENTER</TT>
tells the reader's browser to center a text or graphic element
on the page.
<P>
Using the markup tags discussed in this section, you can create
the framework for an HTML document as follows:
<BLOCKQUOTE>
<TT>&lt;HTML&gt;<BR>
<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; A Cool Java Applet &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
<BR>
&lt;BODY&gt;<BR>
<BR>
Insert the actual body elements here.<BR>
<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</TT>
</BLOCKQUOTE>
<H3><A NAME="TheJavaExtensionstoHTML">The Java Extensions to HTML</A>
</H3>
<P>
The latest HTML specification-3.2-includes two elements that are
specifically designed for use with Java applets. These elements
are <TT>APPLET</TT> and <TT>PARAM</TT>.
Like most HTML elements, these new elements have many attributes
that you can use when you insert an applet in a page. Ideally,
you use only the attributes that you need for a particular applet.
<H4>Using the <TT>APPLET</TT> Element
</H4>
<P>
The <TT>APPLET</TT> element is used
to name the applet you are inserting into the HTML document and
to define its characteristics. Like most HTML tags, the <TT>APPLET</TT>
element has a begin tag <TT>&lt;APPLET&gt;</TT>
and an end tag <TT>&lt;/APPLET&gt;</TT>.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
If you are familiar with HTML, you might be wondering why there is a begin and end tag for the <TT>APPLET</TT> element. After all, all the necessary instructions are in the begin applet tag <TT>&lt;APPLET&gt;</TT>, which makes the end tag 
<TT>&lt;/APPLET&gt;</TT> seem unnecessary. Between the begin and end <TT>APPLET</TT> tags, you can define an area of the document that is displayed by browsers that are not Java-capable.
</BLOCKQUOTE>
<BLOCKQUOTE>
Here is a sample page that has an area for browsers that are not Java-capable:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>&lt;HTML&gt;<BR>
<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; Using Java &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
<BR>
&lt;BODY&gt;<BR>
<BR>
&lt;APPLET CODE=&quot;AppletFun.class&quot; WIDTH=300 HEIGHT=300&gt;<BR>
&lt;P&gt;<BR>
&lt;IMG SRC=&quot;Champions.gif&quot;&gt;<BR>
This page contains a Java applet.<BR>
You see this message because your browser does not support Java.<BR>
&lt;/P&gt;<BR>
&lt;P&gt;You should get a Java-capable browser.&lt;/P&gt;<BR>
&lt;/APPLET&gt;<BR>
<BR>
&lt;/BODY&gt;</TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The required attributes for the <TT>APPLET</TT>
element are: <TT>CODE</TT>, <TT>WIDTH</TT>,
and <TT>HEIGHT</TT>. The <TT>CODE</TT>
attribute is used to name the applet's primary class file-the
class file containing the <TT>Applet</TT>
subclass references. The <TT>WIDTH</TT>
and <TT>HEIGHT</TT> attributes define
the initial width and height of the applet's display area in pixels.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Testing the display of the applet in your document at various display resolutions is extremely important. The most popular display resolution on Windows-based pcs is 640<FONT FACE="Symbol">&#165;</FONT>480 with an increasing number of users moving to 
larger displays such as 800<FONT FACE="Symbol">&#165;</FONT>600 or 1024<FONT FACE="Symbol">&#165;</FONT>768. On a Macintosh, screen size determines the pixel size of the screen. Currently, many Mac users have a 13&quot; screen, which offers a display 
resolution close to 640<FONT FACE="Symbol">&#165;</FONT>480. On UNIX systems and primarily Sun Microsystems SPARCs, the display resolution is often set at 1154<FONT FACE="Symbol">&#165;</FONT>864.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Here is a sample HTML document using the required attributes:
<BLOCKQUOTE>
<TT>&lt;HTML&gt;<BR>
<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; Java to the Max &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
<BR>
&lt;BODY&gt;<BR>
<BR>
&lt;APPLET CODE=&quot;CoolApplet.class&quot; WIDTH=300 HEIGHT=300&gt;
<BR>
&lt;/APPLET&gt;<BR>
<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</TT>
</BLOCKQUOTE>
<P>
In the example, the HTML document and the applet <TT>CoolApplet</TT>
must be in the same directory. If you plan to place applets in
a different directory, you must use the optional <TT>CODEBASE</TT>
attribute. The <TT>CODEBASE</TT> attribute
lets you indicate the URL path to the applet. In this example,
the directory called <TT>java/apps/</TT>
contains the class files for the applet:
<BLOCKQUOTE>
<TT>&lt;HTML&gt;<BR>
<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; Java to the Max &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
<BR>
&lt;BODY&gt;<BR>
<BR>
&lt;APPLET CODE=&quot;CoolApplet.class&quot; CODEBASE=&quot;java/apps/&quot;
WIDTH=300 HEIGHT=300&gt;<BR>
&lt;/APPLET&gt;<BR>
<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;<BR>
</TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
URL paths are either relative or absolute. In the example, the URL path is relative, meaning the applet is located relative to the current directory. To specify an absolute path, you use a full hypertext reference, such as:<BR>
<TT><A HREF="http://www.javasoft.com/applets/applets/NervousText">http://www.javasoft.com/applets/applets/NervousText</A></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Additional optional attributes for the <TT>APPLET</TT>
element include: <TT>ALIGN</TT>, <TT>HSPACE</TT>,
<TT>VSPACE</TT>, <TT>NAME</TT>,
and <TT>ALT</TT>. You can use these
attributes to enhance the display of the applet and the layout
of your document.
<P>
The <TT>ALIGN</TT> attribute is used
to specify the alignment of the applet within the document. The
acceptable values are shown in Table 2.1.<BR>
<P>
<CENTER><B>Table 2.1. The alignment attribute values and their
meaning.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=167><I>Attribute Value</I></TD><TD WIDTH=423><I>Meaning</I>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=167><TT>ALIGN=ABSBOTTOM</TT>
</TD><TD WIDTH=423>Align the bottom of the applet with the lowest item on its line.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=167><TT>ALIGN=ABSMIDDLE</TT>
</TD><TD WIDTH=423>Align applet with the middle of the largest item on its line.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=167><TT>ALIGN=BASELINE</TT>
</TD><TD WIDTH=423>Align the bottom of the applet with the baseline of the text associated with the applet.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=167><TT>ALIGN=BOTTOM</TT>
</TD><TD WIDTH=423>Same as <TT>ALIGN=BASELINE</TT>.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=167><TT>ALIGN=CENTER</TT>
</TD><TD WIDTH=423>Align applet in the center of the document.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=167><TT>ALIGN=LEFT</TT>
</TD><TD WIDTH=423>Align applet with the left side of the document.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=167><TT>ALIGN=MIDDLE</TT>
</TD><TD WIDTH=423>Align applet with the middle of the baseline of the text associated with the applet.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=167><TT>ALIGN=RIGHT</TT>
</TD><TD WIDTH=423>Align applet with the right side of the document.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=167><TT>ALIGN=TEXTTOP</TT>
</TD><TD WIDTH=423>Align applet with the top of the tallest text on its line.
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=167><TT>ALIGN=TOP</TT>
</TD><TD WIDTH=423>Align applet with the topmost item on its line.
</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT>HSPACE</TT> and <TT>VSPACE
</TT>attributes are used to specify the amount of white
space around the applet. <TT>HSPACE</TT>
defines the horizontal space on either side of the applet and
<TT>VSPACE</TT> defines the vertical
space above and below the applet. The value assigned to these
attributes is defined in pixels. You use <TT>HSPACE=10</TT>
and <TT>VSPACE=10</TT> in the <TT>&lt;APPLET&gt;
</TT>tag to have ten pixels of space around the applet.
<P>
The <TT>ALT</TT> attribute defines
alternative text to display when the browser recognizes the <TT>&lt;APPLET&gt;</TT>
tag but is not capable of running applets. Currently, this attribute
is not used widely with applets.
<P>
The final optional attribute for the <TT>APPLET</TT>
element is the <TT>NAME</TT> attribute.
Using the <TT>NAME</TT> attribute,
you can assign a designator for the applet that allows it to be
targeted by other applets on the page. When applets can target
each other, they can interact, which allows you to update applets
on the page based on what the user is doing with another applet.
The value for the <TT>NAME</TT> attribute
is a unique designator, such as <TT>NAME=APPLET1</TT>
or <TT>NAME=APPLET2</TT>.
<H4>Using the <TT>PARAM</TT> Element
</H4>
<P>
Using the <TT>PARAM</TT> element,
you can pass general purpose parameters to an applet. The <TT>PARAM</TT>
element is one of the few elements in HTML that uses only a begin
tag. Because each <TT>&lt;PARAM&gt;</TT>
tag is used to set a specific parameter to specific value, you
can use multiple <TT>&lt;PARAM&gt;</TT>
tags in your document. Place these tags between the begin and
end <TT>&lt;APPLET&gt;</TT> tags.
This is the only element you can insert between the <TT>APPLET</TT>
tags that Java-capable Web browsers takes advantage of when they
run an associated applet.
<P>
Applets access the parameters set in the <TT>&lt;PARAM&gt;</TT>
tag using the <TT>getParameter()</TT>
method. The <TT>&lt;PARAM&gt;</TT>
tag has two required attributes: <TT>NAME</TT>
and <TT>VALUE</TT>. The <TT>NAME</TT>
attribute assigns the name that the <TT>getParameter()</TT>
method in your applet searches for. The <TT>VALUE</TT>
attribute is used to set a specific value for the parameter.
<P>
Here is an example document using the <TT>PARAM</TT>
element that sets a parameter called <TT>TEXT</TT>:
<BLOCKQUOTE>
<TT>&lt;HTML&gt;<BR>
<BR>
&lt;HEAD&gt;<BR>
&lt;TITLE&gt; Java to the Max With Parameters &lt;/TITLE&gt;<BR>
&lt;/HEAD&gt;<BR>
<BR>
&lt;BODY&gt;<BR>
<BR>
&lt;APPLET CODE=&quot;MessageBoard&quot; WIDTH=600 HEIGHT=200&gt;
<BR>
&lt;PARAM NAME=TEXT VALUE= &quot;Thanks for visiting!&quot;&gt;
<BR>
&lt;/APPLET&gt;<BR>
<BR>
&lt;/BODY&gt;<BR>
&lt;/HTML&gt;</TT>
</BLOCKQUOTE>
<P>
In your Java applet, you read the value set for the <TT>TEXT</TT>
parameter as follows:
<BLOCKQUOTE>
<TT>Msg = getParameter (&quot;TEXT&quot;);</TT>
</BLOCKQUOTE>
<H2><A NAME="CreatingApplications"><FONT SIZE=5 COLOR=#FF0000>Creating
Applications</FONT></A></H2>
<P>
Unfortunately, Java programmers don't create applications as often
as they create applets. One reason for this is that many programmers
don't understand when to use applications.
<H3><A NAME="MoreOptionswithApplications">More Options with Applications</A>
</H3>
<P>
Although applications and applets are similar, there are more
options available when working with an application. Primarily
this is because applications are standalone programs that require
you to create the user interface. For example, the most common
method for exiting an application is a Quit or Exit option on
a pull-down menu.
<P>
When you create an application, you need to build a menu bar,
add menus to the menu bar, and options for the menus. One of the
options on your menu system is the Quit or Exit option. While
having to create your own interface outside the context of a browser
may seem like a drawback, you actually have more options available
to you when you build a unique interface for your application.
<H3><A NAME="ApplicationsHaveaDifferentStructure">Applications
Have a Different Structure</A></H3>
<P>
Generally, applications are run by the Java interpreter on a local
machine, which eliminates the need to create an HTML page to view
your Java program. Additionally, because you do not need an external
viewer to run applications, applications can provide users with
better performance. Better performance translates to improved
response times and, often, increased productivity.
<P>
All applications require a static <TT>main()</TT>
method. Unlike C++, Java's <TT>main()</TT>
method must be part of the public class that defines an application.
When you run an application, the Java interpreter executes the
<TT>main()</TT> method and in turn,
the <TT>main()</TT> method creates
instances of objects and lets the objects control the execution
of the program.
<H3><A NAME="ApplicationsHaveDifferentSecurityCon">Applications
Have Different Security Considerations</A></H3>
<P>
Because applications are run using the Java interpreter, they
are not subject to the security constraints of the applet security
manager. This gives applications a substantial advantage over
applets and means applications have unrestricted access to the
client's file system. Therefore, unless you specifically set up
restrictions otherwise, standalone applications can
<UL>
<LI><FONT COLOR=#000000>Read from and write to files.</FONT>
<LI><FONT COLOR=#000000>Create directories.</FONT>
<LI><FONT COLOR=#000000>Check file system, type, and modification
date.</FONT>
<LI><FONT COLOR=#000000>Start other programs on the client.</FONT>
</UL>
<P>
Although being able to access the local file system provides an
advantage non-local applets do not have, a lack of security constraints
can cause problems. Therefore, if security is a major issue with
your program, you want to carefully consider whether you need
a strict security model.
<P>
Standalone applications can also run native code. This means that
if you have source code <BR>
in other programming languages that you want to use with your
intranet applications, you <BR>
probably want to create an application. Keep in mind that native
code, such as C or C++, is compiled for a specific operating system.
Thus if you use native code, you lose the platform independence
and widespread portability you gain by programming with Java.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
Most organizations that develop software have large libraries of native code. Before you automatically decide that using native code is a done deal, study the current Java APIs. You may be pleasantly surprised when you find that functions you've coded in 
C, C++, SmallTalk, or some other programming language are already available in Java.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="RunningApplicationsandApplets"><FONT SIZE=5 COLOR=#FF0000>Running
Applications and Applets</FONT></A></H2>
<P>
Most intranets have many different types of servers and follow
a loose client-server model. In an ideal client-server environment,
clients maintain the application front end, the user interface,
and the binary executable for the client interface. Servers maintain
the application back end, the server software, and data. Using
a strict client-server model reduces traffic on the intranet and
balances the demand for resources around the network.
<P>
In the real world, many network applications use a file server
model where the server has both the binary executable for the
client interface and the necessary data files for the application.
Because clients execute applications by way of the server and
retrieve data from the server, you often have dramatically more
network traffic and heavy loads on your file servers.
<P>
As you design your intranet applications, keep the client server
and the file server models in mind. Because Java applications
are invoked by the Java interpreter running on a local machine
and can retrieve files from remote servers, your Java applications
generally follow a client-server model. Java applets, on the other
hand, usually run on a remote machine and because of this generally
follow a file server model.
<P>
Although it seems you should immediately choose the client-server
model over the file server model, there are benefits to following
a file server model. The two key benefits of the file server model
are related to storage and maintenance.
<P>
With the client-server model, all workstations generally have
a copy of the intranet application on their file system which
requires space on the workstation's hard drive. Since there are
copies of the application on all your workstations, you must copy
new versions of the application whenever you make revisions, which
may create a maintenance nightmare. With the file server model,
there is usually only one copy of the application and it is on
the file server, which makes updating the application very easy.
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A></H2>
<P>
After reading this chapter, you should have a clear understanding
of the design issues related to Java programming. The fundamental
decision you must make is whether to create your intranet application
as an applet or as an app. As you've seen, there are many reasons
why you may choose to design an applet rather than an application
and vice versa. Before you create your intranet applications,
consider the underlying issues surrounding applet and app design,
including security, file access, the ability to use native code,
and network design.
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch1.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch3.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
