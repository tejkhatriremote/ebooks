<HTML>

<HEAD>
   <TITLE>Chapter 16 --Online In/Out Board</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 16</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Online In/Out Board</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>


<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#ApplicationDesign" >Application Design</A>
<LI><A HREF="#DatabaseDesign" >Database Design</A>
<LI><A HREF="#Implementation" >Implementation</A>
<UL>
<LI><A HREF="#UserInterface" >User Interface</A>
<LI><A HREF="#DatabaseAccess" >Database Access</A>
<LI><A HREF="#ARefreshTimer" >A Refresh Timer</A>
</UL>
<LI><A HREF="#ProgrammingConsiderations" >Programming Considerations</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<A NAME="Introduction"><I><B><FONT SIZE=5>lunch \lunch\ n:</FONT></B><FONT SIZE=5>
a meal eaten at midday</FONT></I></A>
<H2><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></H2>
<P>
Welcome to your fourth sample intranet application. Lighter on
the complexity side than the last one, this program utilizes the
existing employee table to provide an Online In/Out Board.
<P>
You might not be familiar with the concept. Many companies use
a chalkboard or whiteboard with each employee's name on it. Next
to the name of the employee is his or her location, indicating
whether he or she is in or out of the office. These boards are
commonly placed where administrative assistants can easily see
who is in or out. There is an online version that is representative
of the same concept.
<P>
This chapter will cover the following topics in regard to the
Online In/Out Board application:
<UL>
<LI><FONT COLOR=#000000>Application Design-I'll go over the general
design of the application. This includes functionality and user
interface considerations.</FONT>
<LI><FONT COLOR=#000000>Database Design-This section will cover
the database requirements for this application. Here you'll examine
the data model used to support the application design.</FONT>
<LI><FONT COLOR=#000000>Implementation-This section will cover
how the application and database design are implemented.</FONT>
<LI><FONT COLOR=#000000>Programming Considerations-In this section,
I'll recap the implementation and summarize any difficult programming
situations that have arisen.</FONT>
</UL>
<P>
This four step format will be used throughout all of the sample
application chapters. Hopefully, it will provide you with valuable
insight and ideas for creating your own intranet applications.
<H2><A NAME="ApplicationDesign"><FONT SIZE=5 COLOR=#FF0000>Application
Design</FONT></A></H2>
<P>
This application is one of the simpler applications in the book.
Once the application has been connected to a data source, it will
present the user with a list of all the employees on file. In
addition, their current location, in or out, will be shown.
<P>
Figure 16.1 is the proposed user interface for the Online In/Out
Board program.
<P>
<A HREF="f16-1.gif" ><B>Figure 16.1 : </B><I>The Online In/Out Board user interface.</I></A>
<P>
The interface will utilize a <TT>List</TT>
component to display employees, and a single Toggle button will
toggle the employee's status.
<P>
Once the list has been presented, the user may select an employee
and press the Toggle button. This button toggles the current in/out
indicator from yes to no, or vice versa, depending on the original
value of the indicator.
<P>
The Toggle button will not become enabled until an employee has
been chosen. This visually informs the user that he or she can
then do something with his or her selection.
<P>
Figure 16.2 shows the application with a selection made.
<P>
<A HREF="f16-2.gif" ><B>Figure 16.2 : </B><I>The Online In/Out Board with the employee Karen Kenny selected</I></A><I>.</I>
<P>
In addition to pressing the Toggle button, the user will be able
to double-click the selection to achieve the same effect. (See
Figure 16.3).
<P>
<A HREF="f16-3.gif" ><B>Figure 16.3 : </B><I>The Online In/Out Board after we've toggled Mr. Kenny out</I></A><I>.</I>
<P>
Finally, the list needs to be refreshed periodically. A timer
should be used to automatically refresh the list at a configurable
period of time. The default is 60 seconds. You can override this
default value by placing a <TT>refresh.rate</TT>
property into your configuration file. 60 seconds is probably
an optimal setting. If you set it any lower, you'll just be clogging
your network and database with unnecessary requests. If you go
higher, you may miss out on changes at lunch- time.
<H2><A NAME="DatabaseDesign"><FONT SIZE=5 COLOR=#FF0000>Database
Design</FONT></A></H2>
<P>
This application utilizes the employee table that was defined
in <A HREF="ch13.htm" >Chapter 13</A>, &quot;Employee Files.&quot;
It toggles the <TT>in_out_ind</TT>
column value from <TT>Y</TT> to <TT>N</TT>,
and vice versa. For your convenience, the layout for the employee
table is shown in Table 16.1.<BR>
<P>
<CENTER><B>Table 16.1  Layout for Employee Table</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=183><I>Description</I></TD><TD WIDTH=134><I>Column Name</I>
</TD><TD WIDTH=110><I>Type</I></TD><TD WIDTH=59><CENTER><I>Null?</I></CENTER>
</TD><TD WIDTH=71><CENTER><I>Default</I></CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>Employee ID</TD><TD WIDTH=134>emp_id</TD><TD WIDTH=110>number( 5 )
</TD><TD WIDTH=59><CENTER>N</CENTER></TD><TD WIDTH=71><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>First Name</TD><TD WIDTH=134>first_name</TD>
<TD WIDTH=110>char( 40 )</TD><TD WIDTH=59><CENTER>N</CENTER></TD>
<TD WIDTH=71><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>Middle Name</TD><TD WIDTH=134>mid_name</TD>
<TD WIDTH=110>char( 40 )</TD><TD WIDTH=59><CENTER>Y</CENTER></TD>
<TD WIDTH=71><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>Last Name</TD><TD WIDTH=134>last_name</TD><TD WIDTH=110>char( 40 )
</TD><TD WIDTH=59><CENTER>N</CENTER></TD><TD WIDTH=71><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>Social Security Number</TD><TD WIDTH=134>ssn
</TD><TD WIDTH=110>char( 15 )</TD><TD WIDTH=59><CENTER>Y</CENTER>
</TD><TD WIDTH=71><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>Address Line 1</TD><TD WIDTH=134>addr_line_1
</TD><TD WIDTH=110>char( 80 )</TD><TD WIDTH=59><CENTER>Y</CENTER>
</TD><TD WIDTH=71><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>Address Line 2</TD><TD WIDTH=134>addr_line_2
</TD><TD WIDTH=110>char( 80 )</TD><TD WIDTH=59><CENTER>Y</CENTER>
</TD><TD WIDTH=71><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>City</TD><TD WIDTH=134>city</TD><TD WIDTH=110>char( 80 )
</TD><TD WIDTH=59><CENTER>Y</CENTER></TD><TD WIDTH=71><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>State</TD><TD WIDTH=134>state</TD><TD WIDTH=110>char( 80 )
</TD><TD WIDTH=59><CENTER>Y</CENTER></TD><TD WIDTH=71><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>Zip Code</TD><TD WIDTH=134>zip_code</TD><TD WIDTH=110>char( 20 )
</TD><TD WIDTH=59><CENTER>Y</CENTER></TD><TD WIDTH=71><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>Salary</TD><TD WIDTH=134>salary</TD><TD WIDTH=110>number( 7,2 )
</TD><TD WIDTH=59><CENTER>Y</CENTER></TD><TD WIDTH=71><CENTER>None</CENTER>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>Home Phone Number</TD><TD WIDTH=134>home_phone_nbr
</TD><TD WIDTH=110>char( 20 )</TD><TD WIDTH=59><CENTER>Y</CENTER>
</TD><TD WIDTH=71><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>Work Extension Number</TD><TD WIDTH=134>work_ext_nbr
</TD><TD WIDTH=110>char( 20 )</TD><TD WIDTH=59><CENTER>Y</CENTER>
</TD><TD WIDTH=71><CENTER>None</CENTER></TD></TR>
<TR VALIGN=TOP><TD WIDTH=183>In/Out Indicator</TD><TD WIDTH=134>in_out_ind
</TD><TD WIDTH=110>char( 1 )</TD><TD WIDTH=59><CENTER>N</CENTER>
</TD><TD WIDTH=71><CENTER>'N'</CENTER></TD></TR>
</TABLE></CENTER>
<H2><A NAME="Implementation"><FONT SIZE=5 COLOR=#FF0000>Implementation</FONT></A>
</H2>
<P>
In the rest of this chapter I will discuss the implementation
of the Online In/Out Board program. I'll first discuss the user
interface and how it was created. Secondly, I'll discuss the database
access used in the program. Finally, I'll cover any programming
pitfalls that came up during the application construction.
<P>
Each sample application in this book uses a different approach
to developing the user interface. This variety will show you the
different ways you can go about doing your own interfaces. Hopefully,
you will get a nice cross-section of many different styles and
choose the one that suits you the best.
<H3><A NAME="UserInterface">User Interface</A></H3>
<P>
To achieve the design goal presented above, you do not need special
user interface components; the stock <TT>BorderLayout</TT>
is sufficient. You'll also employ the <TT>List</TT>
class and a <TT>Button</TT>.
<P>
The following is the user interface construction code for the
Employee program:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;List&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;InOutBoardUI( SimpleDBJiflet jiflet )
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( jiflet
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout( new
BorderLayout() );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList = new
List();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList.setFont(
new Font( &quot;Helvetica&quot;, Font.BOLD, 14 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;Center&quot;,
empList );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList.enable();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JifPanel p = new
JifPanel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout( new
FlowLayout( FlowLayout.CENTER, 5, 5 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton.setLabel(&quot;Toggle&quot;
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.add( saveButton
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;South&quot;,
p );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Set
the focus to the first field...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFocus( empList
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
First, set the layout to a new <TT>BorderLayout</TT>.
The <TT>List</TT> component is created
and placed in the center of the layout. This is your employee
list. Referring to Figure 16.1, you'll see that this list expands
on all sides to fill the space.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=588><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=588>
<BLOCKQUOTE>
The default layout for the <TT>JifPanel</TT> class is <TT>FlowLayout</TT>. Because the <TT>SimpleDBUI</TT> class extends the <TT>JifPanel</TT> class, its default layout is also the <TT>FlowLayout</TT>. Therefore, if you want a different layout, you must 
create it and set it here.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Your Toggle button is next. In order to get the automatic record
saving mechanism to work in your favor, I'll rename the Save button
to Toggle. This button is also disabled.
<P>
Overriding the <TT>saveRecord()</TT>
method and placing any customized row saving codes in it frees
you from monitoring for special events, or even a new button's
events. For example, if you want to change the Save button's name
to something like Play, you could then override the <TT>saveRecord()</TT>
method to receive notification of this being clicked. I'll cover
this in the database access section later in this chapter.
<P>
Figure 16.4 illustrates the layout of this application.
<P>
<A HREF="f16-4.gif" ><B>Figure 16.4 : </B><I>The layout of the Online In/Out Board.</I></A>
<H4>Handling the Toggle Button</H4>
<P>
You want your Toggle button to enable, or light up, when the user
has made a selection. This is easily done by looking for the correct
events. In your <TT>handleEvent()</TT>
method, use the <TT>LIST_SELECT</TT>
and <TT>LIST_DESELECT</TT> events
to enable and disable the button:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//*<B>&nbsp;</B>handleEvent<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>*
<BR>
//****************************************************************************
<BR>
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;</B>public<B>&nbsp;</B>boolean<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;</B>handleEvent(<B>&nbsp;</B>Event<B>&nbsp;</B>event<B>&nbsp;</B>)
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;</B>{<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>//<B>&nbsp;&nbsp;&nbsp;&nbsp;</B>Turn<B>&nbsp;</B>on/off<B>&nbsp;</B>buttons...
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>if<B>&nbsp;</B>(<B>&nbsp;</B>event.target<B>&nbsp;</B>instanceof<B>&nbsp;</B>List<B>&nbsp;</B>)
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>{<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>switch<B>&nbsp;</B>(<B>&nbsp;</B>event.id<B>&nbsp;</B>)
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>{
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>case<B>&nbsp;</B>Event.LIST_SELECT:
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>getUIPanel().saveButton.enable();
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>return(<B>&nbsp;</B>true<B>&nbsp;</B>);
<BR>
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>case<B>&nbsp;</B>Event.LIST_DESELECT:
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>getUIPanel().saveButton.disable();
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>return(<B>&nbsp;</B>true<B>&nbsp;</B>);
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>}
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>}<BR>
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>return(<B>&nbsp;</B>super.handleEvent(<B>&nbsp;</B>event<B>&nbsp;</B>)<B>&nbsp;</B>);
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;</B>}</TT>
</BLOCKQUOTE>
<P>
Your Toggle button is really the Save button in sheep's clothing:
You change the text on it to say <TT>Toggle</TT>.
Changing the text does not alter its behavior. It still generates
<TT>JifMessage.SAVE</TT> application
messages in your framework.
<P>
It still generates these messages because, instead of checking
the text of the button when the initial <TT>ACTION_EVENT</TT>
event is generated, you check the event's target with the member
instance variables for all the buttons that you created in your
base <TT>SimpleDBUI</TT> class. Checking
the text is a potentially unreliable way to match commands.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=542><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=542>
<BLOCKQUOTE>
Try not to rely on the text of a component to identify which component it is. This practice is somewhat unreliable and can be misleading. Also, if someone comes along later and changes your program, they could introduce a new component with duplicate text. 
This could potentially harm your program. Be careful!</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
What does this all mean to you? It means you can reliably change
the text of the Save button. When this occurs, you will receive
notification of the event by having your <TT>saveRecord()</TT>
method called.
<P>
To handle the Toggling of the selected employee, you will utilize
this <TT>saveRecord()</TT> method:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//*<B>&nbsp;</B>saveRecord<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>*
<BR>
//****************************************************************************
<BR>
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;</B>public<B>&nbsp;</B>boolean<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;</B>saveRecord()<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;</B>{<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</B>return(<B>&nbsp;</B>toggleListItem(<B>&nbsp;</B>(<B>&nbsp;</B>(<B>&nbsp;</B>InOutBoardUI<B>&nbsp;</B>)getUIPanel()<B>&nbsp;</B>).empList<B>&nbsp;</B>)<B>&nbsp;</B>);
<BR>
<B>&nbsp;&nbsp;&nbsp;&nbsp;</B>}</TT>
</BLOCKQUOTE>
<P>
Retrieve the user interface panel's <TT>empList</TT>
variable and pass it to your Toggling function for processing.
The result is returned.
<H4>Capturing Double-Clicks</H4>
<P>
In addition to the user pressing the Toggle button, you want the
user to be able to double-click the mouse on an employee. This
double-clicking will toggle the in/out status of that employee.
<P>
This is handled in your <TT>action()</TT>
method. When a <TT>List</TT> component
receives a double-click, it generates an <TT>ACTION_EVENT</TT>
event with itself as the target. What you need to do is capture
this event. Call your Toggling routine:
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;list&nbsp;was&nbsp;double-clicked
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;event.target&nbsp;instanceof&nbsp;List&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(&nbsp;toggleListItem(&nbsp;(&nbsp;List&nbsp;)event.target&nbsp;)&nbsp;);</TT>
</BLOCKQUOTE>
<P>
The <TT>List</TT> is the target of
the event, therefore you can simply pass it along to your Toggling
method.
<H3><A NAME="DatabaseAccess">Database Access</A></H3>
<P>
This program reuses the <TT>EmployeeRecord</TT>
object that was introduced in <A HREF="ch13.htm" >Chapter 13</A>.
It is a versatile class that represents a single row in the employee
table. This <TT>DBRecord</TT> derivation
knows how to create, read, update, and delete records from the
employee table.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The <TT>EmployeeRecord</TT> and other database classes are reused in several other applications. They have been placed in their own package along with other shared code. This package is called <TT>jif.common</TT>. It contains all the common classes between 
all the applications.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
There are two main database access areas to this program: the
initial status retrieval and the storage of new statuses. I'll
examine each one individually.
<H4>Retrieving All the Statuses</H4>
<P>
At startup, and during the lifetime of the application, the database
needs to be queried, and the results displayed for the user. These
results are massaged data columns taken from the database.
<P>
Retrieve the status of all employees for display:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//*&nbsp;loadPanel&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;loadPanel()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Make&nbsp;sure&nbsp;we're&nbsp;cool&nbsp;to&nbsp;go...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;getConnector()&nbsp;==&nbsp;null&nbsp;||&nbsp;!getConnector().connected()&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;sql&nbsp;=&nbsp;&quot;select&nbsp;*&nbsp;from&nbsp;emp&nbsp;order&nbsp;by&nbsp;last_name&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Clear&nbsp;out&nbsp;the&nbsp;old&nbsp;stuff...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().clearScreen();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;getConnector().getStatement().execute(&nbsp;sql&nbsp;)&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet&nbsp;rs&nbsp;=&nbsp;getConnector().getStatement().getResultSet();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;row&nbsp;=&nbsp;0;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(&nbsp;rs.next()&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmployeeRecord&nbsp;er&nbsp;=&nbsp;new&nbsp;EmployeeRecord(&nbsp;rs&nbsp;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setDBRecord(&nbsp;er&nbsp;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().moveToScreen();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Keep&nbsp;a&nbsp;map...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowMap.insertElementAt(&nbsp;er,&nbsp;row&nbsp;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row++;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(&nbsp;SQLException&nbsp;e&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorLog(&nbsp;&quot;Error&nbsp;during&nbsp;loading:&nbsp;&quot;&nbsp;+&nbsp;e.toString()&nbsp;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
This method issues an SQL query that returns all of the employees
in your employee table. Each returned row is stored into an <TT>EmployeeRecord</TT>
object. The stored row is then placed into a <TT>Vector</TT>
for later use.
<P>
Notice that the employee list is never populated here because
you've placed that code in the <TT>moveToScreen()</TT>
method of your user interface class. It is only there that data
is moved to the screen. Before it can move data to your list,
though, you need to tell the base class which <TT>DBRecord</TT>
to use. This is done with the call to <TT>setDBRecord()</TT>.
<P>
The <TT>moveToScreen()</TT> code is
simple:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//*&nbsp;moveToScreen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;moveToScreen()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;getJiflet().getDBRecord()&nbsp;==&nbsp;null&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Cast&nbsp;one&nbsp;off...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmployeeRecord&nbsp;er&nbsp;=&nbsp;(&nbsp;EmployeeRecord&nbsp;)getJiflet().getDBRecord();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;s&nbsp;=&nbsp;er.first_name.trim()&nbsp;+&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;er.last_name.trim()&nbsp;+&nbsp;&quot;&nbsp;is&nbsp;&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;er.in_out_ind.equalsIgnoreCase(&nbsp;&quot;Y&quot;&nbsp;)&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;+=&nbsp;&quot;in&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;+=&nbsp;&quot;out&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList.addItem(&nbsp;s&nbsp;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
Here, you retrieve the <TT>EmployeeRecord</TT>
from your jiflet, concatenating the first and last names with
a string representing their present location-in or out.
<H4>Toggling an Employee's Status</H4>
<P>
Once an employee has been selected, and the intention to toggle
his or her status has been made clear, the <TT>toggleListItem()</TT>
method comes into play:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//*&nbsp;toggleListItem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;toggleListItem(&nbsp;List&nbsp;theList&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newInOut;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idx&nbsp;=&nbsp;theList.getSelectedIndex();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;si&nbsp;=&nbsp;theList.getSelectedItem();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Break&nbsp;down&nbsp;the&nbsp;selection...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringTokenizer&nbsp;st&nbsp;=&nbsp;new&nbsp;StringTokenizer(&nbsp;si,&nbsp;&quot;&nbsp;&quot;&nbsp;);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;first_name&nbsp;=&nbsp;st.nextToken();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;last_name&nbsp;=&nbsp;st.nextToken();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;skip_me&nbsp;=&nbsp;st.nextToken();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;in_out&nbsp;=&nbsp;st.nextToken();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Rebuild&nbsp;the&nbsp;string...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;si&nbsp;=&nbsp;first_name.trim()&nbsp;+&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;last_name.trim()&nbsp;+&nbsp;&quot;&nbsp;is&nbsp;&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;in_out.equals(&nbsp;&quot;in&quot;&nbsp;)&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;si&nbsp;+=&nbsp;&quot;out&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newInOut&nbsp;=&nbsp;&quot;N&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;si&nbsp;+=&nbsp;&quot;in&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newInOut&nbsp;=&nbsp;&quot;Y&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Try&nbsp;and&nbsp;save&nbsp;it...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;sql&nbsp;=&nbsp;&quot;update&nbsp;emp&nbsp;set&nbsp;in_out_ind&nbsp;=&nbsp;'&quot;&nbsp;+&nbsp;newInOut&nbsp;+&nbsp;&quot;'&nbsp;&quot;&nbsp;+
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;where&nbsp;emp_id&nbsp;=&nbsp;&quot;&nbsp;+
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;(&nbsp;EmployeeRecord&nbsp;)rowMap.elementAt(&nbsp;idx&nbsp;)&nbsp;).emp_id;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getConnector().getStatement().executeUpdate(&nbsp;sql&nbsp;);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;statStr&nbsp;=&nbsp;first_name&nbsp;+&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;last_name&nbsp;+&nbsp;&quot;&nbsp;has&nbsp;been&nbsp;marked&nbsp;&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;newInOut.equals(&nbsp;&quot;Y&quot;&nbsp;)&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statStr&nbsp;+=&nbsp;&quot;in&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statStr&nbsp;+=&nbsp;&quot;out&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showStatus(&nbsp;statStr&nbsp;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch&nbsp;(&nbsp;SQLException&nbsp;e&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorLog(&nbsp;&quot;Error&nbsp;during&nbsp;save:&nbsp;&quot;&nbsp;+&nbsp;e.toString()&nbsp;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showStatus(&nbsp;&quot;Error&nbsp;during&nbsp;save:&nbsp;&quot;&nbsp;+&nbsp;e.toString()&nbsp;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(&nbsp;false&nbsp;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Replace&nbsp;the&nbsp;visual...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theList.replaceItem(&nbsp;si,&nbsp;idx&nbsp;);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Reselect...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theList.select(&nbsp;idx&nbsp;);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;I&nbsp;handled&nbsp;it!
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(&nbsp;true&nbsp;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
The <TT>toggleListItem()</TT> method
is unique because it rebuilds the current string and replaces
it in the list. After the user selects an employee, this method
strips the displayed line down to its components. It removes the
&quot;In&quot; or &quot;Out&quot; from the end of the line and
appends the toggled equivalent. The result is stored in the database.
<P>
Only after a successful save to the database is the string replaced
in the list, showing the new status.
<H3><A NAME="ARefreshTimer">A Refresh Timer</A></H3>
<P>
The last user interface piece that you need to create is the refresh
timer. This little guy is responsible for going out and refreshing
the list of employees.
<P>
The refresh timer is necessary because your target users might
have this running at all times. Other employees will utilize this
and its underlying database. If it is never refreshed, it would
show only the employee's status that the user toggled and the
initial values loaded. Using a refresh, however, you can keep
your data up-to-date!
<P>
First, create an <TT>EventTimer</TT>
to be your refresh timer. If you remember back in <A HREF="ch8.htm" >Chapter 8</A>,
&quot;Utility Classes,&quot; the <TT>EventTimer</TT>
is ideal for adding to programs where the underlying interface
cannot or should not be changed. This is a case of that. You don't
want to change the in-terface of your derived class. It could
end up causing other problems down the road, not to mention other
people may be using this class. You don't want to change things
on them.  The use of this <TT>EventTimer</TT>
is perfect.
<BLOCKQUOTE>
Creating&nbsp;your&nbsp;timer&nbsp;is&nbsp;a&nbsp;matter&nbsp;of&nbsp;using&nbsp;the&nbsp;<B>new</B>&nbsp;operator:
<BR>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Get&nbsp;the&nbsp;refresh&nbsp;rate&nbsp;from&nbsp;the&nbsp;configuration&nbsp;file...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;refreshRate&nbsp;=
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer.parseInt(&nbsp;getParameter(&nbsp;&quot;refresh.rate&quot;,&nbsp;&quot;60000&quot;&nbsp;)&nbsp;);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Create&nbsp;a&nbsp;timer&nbsp;to&nbsp;refresh...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myTimer&nbsp;=&nbsp;new&nbsp;EventTimer(&nbsp;this,&nbsp;refreshRate&nbsp;);</TT>
</BLOCKQUOTE>
<P>
You also query your configuration properties list for a <TT>refresh.rate</TT>
property. If it isn't there, you default to a one minute default
refresh rate. Otherwise the refresh rate is used.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=579><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=579>
<BLOCKQUOTE>
Remember, the <TT>refresh.rate</TT> configuration parameter should hold values that specify the number of milliseconds between time-outs. Be careful what you place in there.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Finally, when a timer event does occur, you refresh your list:
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Did&nbsp;my&nbsp;timer&nbsp;fire?
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;myTimer&nbsp;==&nbsp;arg&nbsp;)
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showStatus(&nbsp;&quot;Refreshing...&quot;&nbsp;);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Reload&nbsp;the&nbsp;panel...
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadPanel();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showStatus(&nbsp;&quot;Refreshed!&quot;&nbsp;);
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(&nbsp;true&nbsp;);
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<H2><A NAME="ProgrammingConsiderations"><FONT SIZE=5 COLOR=#FF0000>Programming
Considerations</FONT></A></H2>
<P>
Aside from the database access, this application is one of the
simplest in your intranet application suite. It does nothing more
than toggle a single column from <TT>Y</TT>
to <TT>N</TT>, then back again.
<P>
This application presented you with very little challenge. You
needed to present an intuitive interface to the user, while making
it quick and easy to use. You did this by using the <TT>List</TT>
class.
<P>
To recap, this application introduced the following Java intranet
programming topics:
<UL>
<LI><FONT COLOR=#000000>Refresh timer usage:</FONT>
<LI>You used an <TT>EventTimer</TT>
to refresh your list of employees periodically. This keeps the
list fresh for people who need to know!
<LI><FONT COLOR=#000000>Overriding row storage method:</FONT>
<LI>You overrode the <TT>saveRecord()</TT>
method of main class to call your <TT>toggleListItem()</TT>
method.
<LI><FONT COLOR=#000000>No SQL generation here:</FONT>
<LI>This application is completely free of SQL generation. It
is never generated for any components.
</UL>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter introduced you to the fourth sample application in
your intranet application suite: the Online In/Out Board. This
program is only responsible for updating a single column in the
employee table. This program will be useful for any employee who
needs to know the whereabouts of another employee. Likely uses
will be for receptionists who take messages for individuals.
<P>
In <A HREF="ch17.htm" >Chapter 17</A>, &quot;Online Employee Phonebook,&quot;
you will design and create an Employee Phonebook application.
This program allows employees to look at the phone numbers of
their coworkers.

<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch15.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch17.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
