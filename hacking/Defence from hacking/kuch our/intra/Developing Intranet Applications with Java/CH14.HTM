<HTML>

<HEAD>
   <TITLE>Chapter 14 -- Human Resources: Benefits Maintenance</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 14</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Human Resources: Benefits Maintenance</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#ApplicationDesign" >Application Design</A>
<LI><A HREF="#DatabaseDesign" >Database Design</A>
<LI><A HREF="#Implementation" >Implementation</A>
<UL>
<LI><A HREF="#UserInterface" >User Interface</A>
<LI><A HREF="#DatabaseAccess" >Database Access</A>
</UL>
<LI><A HREF="#ProgrammingConsiderations" >Programming Considerations</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
In <A HREF="ch13.htm" >Chapter 13</A>, &quot;Employee Files,&quot;
you set out to create an application that can create, update,
and delete the employee files. In this chapter, you design and
implement an application that takes this concept one step further.
It not only extends the use of the infamous employee table, but
it also allows the users of your intranet to make changes to their
company benefits.
<P>
This chapter follows the same format as the last chapter. This
chapter covers the following topics in regard to the Benefits
Maintenance application:
<UL>
<LI><FONT COLOR=#000000>Application Design-This section goes over
the general design of the application, including functionality
and user interface considerations.</FONT>
<LI><FONT COLOR=#000000>Database Design-This section covers the
database requirements for this application. It examines the data
model used to support the application design.</FONT>
<LI><FONT COLOR=#000000>Implementation-This section covers how
the application and database design are implemented.</FONT>
<LI><FONT COLOR=#000000>Programming Considerations-This section
recaps the implementation and summarizes any difficult programming
situations that have arisen.</FONT>
</UL>
<P>
This four step format is used throughout all of the sample application
chapters. Hopefully it provides you with valuable insight and
ideas for creating your own intranet applications.
<H2><A NAME="ApplicationDesign"><FONT SIZE=5 COLOR=#FF0000>Application
Design</FONT></A></H2>
<P>
This application, not unlike the Employee Files, is semi-modeless.
The user can flow through the program and only some options are
available, depending on the state of the current row. The application
prompts the user to store any unsaved changes he has made. This
is done before any actions such as New or Choose are processed.
<P>
Figure 14.1 is the proposed user interface for the Benefits Maintenance
program.
<P>
<A HREF="f14-1.gif" ><B>Figure 14.1 </B><I>The benefits maintenance user interface.</I></A>
<P>
This application requires a parent row to exist in the employee
table. This forces you to make the user choose an employee to
work with. After choosing that employee, this application allows
the user to manipulate four benefits-related data items:
<UL>
<LI><FONT COLOR=#000000>Exemptions-These are the number of </FONT>exemptions
the employee has claimed on his or her IRS W-4 form.
<LI><FONT COLOR=#000000>Married-The rate at which </FONT>your
income is taxed in America is partially based upon the number
of exemptions you claim and your marital status. This checkbox
allows users to specify whether they are married.
<LI><FONT COLOR=#000000>Plan Participant-More and </FONT>more
companies are starting retirement plans these days. These 401K
or profit sharing plans allow employees to invest a portion of
their income. This portion is usually indicated by a percentage.
Many companies even match a certain amount of the percentage invested.
<LI><FONT COLOR=#000000>Payroll Deduction-This field </FONT>allows
users to enter the amount of their payroll to be deducted and
placed into the retirement plan.
</UL>
<P>
This program also reuses the employee pick list. This pick list
is stored in the <TT>jif.common</TT>
package so that it can be reused easily.
<H2><A NAME="DatabaseDesign"><FONT SIZE=5 COLOR=#FF0000>Database
Design</FONT></A></H2>
<P>
This application is responsible for manipulating employee benefit
rows. These rows should be stored in a single table. Because not
all employees have benefits to track, this information belongs
in its own table. The table used in this sample application is
called the employee benefits table.
<P>
The information stored in the employee benefits table corresponds
to the information that is to be edited, as described earlier.
Table 14.1 shows the columns needed to store in the benefits table.
<P>
<CENTER><B>Table 14.1. The employee benefits table layout.</B></CENTER>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=125><I>Description</I></TD><TD WIDTH=114><I>Column Name</I>
</TD><TD WIDTH=82><I>Type</I></TD><TD WIDTH=99><I>Can Be Null?</I>
</TD><TD WIDTH=128><I>Default</I></TD></TR>
<TR VALIGN=TOP><TD WIDTH=125><TT>Employee ID</TT>
</TD><TD WIDTH=114>emp_id</FONT></TD><TD WIDTH=82>number(5)</FONT>
</TD><TD WIDTH=99>N</FONT></TD><TD WIDTH=128>None</FONT>
</TD></TR>
<TR VALIGN=TOP><TD WIDTH=125><TT>Number of Exemptions</TT>
</TD><TD WIDTH=114>exemptions_nbr</FONT>
</TD><TD WIDTH=82>number(2)</FONT></TD><TD WIDTH=99>N</FONT>
</TD><TD WIDTH=128>0</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=125><TT>Married Indicator</TT>
</TD><TD WIDTH=114>married_ind</FONT></TD>
<TD WIDTH=82>char(1)</FONT></TD><TD WIDTH=99>N</FONT>
</TD><TD WIDTH=128>'N'</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=125><TT>Plan Participant Indicator</TT>
</TD><TD WIDTH=114>plan_part_ind</FONT></TD>
<TD WIDTH=82>char(1)</FONT></TD><TD WIDTH=99>N</FONT>
</TD><TD WIDTH=128>'N'</FONT></TD></TR>
<TR VALIGN=TOP><TD WIDTH=125><TT>Payroll Deduction Percentage</TT>
</TD><TD WIDTH=114>payroll_ded_pct</FONT>
</TD><TD WIDTH=82>number(3)</FONT></TD><TD WIDTH=99>N</FONT>
</TD><TD WIDTH=128>0</FONT></TD></TR>
</TABLE></CENTER>
<P>
Figure 14.2 shows the entity relationship diagram for the database
as it stands in this chapter. As you get deeper into the sample
applications, you see the entity relationship diagram grow to
encompass all the tables.
<P>
<A HREF="f14-2.gif" ><B>Figure 14.2 : </B><I>The entity relationship diagram including the benefits table</I></A>
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=481><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=481>
<BLOCKQUOTE>
Entity relationship diagrams are discussed in <A HREF="ch15.htm" >Chapter 15</A>.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
In addition to creating a table, you create a database synonym
for the table. This allows everyone to access the table with the
same name and not have to worry about the schema in which the
table resides.
<P>
This table is going to be a child of the employee table, which
means that no rows can exist in this table unless there is a corresponding
row in the employee table. Enforcing the parent-child relationship
is called <I>referential integrity</I>. It ensures the <I>integrity</I>
of the <I>references</I> in the database. Referential integrity
is most often achieved through the use of <I>foreign keys</I>.
<P>
A foreign key is a link from a child table back to a parent table.
This link allows the database to impose restrictions on many database
actions, such as the following:
<UL>
<LI><FONT COLOR=#000000>Parent rows cannot be deleted while child
rows exist.</FONT>
<LI><FONT COLOR=#000000>The parent's primary key cannot be updated
if child rows exist.</FONT>
<LI><FONT COLOR=#000000>Child rows cannot be inserted without
an existing parent row.</FONT>
<LI><FONT COLOR=#000000>Child rows cannot be updated without an
existing parent row.</FONT>
</UL>
<P>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=584><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=584>
<BLOCKQUOTE>
There is one exception to the first foreign key restriction. Some databases allow you to perform what is called a <I>delete cascade</I>. This means that the deletion of a parent row cascades down and deletes all child rows. This can be very useful in 
complex database structures where tens or hundreds of child rows exist. However, with power comes danger and responsibility. You can do some serious harm to the database if this is done unwittingly. Be careful how you use the delete cascade
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
Listing 14.1 shows the SQL commands to create the employee benefits
table.
<HR>
<BLOCKQUOTE>
<B>Listing 14.1. The employee benefits table creation SQL.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>/*&nbsp;&nbsp;&nbsp;&nbsp;Create the
table */<BR>
create table emp_benft_t<BR>
(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;emp_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(
5 ) not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;exemptions_nbr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number(
2 ) default 0 not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;married_ind&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(
1 ) default 'N' not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;plan_part_ind&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char(
1 ) default 'N' not null,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;payroll_ded_pct&nbsp;&nbsp;&nbsp;&nbsp;number(
3 ) default 0 not null<BR>
);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create a primary key */<BR>
alter table emp_benft_t<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add<BR>
&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primary key<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emp_id
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create a foreign key */<BR>
alter table emp_benft_t<BR>
&nbsp;&nbsp;&nbsp;&nbsp;add<BR>
&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreign key<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emp_id
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;references emp_t
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;);<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Grant access for the table to the user
role */<BR>
grant select,insert,delete,update on emp_benft_t to ia_user_r
;<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Drop any existing public synonym */
<BR>
drop public synonym emp_benft ;<BR>
<BR>
/*&nbsp;&nbsp;&nbsp;&nbsp;Create a public synonym for our table
*/<BR>
create public synonym emp_benft for emp_benft_t ;</TT>
</BLOCKQUOTE>
<HR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=565><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=565>
<BLOCKQUOTE>
The SQL in Listing 14.1 is quite generic, but it might not work on every database. This particular SQL has been tested with Oracle.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The first SQL clause creates the table <TT>emp_benft_t</TT>.
The second clause creates a primary key using the <TT>emp_id</TT>
column. Making this the primary key ensures that the values in
the column are unique across all rows.
<P>
The third SQL clause creates the foreign key. The foreign key
in this table is the <TT>emp_id</TT>
column. This column points back to, or references, the <TT>emp_id</TT>
column in the <TT>emp_t</TT> table.
<P>
Lastly, the public synonym <TT>emp_benft</TT>
is created for the table <TT>emp_benft_t</TT>.
<P>
After you create this table, you are ready to build the application.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=536><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=536>
<BLOCKQUOTE>
You must create the <TT>emp_t</TT> (Employee) table before you can create the <TT>emp_benft_t</TT> (Employee Benefits) table. Otherwise, the <TT>emp_benft_t</TT> SQL fails!
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<H2><A NAME="Implementation"><FONT SIZE=5 COLOR=#FF0000>Implementation</FONT></A>
</H2>
<P>
The rest of this chapter discusses the implementation of the Benefits
Maintenance program. The first feature discussed is the user interface
and how it is created. Secondly, the database access used in the
program is discussed. Finally, some of the programming considerations
that come up during the application construction are discussed.
<P>
Each sample application in this book uses a different approach
to developing the user interface. This variety shows you the different
ways you can do your own interfaces. Hopefully, you get a cross-section
of many different styles and can choose the one that suits you
the best.
<H3><A NAME="UserInterface">User Interface</A></H3>
<P>
The screen layout for this application is presented in a manner
that is achieved through the use of a <TT>GridBagLayout</TT>.
This is exactly the same approach that was taken in the Employee
Files application. The difference here is that a <TT>Label</TT>
variable for each label is not created.
<P>
Listing 14.2 shows the user interface construction code for the
Employee Benefits program.
<HR>
<BLOCKQUOTE>
Listing 14.2. The Employee Benefits interface construction source
code.<BR>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
emp_id;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
full_name;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exemptions_nbr;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifCheckbox&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;married_ind;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifCheckbox&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plan_part_ind;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextField&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;payroll_ded_pct;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;BenefitsUI( SimpleDBJiflet jiflet )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( jiflet
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GridBagLayout
gbl = new GridBagLayout();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int cw[] = { 14,
14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;14,
14, 14, 14 }; // 17<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rh[] = { 14,
14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 }; // 12<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double rc14_0[]
= { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.columnWidths
= new int[ 17 ];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.rowHeights
= new int[ 12 ];<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.columnWeights
= new double[ 17 ];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gbl.rowWeights
= new double[ 12 ];<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
cw, 0, gbl.columnWidths, 0, 17 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
cw, 0, gbl.rowHeights, 0, 7 );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
rc14_0, 0, gbl.columnWeights, 0, 17 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(
rc14_0, 0, gbl.rowWeights, 0, 7 );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout( gbl
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Do
the labels...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Employee ID:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=0&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Name:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=1&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Exemptions:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=3&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Married:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=4&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Plan Participant:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=5&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
new Label( &quot;Payroll Deduction:&quot;, Label.RIGHT ),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;anchor=east;x=0;y=6&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add
some fields...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emp_id = new JifTextField(
&quot;&quot;, &quot;emp_id&quot;, true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emp_id.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
emp_id, &quot;x=1;y=0;width=5;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;full_name = new
JifTextField();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;full_name.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
full_name, &quot;x=1;y=1;width=13;fill=horizontal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exemptions_nbr
= new JifTextField( &quot;&quot;, &quot;exemptions_nbr&quot; );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
exemptions_nbr, &quot;x=1;y=3;width=7;fill=horizontal&quot; );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;married_ind =
new JifCheckbox( &quot;married_ind&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
married_ind, &quot;x=1;y=4&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plan_part_ind
= new JifCheckbox( &quot;plan_part_ind&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
plan_part_ind, &quot;x=1;y=5&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;payroll_ded_pct
= new JifTextField( &quot;&quot;, &quot;payroll_ded_pct&quot;
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
payroll_ded_pct, &quot;x=1;y=6;width=7;fill=horizontal&quot; );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Disable
buttons...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chooseButton.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deleteButton.disable();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Add
the buttons...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
newButton, &quot;x=15;y=0;width=2;fill=horizontal&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
saveButton, &quot;x=15;y=2;width=2;fill=horizontal&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
deleteButton, &quot;x=15;y=4;width=2;fill=horizontal&quot; );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addWithConstraints(
chooseButton, &quot;x=15;y=6;width=2;fill=horizontal&quot; );
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Tell
which are numeric...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emp_id.setNumeric(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exemptions_nbr.setNumeric(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;payroll_ded_pct.setNumeric(
true );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Set
the focus to the first field...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFocus( exemptions_nbr
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<HR>
<P>
A notable item about this user interface (and other <TT>GridBagLayout</TT>
jiflets in this book) is that the grid settings are hard-coded.
A permanent 12 row by 17 column grid is used for the user interface.
Components are placed within the grid only after the grid is set.
<P>
Also of note is the fact that you disable the employee ID and
name <TT>JifTextField</TT> components:
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emp_id.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;full_name.disable();</TT>
</BLOCKQUOTE>
<P>
This forces them into a read-only mode. They accept no input and
cannot be changed. In addition, their background color is shaded
to indicate the disablement.
<P>
You disable these fields because they are references from the
parent row. This parent row is chosen by using the Choose button
and the employee pick list.
<H4>The Employee Pick List Revisited</H4>
<P>
The <TT>EmployeePickList</TT> class
is developed for the Employee Files application in <A HREF="ch15.htm" >Chapter 15</A>.
However, it can be reused without modification in this application
as well.
<P>
The <TT>EmployeePickList</TT> object
is created and displayed in the main program.
<P>
When the user presses the Choose button-which is one of the <TT>JifMessage</TT>s
(<TT>JifMessage.chOOSE</TT>)-an <TT>ACTION_EVENT</TT>
event is generated and sent to the parent of the panel. After
it is received, you need to open up the employee pick list. Before
you can switch employees though, you must store any changes the
user has made to the current row. The following code snippet is
from the <TT>action()</TT> method
of the Benefits program:
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( event.target == getUIPanel() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch
( ( ( Integer )arg ).intValue() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case
JifMessage.chOOSE:<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( getDBRecord().didDataChange() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chgDlg
= new ResponseDialog( this,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Data
Change&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;The
record has changed.\n&quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Do
you wish to save your changes?&quot;,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Yes,No,Cancel&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chgDlg.show();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chooseEmployee();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
If there are no changes to save, the method <TT>chooseEmployee()</TT>
is called. This method creates and displays an <TT>EmployeePickList</TT>
object.
<P>
When the user selects a pick list item or closes the pick list
window, it generates an <TT>ACTION_EVENT</TT>
event. You capture this event and act accordingly. Here's what
this looks like:
<BLOCKQUOTE>
<TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Handle
picklist events...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( event.target
instanceof EmployeePickList )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rv
= ( ( Integer )arg ).intValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
EmployeePickList&nbsp;&nbsp;&nbsp;&nbsp; epl = ( EmployeePickList
)event.target;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( rv != -1 )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Disable
save on choose...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().saveButton.disable();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Enable
delete...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().deleteButton.enable();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Display
it on the screen...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmployeeRecord
er = epl.getRecord( rv );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Get
a benefits record...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BenefitsRecord
br = getBenefitsRow( er );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Set
it in there...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setDBRecord(
( DBRecord )br );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().moveToScreen();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Kill
the dialog box...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epl.hide();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;epl.dispose();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Reset
the focus...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().requestFocus();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;We
handled it...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
true );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
If the pick list returns a <TT>-1</TT>
value, you know that the user has canceled his selection. Otherwise,
the value returned is the row number that is selected. You retrieve
the <TT>EmployeeRecord</TT> at that
row, make it the current row, and request that the user interface
display it.
<P>
Finally, a little cleanup is in order. You <TT>hide()</TT>
and <TT>dispose()</TT> of the pick
list window and then reset the focus back to your window.
<H4>Moving Data to the Screen</H4>
<P>
Each <TT>SimpleDBUI</TT> derived class
has a <TT>moveToScreen()</TT> method
that moves the data from the instance variables to the screen.
The <TT>BenefitsUI</TT> class is no
different. However, there are characteristics of this user interface
that require special programming:
<OL>
<LI>The use of indicator columns. These columns hold a yes or
no value. However, you want them to be represented on the screen
as a checkbox.
<LI>Some of the displayed information is from a second table (the
employee table). You need to retrieve this information and display
it.
</OL>
<P>
Let's examine how you accomplish each of these programming tasks.
<H5>Indicator Columns</H5>
<BLOCKQUOTE>
An indicator column is one that typically holds a Boolean value.
Usually, this is represented by a <TT>Y</TT>
or an <TT>N</TT> for yes or no, respectively.
However, to make it easy for the user to interact with this format,
a checkbox can be used.
</BLOCKQUOTE>
<BLOCKQUOTE>
The checkbox is a binary representation as well. It can be checked
or not checked. You extend this use to say that if the checkbox
is checked, it is a <TT>Y</TT>, or
yes. If it is not checked, this is an <TT>N</TT>,
or no.
</BLOCKQUOTE>
<BLOCKQUOTE>
So setting the checkbox to the right value is as simple as checking
the value of the indicator. The code for checking the marriage
indicator is as follows:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>if ( er.married_ind != null )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;married_ind.setState( er.married_ind.equalsIgnoreCase(
&quot;Y&quot; ) );</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;married_ind.setState( false );</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
If the <TT>er.married_ind</TT> variable
is not null, you set the state of the checkbox to checked if the
married indicator is equal to <TT>Y</TT>.
Otherwise, you set it to <TT>N</TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
You must distinguish this null value from <TT>N</TT>
because a <TT>NullPointerException</TT>
is thrown if it is null, and you try to compare its value with
<TT>Y</TT>.
</BLOCKQUOTE>
<H5>Displaying Parent Record Values</H5>
<BLOCKQUOTE>
The second interesting programming technique used in this application
is displaying information from a second database table.
</BLOCKQUOTE>
<BLOCKQUOTE>
As you know, your employee benefits table is a child table of
the employee table. This means that no real employee information
is stored in the benefits table. Because you want to display the
name of the employee you're working with, you need to retrieve
that employee's name from the employee table.
</BLOCKQUOTE>
<BLOCKQUOTE>
You can easily retrieve the employee name using the <TT>CodeLookerUpper</TT>
class. This handy class accepts the following information in its
constructor:
</BLOCKQUOTE>
<UL>
<LI><FONT COLOR=#000000>A database connector</FONT>
<LI><FONT COLOR=#000000>A table name</FONT>
<LI><FONT COLOR=#000000>A key column name</FONT>
<LI><FONT COLOR=#000000>A string representing the columns to select
from the database</FONT>
</UL>
<BLOCKQUOTE>
Armed with this information, the <TT>CodeLookerUpper</TT>
concatenates it to build an SQL <TT>select</TT>
statement. The <TT>select</TT> statement
ends up like this:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>select &lt;string columns&gt; from &lt;table
name&gt; where &lt;key column&gt; = ?</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
The bracketed items are filled in with information from the constructor.
The question mark (<TT>?</TT>) is
filled in when the SQL is actually used. The <TT>CodeLookerUpper</TT>
contains a single method called <TT>lookupCode()</TT>.
This is where the SQL statement is completed and executed.
</BLOCKQUOTE>
<BLOCKQUOTE>
Therefore, the code to initialize a <TT>CodeLookerUpper</TT>
is as follows:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>CodeLookerUpper clu = new CodeLookerUpper(
getJiflet().getConnector(),<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;emp&quot;, &quot;emp_id&quot;, &quot;first_name
|| ' ' || last_name&quot; );</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
You initialize it with the connector from your current jiflet,
the employee table's synonym <TT>emp</TT>,
the <TT>emp</TT> table's primary key
<TT>emp_id</TT>, and the two columns
you need to have concatenated at the server.
</BLOCKQUOTE>
<BLOCKQUOTE>
Then you ask the object to retrieve the data for you:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>full_name.setText( clu.lookupCode( er.emp_id
) );</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
You pass the <TT>lookupCode()</TT>
method the employee ID from your current <TT>EmployeeRecord</TT>.
The result is moved directly into the <TT>full_name</TT>
<TT>JifTextField</TT>.<BR>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=571><B>Caution</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=571>
<BLOCKQUOTE>
The <TT>CodeLookerUpper</TT> expects that the first column returned by a query is a string column. If it is not, an <TT>SQLException</TT> is thrown. You can return multiple columns as you have done here. However, they must be concatenated at the database 
level.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H3><A NAME="DatabaseAccess">Database Access</A></H3>
<BLOCKQUOTE>
The Employee Benefits program communicates with the database through
the use of an <TT>EmployeeBenefitsRecord</TT>
object. This <TT>DBRecord</TT> derivation
knows how to create, read, update, and delete rows from the employee
benefits table. The following are the instance variables of this
class:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Constants&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static String&nbsp;&nbsp;&nbsp;&nbsp;
TABLE_NAME = &quot;emp_benft&quot;;<BR>
<BR>
//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;A variable for
each table column...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emp_id
= -1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exemptions_nbr
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;married_ind
= &quot;N&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plan_part_ind
= &quot;N&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;payroll_ded_pct
= 0;<BR>
</TT>
</BLOCKQUOTE>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=556><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=556>
<BLOCKQUOTE>
The <TT>EmployeeBenefitsRecord</TT> and other database classes are reused in several other applications. They are placed in their own package along with other shared code. This package is called <TT>jif.common</TT>. It contains all the common classes 
between all the applications.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<BLOCKQUOTE>
Because the pick list returns an <TT>EmployeeRecord</TT>,
you need to retrieve the <TT>BenefitsRecord</TT>
if one exists for this employee. This is done like so:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
getBenefitsRow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public BenefitsRecord<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getBenefitsRow( EmployeeRecord er )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BenefitsRecord&nbsp;&nbsp;&nbsp;&nbsp;
br = new BenefitsRecord();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql
= &quot;&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql = &quot;select
* from emp_benft where &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;emp_id
= &quot; + Integer.toString( er.emp_id );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( getConnector().getStatement().execute( sql ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
rs = getConnector().getStatement().getResultSet();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( rs.next() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;br.parseResultSet(
rs );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;br.clear();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;br.emp_id
= er.emp_id;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorLog(
sql + &quot; generated: &quot; + e.toString() );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(
null );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Return
the record...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( br );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
Given an <TT>EmployeeRecord</TT>,
you search the table for an associated row in the employee benefits
table. If it is found, you allow the <TT>BenefitsRecord</TT>
to parse the results. Otherwise, the default values are returned.
<H2><A NAME="ProgrammingConsiderations"><FONT SIZE=5 COLOR=#FF0000>Programming
Considerations</FONT></A></H2>
<P>
This application builds upon your base of Employee Files and adds
more functionality. It provides your intranet users with the ability
to modify their benefits parameters at will. You again used the
stock <TT>SimpleDBUI</TT> and <TT>SimpleDBJiflet</TT>
classes as a base, allowing you to quickly put together this application.
<P>
This application introduces the following Java intranet programming
topics:
<UL>
<LI><FONT COLOR=#000000>Reusing classes from other applications:</FONT>
<LI>You reuse the <TT>EmployeePickList</TT>
class created in <A HREF="ch15.htm" >Chapter 15</A>.
<LI><FONT COLOR=#000000>Database foreign keys:</FONT>
<LI>You create a foreign key from the new table referencing the
employee table.
<LI><FONT COLOR=#000000>Disabling fields to make them display
only:</FONT>
<LI>You disable text fields in the user interface to make them
read-only.
<LI><FONT COLOR=#000000>Using indicator fields in the database:</FONT>
<LI>You use indicator fields in the database and change their
representation on the screen to checkboxes. This allows the user
to click with the mouse instead of typing a yes or no.
</UL>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<BLOCKQUOTE>
This chapter introduces you to the second sample application in
the intranet application suite-the Benefits Maintenance application.
This program is responsible for creating, updating, and deleting
rows from the employee benefits table, and it is useful for normal
employees who want to manage their own benefits.
</BLOCKQUOTE>
<BLOCKQUOTE>
In <A HREF="ch15.htm" >Chapter 15</A>, &quot;Conference Room Scheduling,&quot;
you design and create an application that allows employees to
schedule conference rooms for meetings well into the future.
</BLOCKQUOTE>

<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch13.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch15.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
