<HTML>

<HEAD>
   <TITLE>appendix  F -- Java Intranet Framework Reference</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>appendix F</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Java Intranet Framework Reference</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>


<UL>
<LI><A HREF="#jifawt" >jif.awt</A>
<UL>
<LI><A HREF="#CalendarPanel" >CalendarPanel</A>
<LI><A HREF="#Effects" >Effects</A>
<LI><A HREF="#ImagePanel" >ImagePanel</A>
<LI><A HREF="#JifCheckbox" >JifCheckbox</A>
<LI><A HREF="#JifDialog" >JifDialog</A>
<LI><A HREF="#JifLabel" >JifLabel</A>
<LI><A HREF="#JifPanel" >JifPanel</A>
<LI><A HREF="#JifPanePanel" >JifPanePanel</A>
<LI><A HREF="#JifTabPanel" >JifTabPanel</A>
<LI><A HREF="#JifTabSelector" >JifTabSelector</A>
<LI><A HREF="#JifTextArea" >JifTextArea</A>
<LI><A HREF="#JifTextField" >JifTextField</A>
<LI><A HREF="#MessageBox" >MessageBox</A>
<LI><A HREF="#PickList" >PickList</A>
<LI><A HREF="#ResponseDialog" >ResponseDialog</A>
<LI><A HREF="#SimpleDBUI" >SimpleDBUI</A>
<LI><A HREF="#StatusBar" >StatusBar</A>
</UL>
<LI><A HREF="#jifjiflet" >jif.jiflet</A>
<UL>
<LI><A HREF="#JifApplication" >JifApplication</A>
<LI><A HREF="#JifMessage" >JifMessage</A>
<LI><A HREF="#Jiflet" >Jiflet</A>
<LI><A HREF="#SimpleDBJiflet" >SimpleDBJiflet</A>
</UL>
<LI><A HREF="#jiflog" >jif.log</A>
<UL>
<LI><A HREF="#DiskLog" >DiskLog</A>
<LI><A HREF="#Log" >Log</A>
<LI><A HREF="#ScreenLog" >ScreenLog</A>
</UL>
<LI><A HREF="#jifsql" >jif.sql</A>
<UL>
<LI><A HREF="#CodeLookerUpper" >CodeLookerUpper</A>
<LI><A HREF="#Connector" >Connector</A>
<LI><A HREF="#DBConnector" >DBConnector</A>
<LI><A HREF="#DBRecord" >DBRecord</A>
<LI><A HREF="#MSQLConnector" >MSQLConnector</A>
<LI><A HREF="#MSSQLServerConnector" >MSSQLServerConnector</A>
<LI><A HREF="#ODBcconnector" >ODBcconnector</A>
<LI><A HREF="#OracleConnector" >OracleConnector</A>
<LI><A HREF="#OracleSequence" >OracleSequence</A>
<LI><A HREF="#SequenceGenerator" >SequenceGenerator</A>
<LI><A HREF="#SQLFactory" >SQLFactory</A>
<LI><A HREF="#SybaseConnector" >SybaseConnector</A>
</UL>
<LI><A HREF="#jifutil" >jif.util</A>
<UL>
<LI><A HREF="#CallbackTimer" >CallbackTimer</A>
<LI><A HREF="#ConfigProperties" >ConfigProperties</A>
<LI><A HREF="#EventTimer" >EventTimer</A>
<LI><A HREF="#FileDate" >FileDate</A>
<LI><A HREF="#TimeOut" >TimeOut</A>
</UL>
</UL>
<HR>
<P>
This appendix is a reference guide for the Java Intranet Framework
(JIF) classes that were developed in this book. Listed here are
all the <TT>public</TT> and <TT>protected</TT>
members of each JIF class.
<P>
In this appendix, you'll look at each package in JIF and then
each class within each package. This appendix is meant as a reference
for you to go back to instead of constantly looking at the source
code.
<H2><A NAME="jifawt"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">jif.awt</TT></FONT></A>
</H2>
<P>
The <TT>jif.awt</TT> package contains
many classes that extend and enhance several of the stock Java
awt classes. These include a calendar, a three-dimensional container,
and a tabbed panel, just to mention a few.
<H3><A NAME="CalendarPanel"><TT><FONT SIZE=4 FACE="Courier">CalendarPanel</TT></FONT></A>
</H3>
<P>
This class is a <TT>JifPanel</TT>
that adds calendar functionality. Each day in the calendar is
a button. When pressed, the button sends an <TT>ACTION_EVENT</TT>
event to its parent container. The selected date is passed in
the argument.
<BLOCKQUOTE>
<TT>public class CalendarPanel extends JifPanel
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public CalendarPanel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public CalendarPanel( int style );<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public Methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Date getSelectedDate();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void hilightButton( Button button,
boolean onOff );<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="Effects"><TT><FONT SIZE=4 FACE="Courier">Effects</TT></FONT></A>
</H3>
<P>
This interface defines the constants that a class can use to provide
three-dimensional effects. It contains no methods.
<BLOCKQUOTE>
<TT>public interface Effects<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public Text Styles<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
TEXT_NORMAL = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
TEXT_LOWERED = 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
TEXT_RAISED = 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
TEXT_SHADOW = 3;<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public Text placements<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
CENTER = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
LEFT = 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
RIGHT = 2;<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public 3D Looks<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
NONE = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
FLAT = 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
GROOVED = 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
LOWERED = 4;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
ROUNDED = 8;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
RAISED = 16;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
RIDGED = 32;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;
CAPTION = 64;<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="ImagePanel"><TT><FONT SIZE=4 FACE="Courier">ImagePanel</TT></FONT></A>
</H3>
<P>
This class extends <TT>JifPanel</TT>
to display a graphic image. You can specify the x and y offset
with which the image is displayed within the rectangle.
<BLOCKQUOTE>
<TT>public class ImagePanel extends JifPanel
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected class variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Image myImage;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int offset;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public ImagePanel( String imageToUse,
int offset ) <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws FileNotFoundException;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public ImagePanel( String imageToUse )
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws FileNotFoundException;
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void addNotify();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void sizeSelf();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint( Graphics g );<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="JifCheckbox"><TT><FONT SIZE=4 FACE="Courier">JifCheckbox</TT></FONT></A>
</H3>
<P>
This class extends Java's <TT>Checkbox</TT>
adding tab recognition and SQL code generation. The <TT>JifCheckbox</TT>
produces a <TT>Y</TT> or <TT>N</TT>
value in SQL. It is perfect for use with indicators.
<BLOCKQUOTE>
<TT>public class JifCheckbox extends Checkbox
implements SQLFactory<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected class variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected String columnName = &quot;&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean dataChange = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean initialized = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean primaryKey = false;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean isNumericData = false;
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifCheckbox();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifCheckbox( String columnName
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifCheckbox( String columnName,
boolean primaryKey );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setColumnName( String columnName
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getColumnName();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setNumeric( boolean onOff
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setPrimaryKey( boolean primaryKey
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean isPrimaryKey();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setState( boolean state );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean didDataChange();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void reset();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String generateUpdateSQL( boolean
addSet );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String generateInsertSQL( boolean
addParen );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getSQL( boolean forWhere
);<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="JifDialog"><TT><FONT SIZE=4 FACE="Courier">JifDialog</TT></FONT></A>
</H3>
<P>
This class extends Java's <TT>Dialog</TT>
class and adds the capability to center itself on the entire screen
or within its parent's frame.
<BLOCKQUOTE>
<TT>public class JifDialog extends Dialog
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifDialog( Frame parent, boolean
modal );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifDialog( Frame parent, String
title, boolean modal );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void center( boolean onScreen );
<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="JifLabel"><TT><FONT SIZE=4 FACE="Courier">JifLabel</TT></FONT></A>
</H3>
<P>
This class extends <TT>JifPanel</TT>
to implement a multiline label. The implementation is quite simple,
thus the object has no added functionality.
<BLOCKQUOTE>
<TT>public class JifLabel extends JifPanel
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifLabel( String s );<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="JifPanel"><TT><FONT SIZE=4 FACE="Courier">JifPanel</TT></FONT></A>
</H3>
<P>
This class extends Java's <TT>Panel</TT>
and adds many features-the coolest of which are some three-dimensional
effects. These effects are defined by the <TT>Effects</TT>
interface and implemented by this class. In addition, the <TT>JifPanel</TT>
implements the <TT>JifMessage</TT>
interface allowing it to send <TT>JifMesssage</TT>
messages.
<BLOCKQUOTE>
<TT>public class JifPanel extends Panel implements
Effects, JifMessage<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Constants<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int TAB_KEY;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int TEXT_OFFSET;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected class variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textStyle
= TEXT_NORMAL;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textPlacement
= CENTER;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style
= NONE;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thickness
= 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myWidth;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myHeight;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
text = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skipLeft
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skipTop
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skipBottom
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skipRight
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentPos
= 0;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifPanel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifPanel( int style );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifPanel( String text );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifPanel( int style, String text
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifPanel( int style, int width,
int height, String text );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifPanel( int style, int width,
int height );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void addNotify();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void addWithConstraints( Component
comp, String constraints );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected String buildComponentList( JifPanel
me, Vector valueList, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector columnList,
String whereClause );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void drawFrame( Graphics g );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void drawtext( Graphics g );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Component findChild( JifPanel
p, String name );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int findNextComponent( int startPos
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int findPreviousComponent( int
startPos );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void focusForward();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void focusBackward();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String generateInsertSQL( String
tableName );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String generateUpdateSQL( String
tableName );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void getMetrics();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean isStyleSet( int check );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Dimension minimumSize();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint( Graphics g );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Dimension preferredSize();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void sendJifMessage( Event event,
int msg );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setChildValue( String name,
String value );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setChildValue( String name,
int value );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setFocus( Component target
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setFont( Font f );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setSkip( String which, boolean
onOff );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setStyle( int style );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setText( String newText, int
textStyle, int placement );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setText( String newText );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setTextPlacement( int placement
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setTextStyle( int textStyle
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setThickness( int thick );
<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="JifPanePanel"><TT><FONT SIZE=4 FACE="Courier">JifPanePanel</TT></FONT></A>
</H3>
<P>
This class is used by the <TT>JifTabPanel</TT>
to hold all of the panes. It contains a <TT>CardLayout</TT>
to manage them.
<BLOCKQUOTE>
<TT>public class JifPanePanel extends JifPanel
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifPanePanel();<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void addPane( String name, Component
comp );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void selectPane( String paneName
);<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="JifTabPanel"><TT><FONT SIZE=4 FACE="Courier">JifTabPanel</TT></FONT></A>
</H3>
<P>
This class implements a tabbed panel by extending the <TT>JifPanel</TT>
and adding some pane management techniques. This class is the
master class, and the two helper classes (<TT>JifPanePanel</TT>
and <TT>JifTabSelector</TT>) implement
the pane swapping and the tab selection.
<BLOCKQUOTE>
<TT>public class JifTabPanel extends JifPanel
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected JifPanePanel panePanel = new
JifPanePanel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected JifTabSelector selector = new
JifTabSelector( panePanel );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTabPanel();<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void addPane( String name, Component
comp );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void selectPane( String name );
<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="JifTabSelector"><TT><FONT SIZE=4 FACE="Courier">JifTabSelector</TT></FONT></A>
</H3>
<P>
This is a helper class for the <TT>JifTabPanel</TT>
object implementing the actual tabs. It is responsible for drawing
the tabs and communicating with the <TT>JifTabPanel</TT>
about which tab has been clicked. This class extends <TT>Canvas</TT>
so that it can draw custom tabs.
<BLOCKQUOTE>
<TT>public class JifTabSelector extends Canvas
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullWidthTabs
= false;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Vector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tabs
= new Vector();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentTab
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Font&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normalFont
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Font&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selFont
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;realWidth
= 0, realHeight = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected JifPanePanel&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myPanePanel
= null;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTabSelector( JifPanePanel jpp
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void addPane( String paneName );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Dimension minimumSize();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void paint( Graphics g );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Dimension preferredSize();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void selectPane( String paneName
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void selectPane( int which );<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="JifTextArea"><TT><FONT SIZE=4 FACE="Courier">JifTextArea</TT></FONT></A>
</H3>
<P>
This class extends Java's <TT>TextArea</TT>,
adding tab recognition and SQL code generation. <TT>JifTextArea</TT>s
produce a string value in SQL. In addition, you can restrict the
data that is entered in a <TT>JifTextArea</TT>
by using the <TT>setStyle()</TT> method.
The types of input restrictions are as follows:
<UL>
<LI><TT>JifTextArea.ANY</TT>-Any characters
are allowed.
<LI><TT>JifTextArea.LOWER</TT>-All
characters entered are lowercased.
<LI><TT>JifTextArea.UPPER</TT>-All
characters entered are uppercased.
<LI><TT>JifTextArea.NUMERIC</TT>-Only
numbers are allowed to be entered.
</UL>
<P>
<BLOCKQUOTE>
<TT>public class JifTextArea extends TextArea
implements SQLFactory<BR>
{<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Constants<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ANY
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOWER
= 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UPPER
= 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NUMERIC
= 3;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;columnName
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataChange
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initialized
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primaryKey
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isNumericData
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isDateData
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style
= ANY;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextArea( String s );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextArea( String s, String columnName
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextArea( String s, String columnName,
boolean primaryKey );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextArea( int rows, int cols
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextArea( int rows, int cols,
String columnName );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextArea( int rows, int cols,
String columnName, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean primaryKey
);<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean didDataChange();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void disable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void enable();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String generateInsertSQL( boolean
addParen );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String generateUpdateSQL( boolean
addSet );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getColumnName();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getSQL( boolean forWhere
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean isPrimaryKey();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void reset();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setColumnName( String columnName
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void&nbsp;&nbsp;&nbsp;&nbsp;setDate(
boolean onOff );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setNumeric( boolean onOff
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setPrimaryKey( boolean primaryKey
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setStyle( int style );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setText( String text );<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="JifTextField"><TT><FONT SIZE=4 FACE="Courier">JifTextField</TT></FONT></A>
</H3>
<P>
This class extends Java's <TT>TextField</TT>
by adding tab recognition and SQL code generation. <TT>JifTextField</TT>s
produce a string value in SQL. In addition, you can restrict the
data that is entered in a <TT>JifTextField</TT>
by using the <TT>setStyle()</TT> method.
The types of input restrictions are as follows:
<UL>
<LI><TT>JifTextField.ANY</TT>-Any
characters are allowed.
<LI><TT>JifTextField.LOWER</TT>-All
characters entered are lowercased.
<LI><TT>JifTextField.UPPER</TT>-All
characters entered are uppercased.
<LI><TT>JifTextField.NUMERIC</TT>-Only
numbers are allowed to be entered.
</UL>
<P>
<BLOCKQUOTE>
<TT>public class JifTextField extends TextField
implements SQLFactory<BR>
{<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Constants<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TAB_KEY
= 9;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ANY
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOWER
= 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UPPER
= 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NUMERIC
= 3;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;columnName
= &quot;&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
dataChange = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
initialized = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
primaryKey = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
isNumericData = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
isDateData = false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style
= ANY;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public Constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextField()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextField( String s )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextField( String s, String
columnName )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextField( String s, String
columnName, boolean primaryKey )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextField( int cols )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextField( int cols, String
columnName )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public JifTextField( int cols, String
columnName, boolean primaryKey )<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods&nbsp;&nbsp;&nbsp;&nbsp;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setStyle( int style )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setColumnName( String columnName
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getColumnName()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setNumeric( boolean onOff
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setDate( boolean onOff )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setPrimaryKey( boolean primaryKey
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean isPrimaryKey()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean didDataChange()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void reset()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String generateUpdateSQL( boolean
addSet )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String generateInsertSQL( boolean
addParen )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getSQL( boolean forWhere
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setText( String text )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void enable()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public synchronized void disable()<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="MessageBox"><TT><FONT SIZE=4 FACE="Courier">MessageBox</TT></FONT></A>
</H3>
<P>
This class extends the <TT>JifDialog</TT>
class to provide a popup message box. The class can be used to
display information to the user, such as warnings, errors, or
other informational items. You can optionally display an image
in front of the text. There are four built-in images to choose
from:
<UL>
<LI><TT>MessageBox.INFO</TT>-Displays
an informational mark.
<LI><TT>MessageBox.EXCLAMATION</TT>-Displays
an exclamation signal.
<LI><TT>MessageBox.STOP</TT>-Displays
a stop signal.
<LI><TT>MessageBox.QUESTION</TT>-Displays
a question mark.
</UL>
<P>
<BLOCKQUOTE>
<TT>public class MessageBox extends JifDialog
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Constants<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final String&nbsp;&nbsp;&nbsp;&nbsp;
INFO = &quot;Information.gif&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final String&nbsp;&nbsp;&nbsp;&nbsp;
EXCLAMATION = &quot;Exclamation.gif&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final String&nbsp;&nbsp;&nbsp;&nbsp;
STOP = &quot;Stop.gif&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final String&nbsp;&nbsp;&nbsp;&nbsp;
QUESTION = &quot;Question.gif&quot;;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public MessageBox( Frame parent, String
title, String message, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String iconToUse
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public MessageBox( Frame parent, String
title, String message, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String iconToUse,
boolean addButtons );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public MessageBox( Frame parent, String
title, String message );<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="PickList"><TT><FONT SIZE=4 FACE="Courier">PickList</TT></FONT></A>
</H3>
<P>
This abstract class can be used to quickly build picklists of
data. Simply supply an <TT>init()</TT>
method that fills the <TT>List</TT>
<TT>myList</TT> with data. You receive
an <TT>ACTION_EVENT</TT> event notifying
you of the user's selection.
<BLOCKQUOTE>
<TT>public abstract class PickList extends
JifDialog<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;okButton
= new Button( &quot;Ok&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cancelButton
= new Button( &quot;Cancel&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected List&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList
= new List( 10, false );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public PickList( Frame daddy, String title
)<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract void init();<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="ResponseDialog"><TT><FONT SIZE=4 FACE="Courier">ResponseDialog</TT></FONT></A>
</H3>
<P>
This class extends the <TT>MessageBox</TT>
class to provide the same functionality with a configurable number
of buttons. This allows you to produce &quot;Yes, No, or Cancel?&quot;
type queries among others. Simply pass a string of button names
separated by commas to the constructor.
<BLOCKQUOTE>
<TT>public class ResponseDialog extends MessageBox
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Button[]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonList;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonCount;
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public Constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public ResponseDialog( Frame parent, String
title, String message, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String buttons
);<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="SimpleDBUI"><TT><FONT SIZE=4 FACE="Courier">SimpleDBUI</TT></FONT></A>
</H3>
<P>
This class implements functionality that can be used in simple
database applications.
<BLOCKQUOTE>
<TT>public abstract class SimpleDBUI extends
JifPanel<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton
= new Button( &quot;Save&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearButton
= new Button( &quot;Clear&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newButton
= new Button( &quot;New&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deleteButton
= new Button( &quot;Delete&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chooseButton
= new Button( &quot;Choose&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;closeButton
= new Button( &quot;Close&quot; );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public SimpleDBUI( SimpleDBJiflet jiflet
);<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public SimpleDBJiflet getJiflet();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setJiflet( SimpleDBJiflet
jiflet );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract void moveToScreen();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract void clearScreen();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract void moveFromScreen();
<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="StatusBar"><TT><FONT SIZE=4 FACE="Courier">StatusBar</TT></FONT></A>
</H3>
<P>
This class implements a single-line, sunken status bar that can
be found in almost every microcomputer software package.
<BLOCKQUOTE>
<TT>public class StatusBar extends JifPanel
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public StatusBar();<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public Methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void clear();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Dimension preferredSize();<BR>
}</TT>
</BLOCKQUOTE>
<H2><A NAME="jifjiflet"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">jif.jiflet</TT></FONT></A>
</H2>
<P>
The <TT>jif.jiflet</TT> package contains
classes that pull together many of the other packages into one
unit. This unit, the Jiflet, can be used as a base for almost
any type of application. In addition, it provides many of the
niceties of Java applets without the security restrictions.
<H3><A NAME="JifApplication"><TT><FONT SIZE=4 FACE="Courier">JifApplication</TT></FONT></A>
</H3>
<P>
This interface defines the methods that a Jiflet must provide.
<BLOCKQUOTE>
<TT>public interface JifApplication<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void init();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void run();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void destroy();<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="JifMessage"><TT><FONT SIZE=4 FACE="Courier">JifMessage</TT></FONT></A>
</H3>
<P>
This interface provides the standard <TT>JifMessage</TT>
constants and the method needed to send them. Any class can implement
this interface.
<BLOCKQUOTE>
<TT>public interface JifMessage<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Constants<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
NEW = 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
CLEAR = 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
SAVE = 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
DELETE = 3;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
CUT = 4;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
COPY = 5;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
PASTE = 6;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
HELP_WINDOW = 7;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
HELP_CONTEXT = 8;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
HELP_ABOUT = 9;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
HELP_HELP = 10;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
DATA_chANGE = 11;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
chOOSE = 12;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final int&nbsp;&nbsp;&nbsp;&nbsp;
CLOSE = 13;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void sendJifMessage( Event event,
int msg );<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="Jiflet"><TT><FONT SIZE=4 FACE="Courier">Jiflet</TT></FONT></A>
</H3>
<P>
This class is the applet-like class that implements the model
intranet application shell as described in <A HREF="ch7.htm" >Chapter 7</A>,
&quot;A Model Intranet Application.&quot;
<BLOCKQUOTE>
<TT>public abstract class Jiflet extends
Frame implements JifApplication, Log<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected ConfigProperties&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;configProperties;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appName;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appVerbosity
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected DiskLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appLogFile;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected ScreenLog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultLog;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected StatusBar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myStatusBar
= null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activeFlag
= false;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Jiflet();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Jiflet( String title );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Jiflet( String title, String name,
String args[] );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Jiflet( String title, String name,
String args[], boolean verbosity );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void run();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void destroy();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setVerboseMode( boolean whichWay
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void verboseLog( char logLevel,
String logEntry );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void verboseLog( String logEntry
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void errorLog( String logEntry
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void log( char logLevel, String
logEntry );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void log( String logEntry );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean handleMenuEvent( Event
event, Object arg );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean shutDown( int level );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean shutDown();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void suicide( Exception e, String
logLine, int level );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void suicide( String logLine );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void suicide( String logLine, int
level );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void suicide( Exception e );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void suicide( Exception e, String
logLine );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void center();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void enableStatusBar( String text
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void enableStatusBar();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void showStatus( String text );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void clearStatus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected void setConnector( DBConnector
aConnector );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public DBConnector getConnector();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void startWait();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void endWait();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getParameter( String key
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getParameter( String key,
String defaultValue );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean canClose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getJifletInfo();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean isActive();<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="SimpleDBJiflet"><TT><FONT SIZE=4 FACE="Courier">SimpleDBJiflet</TT></FONT></A>
</H3>
<P>
This class, when used in conjunction with the <TT>SimpleDBUI</TT>
class, provides a simple shell for database intranet applications.
<BLOCKQUOTE>
<TT>public abstract class SimpleDBJiflet
extends Jiflet<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Menu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fileMenu;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Menu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
helpMenu;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public SimpleDBJiflet( String title, String
name, String args[] );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void init();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void initializeMenus();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract void initializeUI();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void connectToDatabase();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void disconnectFromDatabase();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean handleMenuEvent( Event
event, Object arg );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean saveRecord();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean deleteRecord();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected void setCopyright( String cpr
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean canClose();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setDBRecord( DBRecord theRecord
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public DBRecord getDBRecord();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setUIPanel( SimpleDBUI panel
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public SimpleDBUI getUIPanel();<BR>
}</TT>
</BLOCKQUOTE>
<H2><A NAME="jiflog"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">jif.log</TT></FONT></A>
</H2>
<P>
The <TT>jif.log</TT> package contains
classes that write entries in common format to either the screen
or a disk file.
<H3><A NAME="DiskLog"><TT><FONT SIZE=4 FACE="Courier">DiskLog</TT></FONT></A>
</H3>
<P>
This class writes commonly formatted entries into a disk file.
<BLOCKQUOTE>
<TT>public class DiskLog extends RandomAccessFile
implements Log<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variable<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backupLog
= null;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public DiskLog( String name ) throws IOException;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public DiskLog( String logName, String
name ) throws IOException;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public DiskLog( String logDir, String
logName, String name ) <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws IOException;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setBackupLog( Log sl );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static public String createLogFileName();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;static public String constructFileName(
String path, String name );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void log( char logLevel, String
logEntry );<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="Log"><TT><FONT SIZE=4 FACE="Courier">Log</TT></FONT></A>
</H3>
<P>
This interface defines the constants and methods needed to implement
a standard logging mechanism. Any class can implement this interface.
<BLOCKQUOTE>
<TT>public interface Log<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Constants<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final char&nbsp;&nbsp;&nbsp;&nbsp;
DEBUG = 'D';<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final char&nbsp;&nbsp;&nbsp;&nbsp;
INFO = 'I';<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final char&nbsp;&nbsp;&nbsp;&nbsp;
WARNING = 'W';<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final char&nbsp;&nbsp;&nbsp;&nbsp;
ERROR = 'E';<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static final char&nbsp;&nbsp;&nbsp;&nbsp;
FATAL = 'F';<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void log( char logLevel, String
logEntry ) throws IOException;<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="ScreenLog"><TT><FONT SIZE=4 FACE="Courier">ScreenLog</TT></FONT></A>
</H3>
<P>
This class provides a common log output to the screen. You can
optionally send this information to a window instead of to the
standard output (<TT>stdout</TT>).
<BLOCKQUOTE>
<TT>public class ScreenLog extends Frame
implements Log<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public ScreenLog();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public ScreenLog( String name );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public ScreenLog( String windowTitle,
boolean popup );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void log( char logLevel, String
logEntry );<BR>
}</TT>
</BLOCKQUOTE>
<H2><A NAME="jifsql"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">jif.sql</TT></FONT></A>
</H2>
<P>
The <TT>jif.sql</TT> package contains
classes that implement SQL or JDBC specific functionality. These
classes are either new or extend Java's <TT>java.sql</TT>
packaged classes.
<H3><A NAME="CodeLookerUpper"><TT><FONT SIZE=4 FACE="Courier">CodeLookerUpper</TT></FONT></A>
</H3>
<P>
This class allows you to quickly look up a code value from a table.
A code value can be any column from a row that has a single key
value as its primary key. For instance, if you have an employee
table with the employee number as the primary key, you can use
this class to retrieve the employee's name. Look in the Employee
Benefits sample application for a usage example.
<BLOCKQUOTE>
<TT>public class CodeLookerUpper<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected DBConnector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
myConnection = null;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mySQL
= null;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public CodeLookerUpper( DBConnector connector,
String tableName,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String keyColumnName,
String valueColumnName );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String lookupCode( int code_id
);<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="Connector"><TT><FONT SIZE=4 FACE="Courier">Connector</TT></FONT></A>
</H3>
<P>
This interface defines the methods required to become a JDBC/JIF
database connector.
<BLOCKQUOTE>
<TT>public interface Connector<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean connect( String user, String
password, String server );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean disconnect();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean connected();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getConnectionURL();<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="DBConnector"><TT><FONT SIZE=4 FACE="Courier">DBConnector</TT></FONT></A>
</H3>
<P>
This class implements the <TT>Connector</TT>
interface and provides several of the methods. However, some remain
abstract so that you can derive your own database connectors from
them.
<BLOCKQUOTE>
<TT>public abstract class DBConnector implements
Connector<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Jiflet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myJiflet;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Connection&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myConnection;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isConnected
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Statement&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myStatement;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastError;
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public DBConnector( Jiflet jiflet );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public DBConnector();<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean connect( String user, String
password, String server );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean disconnect();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean connected();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public Statement getStatement();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void errorLog( String logEntry
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void log( String logEntry );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean commit();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean rollback();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean close();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getLastError();<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="DBRecord"><TT><FONT SIZE=4 FACE="Courier">DBRecord</TT></FONT></A>
</H3>
<P>
This abstract class encapsulates a row of data from a table. It
can be used as a base class for your own table data.
<BLOCKQUOTE>
<TT>public abstract class DBRecord<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variables<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataChange
= false;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isNewRecord
= false;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public DBRecord();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public DBRecord( ResultSet rs );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean parseResultSet( ResultSet
rs );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean update( DBConnector
theConnector, JifPanel ap );;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean deleteRow( DBConnector
theConnector );;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean setDataChange( boolean
onOff );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void clear();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean canSave();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean didDataChange();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setNewStatus( boolean how
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean getNewStatus();<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="MSQLConnector"><TT><FONT SIZE=4 FACE="Courier">MSQLConnector</TT></FONT></A>
</H3>
<P>
This class implements the remaining methods from <TT>DBConnector</TT>
to provide access to an <TT>MSQL</TT>
data source using JDBC.
<BLOCKQUOTE>
<TT>public class MSQLConnector extends DBConnector
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variable<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dbUrl;
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public MSQLConnector( Jiflet jiflet, String
host, int port, String instance );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public MSQLConnector( String host, int
port, String instance );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getConnectionURL();<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="MSSQLServerConnector"><TT><FONT SIZE=4 FACE="Courier">MSSQLServerConnector</TT></FONT></A>
</H3>
<P>
This class implements the remaining methods from <TT>DBConnector</TT>
to provide access to a Microsoft SQL Server data source using
JDBC.
<BLOCKQUOTE>
<TT>public class MSSQLServerConnector extends
DBConnector<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public MSSQLServerConnector( Jiflet jiflet
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public MSSQLServerConnector();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getConnectionURL();<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="ODBcconnector"><TT><FONT SIZE=4 FACE="Courier">ODBcconnector</TT></FONT></A>
</H3>
<P>
This class implements the remaining methods from <TT>DBConnector</TT>
to provide access to an ODBC data source using JDBC.
<BLOCKQUOTE>
<TT>public class ODBcconnector extends DBConnector
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public ODBcconnector( Jiflet jiflet, String
dsInfo );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public ODBcconnector( String dsInfo );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getConnectionURL();<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="OracleConnector"><TT><FONT SIZE=4 FACE="Courier">OracleConnector</TT></FONT></A>
</H3>
<P>
This class implements the remaining methods from <TT>DBConnector</TT>
to provide access to an Oracle data source using JDBC.
<BLOCKQUOTE>
<TT>public class OracleConnector extends
DBConnector<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public OracleConnector( Jiflet jiflet
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public OracleConnector();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getConnectionURL();<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="OracleSequence"><TT><FONT SIZE=4 FACE="Courier">OracleSequence</TT></FONT></A>
</H3>
<P>
This class encapsulates access to an Oracle sequence. A sequence
is an automatic counter that is maintained by the database server.
It can be used to generate employee IDs for instance.
<BLOCKQUOTE>
<TT>public class OracleSequence<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public OracleSequence( OracleConnector
connector, String sequenceName );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int getNextValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int getCurrentValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected synchronized int getDBSequenceValue(
boolean currentVal );<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="SequenceGenerator"><TT><FONT SIZE=4 FACE="Courier">SequenceGenerator</TT></FONT></A>
</H3>
<P>
This class implements a mock database counter for databases that
do not provide native sequences.
<BLOCKQUOTE>
<TT>public class SequenceGenerator<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public SequenceGenerator( DBConnector
connector, String table, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String column
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public SequenceGenerator( DBConnector
connector );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int getNextValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int getCurrentValue();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected synchronized void getDBSequenceValue();
<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="SQLFactory"><TT><FONT SIZE=4 FACE="Courier">SQLFactory</TT></FONT></A>
</H3>
<P>
This interface defines the methods required for a class to provide
SQL generation capabilities.
<BLOCKQUOTE>
<TT>public interface SQLFactory<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String generateUpdateSQL( boolean
addSet );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String generateInsertSQL( boolean
addParen );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getColumnName();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void setColumnName( String colName
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean isPrimaryKey();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getSQL( boolean forWhere
);<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="SybaseConnector"><TT><FONT SIZE=4 FACE="Courier">SybaseConnector</TT></FONT></A>
</H3>
<P>
This class implements the remaining methods from <TT>DBConnector</TT>
to provide access to a Sybase data source using JDBC.
<BLOCKQUOTE>
<TT>public class SybaseConnector extends
DBConnector<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public SybaseConnector( Jiflet jiflet
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public SybaseConnector();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String getConnectionURL();<BR>
}</TT>
</BLOCKQUOTE>
<H2><A NAME="jifutil"><TT><FONT SIZE=5 COLOR=#FF0000 FACE="Courier">jif.util</TT></FONT></A>
</H2>
<P>
The <TT>jif.util</TT> package contains
classes that are simply utilitarian in nature. They provide functionality
that can be used by almost any software project.
<H3><A NAME="CallbackTimer"><TT><FONT SIZE=4 FACE="Courier">CallbackTimer</TT></FONT></A>
</H3>
<P>
This class implements a timer that calls back the owner when the
alarm goes off.
<BLOCKQUOTE>
<TT>public class CallbackTimer extends Thread
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public CallbackTimer( TimeOut target,
int interval )<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void run()<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="ConfigProperties"><TT><FONT SIZE=4 FACE="Courier">ConfigProperties</TT></FONT></A>
</H3>
<P>
This class extends the Java <TT>Properties</TT>
class to do two things. First it reads the application configuration
file. Second, it merges any properties passed in at construction
with the read in properties.
<BLOCKQUOTE>
<TT>public class ConfigProperties extends
Properties<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Protected instance variable<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected Properties&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;argProperties
= new Properties();<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public ConfigProperties( String args[],
String fileName );<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int parseArguments( String args[]
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int parseConfigFile( String appdefaultConfigFile
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected void setProperties( Properties
prop );<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="EventTimer"><TT><FONT SIZE=4 FACE="Courier">EventTimer</TT></FONT></A>
</H3>
<P>
This class implements a timer that generates an event to the owner
when the alarm goes off.
<BLOCKQUOTE>
<TT>public class EventTimer extends Thread
<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructor<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public EventTimer( Component target, int
msInterval )<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void run()<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="FileDate"><TT><FONT SIZE=4 FACE="Courier">FileDate</TT></FONT></A>
</H3>
<P>
This class is an all-purpose date formatting class. It allows
you to convert the date into a variety of formats.
<BLOCKQUOTE>
<TT>public class FileDate extends Date<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Constants<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MDY
= 0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DMY
= 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YMD
= 2;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MMMDY
= 3;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DMMMY
= 4;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YMMMD
= 5;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MDYYYY
= 6;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DMYYYY
= 7;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YYYYMD
= 8;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MMMDYYYY
= 9;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DMMMYYYY
= 10;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public final static int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YYYYMMMD
= 11;<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public constructors<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public FileDate();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public FileDate( java.util.Date date );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public FileDate( java.sql.Date date );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public FileDate( int y, int m, int d );
<BR>
<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public methods<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String toFileString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String toFileString( String
s );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String toFileString( java.util.Date
d );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String toFileString( java.sql.Date
d );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String toOracleString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String toOracleString( String
s );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String toOracleString( java.util.Date
d );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String toOracleString( java.sql.Date
d );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String toNormalString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String toNormalString( String
s );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String toNormalString( java.util.Date
d );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String toNormalString( java.sql.Date
d );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static FileDate valueOf( String
s ) throws IllegalArgumentException;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String formatDateToString();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String formatDateToString( String
delimiter, int fmtOpt );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String formatDateToString(
String s );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String formatDateToString(
String s, String delimiter );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String formatDateToString(
String s, String delimiter, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int fmtOpt );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String formatDateToString(
int y, int m, int d );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String formatDateToString(
int y, int m, int d, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String delimiter
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static String formatDateToString(
int y, int m, int d, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String delimiter,
int fmtOpt );<BR>
}</TT>
</BLOCKQUOTE>
<H3><A NAME="TimeOut"><TT><FONT SIZE=4 FACE="Courier">TimeOut</TT></FONT></A>
</H3>
<P>
This interface defines the method that a class must implement
to receive callback notification of events when using the <TT>CallbackTimer</TT>
class.
<BLOCKQUOTE>
<TT>public interface TimeOut<BR>
{<BR>
//&nbsp;&nbsp;&nbsp;&nbsp;Public method<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void timeOut( CallbackTimer timer
);<BR>
}</TT>
</BLOCKQUOTE>
<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="appe.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="appg.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
