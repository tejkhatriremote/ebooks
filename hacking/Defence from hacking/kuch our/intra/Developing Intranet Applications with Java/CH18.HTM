<HTML>
<HEAD>
<TITLE>Chapter 18 -- News & Announcements</TITLE>

<META>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT SIZE=6 COLOR=#FF0000>Chapter&nbsp;18</FONT></H1>
<H1><FONT SIZE=6 COLOR=#FF0000>News &amp; Announcements</FONT>
</H1>
<P>
<B>by <I>Jerry Ablan</I></B>
<HR WIDTH=100%>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>
<UL>
<LI><A HREF="#Introduction">
Introduction</A>
<LI><A HREF="#ApplicationDesign">
Application Design</A>
<LI><A HREF="#DatabaseDesign">
Database Design</A>
<LI><A HREF="#Implementation">
Implementation</A>
<UL>
<LI><A HREF="#UserInterface">
User Interface</A>
<LI><A HREF="#DatabaseAccess">
Database Access</A>
</UL>
<LI><A HREF="#ProgrammingConsiderations">
Programming Considerations</A>
<LI><A HREF="#Summary">
Summary</A>
</UL>

<HR>
<P>
<I><B><FONT SIZE=5>an nounce \a-nouns'\ v:</FONT></B><FONT SIZE=5> to make known publicly</FONT></I>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>
Introduction</FONT></A></H2>
<P>
Welcome to your sixth sample intranet application. This application,
like the last two, is very simple in design; however, it will
provide intranet users with plenty of information to talk about
at the watercooler. This is the News &amp; Announcements application.
<P>
This read-only application displays listings of company news and
announcements that are stored in the database. It is useful for
disseminating all types of company information like bonuses, casual
days, office parties, and so on.
<P>
This chapter will cover the following topics in regard to the
News &amp; Announcements application:
<UL>
<LI>Application Design-I'll go over the general design of the
application, including functionality and user interface considerations.
<LI>Database Design-This section will cover the database requirements
for this application. Here you'll examine the data model used
to support the application design.
<LI>Implementation-This section will cover how the application
and database design are implemented.
<LI>Programming Considerations-In this section, I'll recap the
implementation and summarize any difficult programming situations
that have arisen.
</UL>
<P>
<B><FONT COLOR=#000000></FONT></B>
<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
This four step format will be used throughout all of the sample application chapters. Hopefully, it will provide you with valuable insight and ideas for creating your own intranet applications</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="ApplicationDesign"><FONT SIZE=5 COLOR=#FF0000>
Application Design</FONT></A></H2>
<P>
This application, like the one in the last chapter, is one of
the simpler applications in the book. Once this application has
been connected to a data source, it will present the user with
a list of all the news on file.
<P>
Figure 18.1 is the proposed user interface for the News &amp;
Announcements program.
<P>
<A HREF="f18-1.gif"><B>Figure 18.1 :</B> <I>The News &amp; Announcements user interface</I>.</A>
<P>
The interface will utilize a <TT>JifTextArea</TT> component to
display news. This brings up an interesting point: Where is the
news entered anyway?
<P>
Well, right here in this program. You need this program to be
dual-functioning. This means that it is read-only for some people,
but lets others create new news and announcements. Figure 18.2
illustrates how this should look.
<P>
<A HREF="f18-2.gif"><B>Figure 18.2 :</B> <I>The News &amp; Announcements user interface
with saving capabilities</I>.</A>
<H2><A NAME="DatabaseDesign"><FONT SIZE=5 COLOR=#FF0000>
Database Design</FONT></A></H2>
<P>
This application is responsible for manipulating news rows. These
rows should be stored in a single table. The table you're going
to use in this sample application is called the News table.
<P>
The information stored in the news table corresponds to the information
that is to be edited as described above. Table 18.1 shows the
columns you'll need to store in your news table.
<P>
<CENTER><B>Table 18.1. The layout of the News table</B></CENTER>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD WIDTH=155><I>Description</I></TD><TD WIDTH=97><I>Column Name</I>
</TD><TD WIDTH=96><I>Type</I></TD><TD WIDTH=95><CENTER><I>Can Be Null?</I></CENTER>
</TD><TD WIDTH=90><I>Default</I></TD></TR>

<TR><TD WIDTH=118>News ID</TD><TD WIDTH=97>news_id</TD><TD WIDTH=96>number( 5 )
</TD><TD WIDTH=95><CENTER>No</CENTER></TD><TD WIDTH=90>None
</TD></TR>

<TR><TD WIDTH=155>Date/Time of News Item</TD><TD WIDTH=97>news_datetime
</TD><TD WIDTH=96>date</TD><TD WIDTH=95><CENTER>No</CENTER>
</TD><TD WIDTH=90>System Date</TD></TR>

<TR><TD WIDTH=155>News Description</TD><TD WIDTH=97>desc_text
</TD><TD WIDTH=96>char( 255 )</TD><TD WIDTH=95><CENTER>No</CENTER>
</TD><TD WIDTH=90>None</TD></TR>

<TR><TD WIDTH=155>Originator of News Item</TD><TD WIDTH=97>emp_id
</TD><TD WIDTH=96>number( 5 )</TD><TD WIDTH=95><CENTER>Yes</CENTER>
</TD><TD WIDTH=90>None</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Figure 18.3 shows the entity relationship diagram for your database
as it stands in this chapter. As you get deeper into your sample
applications, you'll see your entity relationship diagram grow
to encompass all the tables.
<P>
<A HREF="f18-3.gif"><B>Figure 18.3 :</B> <I>The entity relationship diagram including
our new News table</I>.</A><BR>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
Entity relationship diagrams are discussed in <A HREF="ch13.htm" >Chapter 13</A>, &quot;Employee Files.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
In addition to creating a table, you'll create a database synonym
for your table. This will allow everyone to access the table with
the same name without having to worry about the schema in which
the table resides.
<P>
While this table has a foreign key back to the employee table,
it is not a dependent table. The relationship is merely informational.
That is because the <TT>emp_id</TT> column in your table may be
<TT>null</TT>. This allows you to ignore it completely. In fact,
in the implementation of the News &amp; Announcement program,
it is not used.<BR>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>TIP</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
<A HREF="ch14.htm" >Chapter 14</A>, &quot;Human Resources: Benefits Maintenance,&quot; provides some in-depth coverage of foreign keys and referential integrity.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<P>
Listing 18.1 shows the SQL commands to create the News table.
<HR>
<BLOCKQUOTE>
<B>Listing 18.1. The SQL to create the News table.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<PRE>
/*    Create the table */
create table news_t
(
    news_id                number( 5 ) not null,
    news_datetime        date default sysdate not null,
    desc_text            char( 255 ) not null,
    emp_id                number( 5 ) default null
);

/*    Create a primary key */
alter table news_t
    add
    (
        primary key
        (
            news_id
        )
    );

/*    Create a foreign key */
alter table news_t
    add
    (
        foreign key
        (
            emp_id
        )
        references emp_t
    );

/*    Grant access for the table to the user role */
grant select,insert,delete,update on news_t to ia_user_r ;

/*    Drop any existing public synonym */
drop public synonym news ;

/*    Create a public synonym for our table */
create public synonym news for news_t ;
</PRE>
</BLOCKQUOTE>
<HR>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The preceding SQL is quite generic; however, it may not work on every database. This particular SQL has been tested with Oracle.</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
The first SQL clause creates the table <TT>news_t</TT>. The second
clause creates a primary key using the <TT>news_id</TT> column.
Making this the primary key ensures that the values in the column
are unique across all rows.
<P>
The third SQL clause creates your foreign key. The foreign key
in this table is the <TT>emp_id</TT> column. This column points
back to, or references, the <TT>emp_id</TT> column in the <TT>emp_t</TT>
table.
<P>
Lastly, the public synonym <TT>news</TT> is created for the table
<TT>news_t</TT>.
<P>
After you have created this table, you are ready to start building
your application.<BR>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>CAUTION</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
You must create the <TT>emp_t</TT> (Employee) table before you can create the <TT>news_t</TT> (News) table. Otherwise, the <TT>news_t</TT> SQL will fail!
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H2><A NAME="Implementation"><FONT SIZE=5 COLOR=#FF0000>
Implementation</FONT></A></H2>
<P>
The rest of this chapter will discuss the implementation of the
News &amp; Announcements program. First, I'll discuss the user
interface and how it was created. Secondly, I'll discuss the database
access used in the program. Finally, I'll cover any programming
pitfalls that came up during the application construction.
<P>
Each sample application in this book uses a different approach
to developing the user interface. This variety will show you the
different ways you can go about doing your own interfaces. Hopefully,
you will get a nice cross-section of many different styles and
choose the one that suits you best.
<H3><A NAME="UserInterface">
User Interface</A></H3>
<P>
To achieve the design goal presented above, you do not need special
user interface components. For variety, I chose to use the <TT>GridBagLayout</TT>
layout manager for this application. It uses the same hard-coded
row and column heights as the Employee Files program. This provides
another example of how to use this difficult layout manager.
<P>
The following is the user interface construction code for the
News &amp; Announcements program:
<BLOCKQUOTE>
<PRE>
//****************************************************************************
//* Members                                                                  *
//****************************************************************************

    JifTextField                news_id = new JifTextField( &quot;&quot; );
    JifTextField                news_datetime;
    JifTextArea                    news_text;
    JifTextField                new_news_text;

//****************************************************************************
//* Constructor                                                              *
//****************************************************************************

    public
    NewsUI( SimpleDBJiflet jiflet )
    {
        super( jiflet );

        GridBagLayout gbl = new GridBagLayout();

        int cw[] = { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
            14, 14, 14 }; // 17

        int rh[] = { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 }; // 12

        double rc14_0[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

        gbl.columnWidths = new int[ 17 ];
        gbl.rowHeights = new int[ 12 ];

        gbl.columnWeights = new double[ 17 ];
        gbl.rowWeights = new double[ 12 ];

        System.arraycopy( cw, 0, gbl.columnWidths, 0, 17 );
        System.arraycopy( cw, 0, gbl.rowHeights, 0, 12 );

        System.arraycopy( rc14_0, 0, gbl.columnWeights, 0, 17 );
        System.arraycopy( rc14_0, 0, gbl.rowWeights, 0, 12 );

        setLayout( gbl );

        news_text = new JifTextArea( &quot;&quot; );
        addWithConstraints( news_text, &quot;x=0;y=0;width=17;height=10&quot; );
        news_text.disable();

        new_news_text = new JifTextField( &quot;&quot; );

        //    Don't add if read only...
        if ( jiflet.getParameter( &quot;readOnly&quot;, 
            &quot;true&quot; ).equalsIgnoreCase( &quot;false&quot; ) )
            addWithConstraints( new_news_text, 
                &quot;x=0;y=11;width=16;fill=horizontal&quot; );

        //    Add the buttons...
        saveButton.disable();

        //    Don't add if read only...
        if ( jiflet.getParameter( &quot;readOnly&quot;, 
            &quot;true&quot; ).equalsIgnoreCase( &quot;false&quot; ) )
            addWithConstraints( saveButton, &quot;x=16;y=11&quot; );

        //    Tell which are numeric...
        news_id.setNumeric( true );

        //    Set the focus to the first field...
        setFocus( news_text );
    }


</PRE>
</BLOCKQUOTE>
<P>
Set the layout to a new <TT>GridBagLayout</TT>. The <TT>JifTextArea</TT>
component is created and placed in the layout. This is your news
list. It is disabled so the user cannot type or edit the information.
<H4>Conditional Construction</H4>
<P>
Here's where you come to an interesting part. Query your configuration
parameters with the <TT>getParameter()</TT> method to see if there
is a property called <TT>readOnly</TT>. If this property exists,
and is set to <TT>false</TT>, then you must allow the user to
create new news items. You do this by adding a <TT>JifTextField</TT>
and a <TT>saveButton</TT> to the layout if this <TT>readOnly</TT>
property is set to <TT>false</TT>.
<H3><A NAME="DatabaseAccess">
Database Access</A></H3>
<P>
This application communicates with the database through the use
of a <TT>NewsRecord</TT> object. This <TT>DBRecord</TT> derivation
knows how to create, read, update, and delete records from the
news table. The following are the instance variables of this class:
<BLOCKQUOTE>
<PRE>
//****************************************************************************
//* Constants                                                                *
//****************************************************************************

    public final static String     TABLE_NAME = &quot;news&quot;;

//****************************************************************************
//* Members                                                                  *
//****************************************************************************

    //    A variable for each table column...
    public int                    news_id = -1;
    public Date                    news_datetime = null;
    public String                desc_text = &quot;&quot;;
<BR>

</PRE>
</BLOCKQUOTE>

<P>
<CENTER>
<TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR><TD><B>NOTE</B></TD></TR>
<TR><TD>
<BLOCKQUOTE>
The <TT>NewsRecord</TT> and other database classes are reused in several other applications. They have been placed in their own package along with other shared code. This package is called <TT>jif.common</TT>. It contains all the common classes between all 
the applications.
</BLOCKQUOTE>

</TD></TR>
</TABLE>
</CENTER>
<P>
<H4>Retrieving the News</H4>
<P>
At startup of the application, the database needs to be queried,
and the results displayed for the user. These results are data
columns taken from the database.
<P>
Retrieve all of the news for display:
<BLOCKQUOTE>
<PRE>
//****************************************************************************
//* loadPanel                                                                *
//****************************************************************************

    public void
    loadPanel()
    {
        String sql = &quot;select * from emp&quot;;

        //    Clear out the old stuff...
        getUIPanel().clearScreen();

        try
        {
            if ( getConnector().getStatement().execute( sql ) )
            {
                ResultSet rs = getConnector().getStatement().getResultSet();

                int row = 0;

                while ( rs.next() )
                {
                    EmployeeRecord er = new EmployeeRecord( rs );
                    setDBRecord( er );
                    getUIPanel().moveToScreen();
                }
            }
        } catch ( SQLException e )
        {
            errorLog( &quot;Error during loading: &quot; + e.toString() );
        }

        return;
    }

</PRE>
</BLOCKQUOTE>
<P>
This issues an SQL query that returns all of the news in your
news table. Each returned row is stored in a <TT>NewsRecord</TT>
object. The stored row is then placed into a <TT>Vector</TT> for
later use.
<P>
You may notice that the news list is not populated here. That
is because you've placed that code in the <TT>moveToScreen()</TT>
method of your user interface class. However, there is data moved
to the screen. But, before it can move data to your list, you
need to tell the base class which <TT>DBRecord</TT> to use. This
is done with the call to <TT>setDBRecord()</TT>.
<P>
The <TT>moveToScreen()</TT> code is quite simple:
<BLOCKQUOTE>
<PRE>
//****************************************************************************
//* moveToScreen                                                             *
//****************************************************************************

    public void
    moveToScreen()
    {
        if ( getJiflet().getDBRecord() == null )
            return;

        //    Cast one off...
        NewsRecord er = ( NewsRecord )getJiflet().getDBRecord();

        String nr = er.news_datetime.toString() +
            &quot;. &quot; + er.desc_text +
            System.getProperty( &quot;line.separator&quot; );

        news_text.appendText( nr );
    }

</PRE>
</BLOCKQUOTE>
<P>
Here, you retrieve the <TT>NewsRecord</TT> from your <TT>jiflet</TT>,
concatenating the date and time with the news description. Finally,
tack on a line feed and append it to the text area.
<H4>Storing the News</H4>
<P>
If the user has access to the news input area then any change
in that component will signal the actual Save button to enable.
This is handled by your framework.
<P>
To actually save the news, you need to generate a little SQL.
You do this in your main class. Here is the code:
<BLOCKQUOTE>
<PRE>
//****************************************************************************
//* saveRecord                                                               *
//****************************************************************************

    /**
    * This overridden saveRecord() knows how to save the news...
    */
    public boolean
    saveRecord()
    {
        boolean        success = true;

        //    Read only?
        if ( getParameter( &quot;readOnly&quot;, &quot;true&quot; ).equalsIgnoreCase( &quot;true&quot; ) )
        {
            MessageBox mb = new MessageBox( this, &quot;Sorry Charlie!&quot;,
                &quot;You are not allowed to save data!&quot;,
                MessageBox.STOP );
            mb.show();
            return( true );
        }

        try
        {
            String            sql;
            int                new_uid;

            //    Get a new UID!
            SequenceGenerator sg = new SequenceGenerator(
                getConnector(), &quot;news&quot;, &quot;news_id&quot; );

            new_uid = sg.getNextValue();

            String newNews = ( ( NewsUI )getUIPanel() ).new_news_text.getText();

            sql = &quot;insert into news ( news_id, news_datetime, desc_text ) &quot; +
                &quot;values ( &quot; + Integer.toString( new_uid ) +
                &quot;, sysdate, &Ocirc;&quot; + newNews + &quot;&Ocirc; )&quot;;

            if ( !sql.equals( &quot;&quot; ) )
            {
                getConnector().getStatement().execute( sql );
                showStatus( &quot;News Saved...&quot; );
                loadPanel();
            }
        }
        catch ( SQLException e )
        {
            showStatus( &quot;News Not Saved...&quot; );
            getConnector().errorLog( e.toString() );
            success = false;
        }

        return( success );
    }
</PRE>
</BLOCKQUOTE>
<P>
First ensure that the user is allowed to create news rows. If
he is, then create a new <TT>news_id</TT> using the <TT>SequenceGenerator</TT>
class. This is then used to construct an SQL <TT>INSERT</TT> statement.
When executed, the new news row is inserted into the table.
<P>
If it is successful, the news items are reread from the database
and displayed.
<H2><A NAME="ProgrammingConsiderations"><FONT SIZE=5 COLOR=#FF0000>
Programming Considerations</FONT></A></H2>
<P>
Aside from the database access, this application is quite simple.
It does little more than list the rows in the news table in an
attractive manner. If you set a certain property a certain way,
creating the news becomes an option for you!
<P>
You needed to present an intuitive interface to the user, while
making it effortless to use. You did this by using the <TT>JifTextArea</TT>
class. You also needed a way to create news. This was handled
by hidden fields that are placed into the layout based on configuration
parameters. This allows the program to have a dual-functionality.
<P>
To recap, this application introduced the following Java intranet
programming topics:
<UL>
<LI>Conditional Interface Construction:<BR>
You only added the Save button and new news text field to the
layout if the <TT>readOnly</TT> property was set to <TT>false</TT>.
<LI>Overriding row storage method:<BR>
You overrode the <TT>saveRecord()</TT> method of main class to
check security, and to generate your own SQL for INSERTing rows
into the news table.
</UL>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>
Summary</FONT></A></H2>
<P>
This chapter introduced you to the sixth sample application in
your intranet application suite: the News &amp; Announcements.
This program is responsible for updating the News table and displaying
its contents. It is completely read-only to most users, while
others may be granted access to save new news. This program will
be useful for all of the employees. It allows them to keep tabs
on what is going on at the company.
<P>
In <A HREF="ch19.htm" >Chapter 19</A>, &quot;Product Maintenance,&quot; you will design
and create an application that will allow to you create, update,
and delete records of the things your company handles: products.
<HR>

<CENTER><P><A HREF="ch17.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<A HREF="ch19.htm"><IMG SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A>
<HR WIDTH="100%"></P></CENTER>
</BODY>
</HTML>
