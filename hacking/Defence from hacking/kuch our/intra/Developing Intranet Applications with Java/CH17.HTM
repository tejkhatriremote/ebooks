<HTML>

<HEAD>
   <TITLE>Chapter 17 --Online Employee Phonebook</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 17</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Online Employee Phonebook</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>




<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#ApplicationDesign" >Application Design</A>
<LI><A HREF="#DatabaseDesign" >Database Design</A>
<LI><A HREF="#Implementation" >Implementation</A>
<UL>
<LI><A HREF="#UserInterface" >User Interface</A>]
<LI><A HREF="#DatabaseAccess" >Database Access</A>
</UL>
<LI><A HREF="#ProgrammingConsiderations" >Programming Considerations</A>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<I><B><FONT SIZE=5 COLOR=#000000>tel e phone \tel'e-fon</FONT><FONT SIZE=5>'\
n:</FONT></B><FONT SIZE=5> an electronic device or system for
sound reception or reproduction at a distance</FONT></I>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
Welcome to your fifth sample intranet application. If you thought
the last program-the Online In/Out Board-was simple, wait until
you see this application. This is the Online Employee Phonebook.
<P>
This read-only application displays the phone numbers of employees
in a scrolling list. This is useful for all employees to look
up the phone numbers of their coworkers.
<P>
This chapter will cover the following topics in regards to the
Online Employee Phonebook application:
<UL>
<LI><FONT COLOR=#000000>Application Design. I'll go over the general
design of the application. This includes functionality and user
interface considerations.</FONT>
<LI><FONT COLOR=#000000>Database Design. This section will cover
the database requirements for this application. Here you'll examine
the data model used to support the application design.</FONT>
<LI><FONT COLOR=#000000>Implementation. This section will cover
how the application and database design are implemented.</FONT>
<LI><FONT COLOR=#000000>Programming Considerations. In this section,
I'll recap the implementation and summarize any difficult programming
situations that have arisen.</FONT>
</UL>
<P>
This four step format will be used throughout all of the sample
application chapters. Hopefully, it will provide you with valuable
insight and ideas for creating your own intranet applications.
<H2><A NAME="ApplicationDesign"><FONT SIZE=5 COLOR=#FF0000>Application
Design</FONT></A></H2>
<P>
This application, like the last, is one of the simpler applications
in the book. Once this application has been connected to a data
source, it will present the user with a list of all the employees
on file, as well as their phone numbers and names formatted in
an attractive manner.
<P>
Figure 17.1 is the proposed user interface for the Online Employee
Phonebook program.
<P>
<A HREF="f17-1.gif" ><B>Figure 17.1 : </B><I>The Online Employee Phonebook user interface.</I></A>
<P>
The interface will utilize a <TT>JifTextArea</TT>
component to display employees and their phone numbers, and a
single Refresh button to refresh the list.
<P>
The list needs to be refreshed periodically. The Refresh button
is just the ticket. By pressing that button, the user initiates
the process of reloading the <TT>JifTextArea</TT>.
<H2><A NAME="DatabaseDesign"><FONT SIZE=5 COLOR=#FF0000>Database
Design</FONT></A></H2>
<P>
This application utilizes the employee table that was defined
in <A HREF="ch13.htm" >Chapter 13</A>, &quot;Employee Files.&quot;
There really is nothing new here. The application retrieves the
rows from the table and displays the data.
<H2><A NAME="Implementation"><FONT SIZE=5 COLOR=#FF0000>Implementation</FONT></A>
</H2>
<P>
In the rest of this chapter I will discuss the implementation
of the Online Employee Phonebook program. I'll first discuss the
user interface and how it was created. Secondly, I'll discuss
the database access used in the program. Finally, I'll cover any
programming pitfalls that came up during the application construction.
<P>
Each sample application in this book uses a different approach
to developing the user interface. This variety will show you the
different ways you can go about doing your own interfaces. Hopefully,
you will get a nice cross-section of many different styles and
choose the one that suits you the best.
<H3><A NAME="UserInterface">User Interface</A></H3>
<P>
To achieve the design goal presented above, you do not need special
user interface components. The stock <TT>BorderLayout</TT>
is sufficient. You'll also employ the <TT>JifTextArea</TT>
class and a button.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=576><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=576>
<BLOCKQUOTE>
In order to show the data separated by tabs, you use a <TT>TextArea</TT> component. Using a <TT>List</TT> component produces unstable results. Sometimes the columns will line up, sometimes they won't. Whenever you need evenly spaced text, use a 
<TT>TextArea</TT> com-ponent.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The following is the user interface construction code for the
Employee program:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;JifTextArea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
Constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;PhoneBookUI( SimpleDBJiflet jiflet )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super( jiflet
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLayout( new
BorderLayout() );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList = new
JifTextArea( 15, 40 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;Center&quot;,
empList );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JifPanel p = new
JifPanel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.setLayout( new
FlowLayout( FlowLayout.CENTER, 5, 5 ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton.setLabel(
&quot;Refresh&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveButton.disable();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.add( saveButton
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add( &quot;South&quot;,
p );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
First, set the layout to a new <TT>BorderLayout</TT>.
The <TT>JifTextArea</TT> component
is created and placed in the center of the layout. This is your
employee phone list. Referring to Figure 17.1, you'll see that
this list expands on all sides to fill the space.
<P>
Your Refresh button is next. You'll use a neat trick here: In
order to get an automatic notification that your button was pressed,
you'll rename the Save button to Refresh. This button is also
disabled.
<P>
Overriding the <TT>saveRecord()</TT>
method and placing any customized row-saving codes in it free
you from monitoring for special events, or even a new button's
events. For example, if you want to change the Save button's name
to something like Play, you could then override the <TT>saveRecord()</TT>
method to receive notification of the button being clicked. I'll
cover this in the database access section later in this chapter.
<P>
Figure 17.2 illustrates the layout of this application.
<P>
<A HREF="f17-2.gif" ><B>Figure 17.2 : </B><I>The layout of the Online Employee Phonebook.</I></A>
<H4>Handling the Refresh Button</H4>
<P>
You want your Refresh button to enable, or light up, when the
database connection has been established. To achieve this, you
override the default <TT>connectToDatabase()</TT>
method:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
connectToDatabase&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;connectToDatabase()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Call
my dad...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.connectToDatabase();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Get
all the news...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( getConnector().connected()
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Enable
the refresh button...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().saveButton.enable();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Load
the panel up...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadPanel();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
In the overridden method you call the base class' version. If
it is successful, you enable the Refresh button, and load up the
employee phone list.
<P>
Your Refresh button is really the Save button in sheep's clothing:
You change the text on it to say Refresh. Changing the text does
not alter its behavior. It still generates <TT>JifMessage.SAVE</TT>
application messages in your framework.
<P>
It still generates these messages because instead of checking
the text of the button when the initial <TT>ACTION_EVENT</TT>
event is generated, you check the event's target with the member
instance variables for all the buttons that you created in your
base <TT>SimpleDBUI</TT> class. 
<P>
What does this all mean to you? It means you can reliably change
the text of the Save button. When this occurs, you will receive
notification of the event by having your <TT>saveRecord()</TT>
method called.
<P>
To handle the refreshing of the employee list, you will utilize
the <TT>saveRecord()</TT> method:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
saveRecord&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;saveRecord()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadPanel();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( true );
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
The <TT>loadPanel()</TT> method is
called to load up the employee phone list.
<H3><A NAME="DatabaseAccess">Database Access</A></H3>
<P>
This program reuses the <TT>EmployeeRecord</TT>
object that was introduced in <A HREF="ch13.htm" >Chapter 13</A>.
It is a <BR>
versatile class that represents a single row in the employee table.
This <TT>DBRecord</TT> derivation
knows how to create, read, update, and delete records from the
employee table.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The <TT>EmployeeRecord</TT> and other database classes are reused in several other applications. They have been placed in their own package along with other shared code. This package is called <TT>jif.common</TT>. It contains all the common classes between 
all the applications.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
There is only a single database access area to this program: the
employee phone list retrieval.
<H4>Retrieving the Phone Numbers</H4>
<P>
At startup, and during the lifetime of the application, the database
needs to be queried, and the results displayed for the user. These
results are massaged data columns taken from the database.
<P>
Retrieve all of the employees for display:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
loadPanel&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;loadPanel()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String sql = &quot;select
* from emp&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Clear
out the old stuff...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().clearScreen();
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( getConnector().getStatement().execute( sql ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
rs = getConnector().getStatement().getResultSet();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
row = 0;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
( rs.next() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmployeeRecord
er = new EmployeeRecord( rs );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setDBRecord(
er );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUIPanel().moveToScreen();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorLog(
&quot;Error during loading: &quot; + e.toString() );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
This retrieval issues an SQL query that returns all of the employees
in your employee table. Each returned row is stored into an <TT>EmployeeRecord</TT>
object. The stored row is then placed into a <TT>Vector</TT>
for later use.
<P>
Notice that the employee phone list is never populated here because
you've placed that code in the <TT>moveToScreen()</TT>
method of your user interface class. It is only there that data
is moved to the screen. Before it can move data to your list,
though, you need to tell the base class which <TT>DBRecord</TT>
to use. This is done with the call to <TT>setDBRecord()</TT>.
<P>
The <TT>moveToScreen()</TT> code is
quite simple:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
moveToScreen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;moveToScreen()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( getJiflet().getDBRecord()
== null )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Cast
one off...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmployeeRecord
er = ( EmployeeRecord )getJiflet().getDBRecord();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s = er.first_name
+ &quot; &quot; + er.last_name + &quot;\t\t&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( er.work_ext_nbr
== null )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= &quot;(None)&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= er.work_ext_nbr;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s +=&quot;\t&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( er.home_phone_nbr
== null )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= &quot;(None)&quot;;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s
+= er.home_phone_nbr;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s += System.getProperty(
&quot;line.separator&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;empList.appendText(
s );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}</TT>
</BLOCKQUOTE>
<P>
Here, you retrieve the <TT>EmployeeRecord</TT>
from your <TT>jiflet</TT>, concatenating
the first and last names with a string holding the employees'
work extensions and their home phone numbers.
<H2><A NAME="ProgrammingConsiderations"><FONT SIZE=5 COLOR=#FF0000>Programming
Considerations</FONT></A></H2>
<P>
Aside from the database access, this application is another simple
one in your intranet application suite. It does nothing more than
list the rows in the employee table in a visually pleasing format.
<P>
This application presented you with very little challenge. You
needed to present an intuitive interface to the user, while making
it effortless to use. You did this by using the <TT>JifTextArea</TT>
class.
<P>
To recap, this application introduced the following Java intranet
programming topics:
<UL>
<LI><FONT COLOR=#000000>Refresh button usage:</FONT>
<LI>You used a button to allow the user to manually refresh the
list of phone numbers.
<LI><FONT COLOR=#000000>Overriding row storage method:</FONT>
<LI>You overrode the <TT>saveRecord()</TT>
method of the main class to call your refresh method, <TT>loadPanel()</TT>.
<LI><FONT COLOR=#000000>No SQL generation here!:</FONT>
<LI>This application is completely free of SQL generation. It
is never generated for any components.
</UL>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
This chapter introduced you to the fifth sample application in
your intranet application suite: the Online Employee Phonebook.
This program is not responsible for updating any data; it is completely
read-only. This program will be useful for any employee who needs
to know the phone numbers of another employee.
<P>
In <A HREF="ch18.htm" >Chapter 18</A>, &quot;News and Announcements,&quot;
you will design and create an application that will display important
company news and announcements. This program will allow employees
to know what is going on at all times.

<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch16.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch18.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
