<HTML>

<HEAD>
   <TITLE>Chapter 10 -- Database Classes</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0b5aGold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#CE2910">
<H1><FONT COLOR=#FF0000>Chapter 10</FONT></H1>
<H1><B><FONT SIZE=5 COLOR=#FF0000>Database Classes</FONT></B>
</H1>
<P>
<HR WIDTH="100%"></P>
<P>
<H3 ALIGN=CENTER><FONT COLOR="#000000"><FONT SIZE=+2>CONTENTS<A NAME="CONTENTS"></A>
</FONT></FONT></H3>


<UL>
<LI><A HREF="#Introduction" >Introduction</A>
<LI><A HREF="#JDBCinDepth" >JDBC in Depth</A>
<UL>
<LI><A HREF="#TheDriverManagerClass" >The DriverManager Class</A>
<LI><A HREF="#TheDriverClass" >The Driver Class</A>
<LI><A HREF="#TheConnectionClass" >The Connection Class</A>
<LI><A HREF="#TheStatementClass" >The Statement Class</A>
<LI><A HREF="#TheResultSetClass" >The ResultSet Class</A>
<LI><A HREF="#AJDBCSampleProgram" >A JDBC Sample Program</A>
</UL>
<LI><A HREF="#MakingJDBCEasytoUse" >Making JDBC Easy to Use</A>
<UL>
<LI><A HREF="#TheConnectorInterface" >The Connector Interface</A>
<LI><A HREF="#TheSQLFactoryInterface" >The SQLFactory Interface</A>
</UL>
<LI><A HREF="#TheClasses" >The Classes</A>
<UL>
<LI><A HREF="#TheDBConnectorClass" >The DBConnector Class</A>
<LI><A HREF="#OracleSequence" >OracleSequence</A>
</UL>
<LI><A HREF="#Summary" >Summary</A>
</UL>
<HR>
<P>
<I><B><FONT SIZE=5 COLOR=#000000>da ta base \da'te-bas'</FONT><FONT SIZE=5>&nbsp;\
n:</FONT></B><FONT SIZE=5> a store of data</FONT></I>
<H2><A NAME="Introduction"><FONT SIZE=5 COLOR=#FF0000>Introduction</FONT></A>
</H2>
<P>
Now that you have some of the easier classes under your belt,
it is time to start digging into some more advanced issues. The
main thrust of this chapter is to introduce you to some interfaces
and classes that will help your intranet applications communicate
with databases.
<P>
This chapter builds on the classes in <A HREF="ch8.htm" >Chapter 8</A>,
&quot;Utility Classes,&quot; and <A HREF="ch9.htm" >Chapter 9</A>,
&quot;Logging Classes.&quot; You'll also build on Sun's own JDBC
classes for Java to provide enhanced functionality and a higher
level of access for your applications.
<P>
This chapter will take two forks or paths. The first is the database
connection path. You will design and create a connection class
that you can use to connect to almost any JDBC data source. You
will use this connection class throughout the rest of the book
and in the applications developed in later chapters.
<P>
The second path is that of database maintenance. Writing SQL statements
to update your database is a dull and dreary task, but as you'll
see, you can automate the task just a little, making this bogus
task almost fun.
<P>
But before you even start talking about new classes, let's take
a look deep inside JDBC.
<H2><A NAME="JDBCinDepth"><FONT SIZE=5 COLOR=#FF0000>JDBC in Depth</FONT></A>
</H2>
<P>
If you're not familiar with JDBC, please go back and read the
JDBC section of <A HREF="ch6.htm" >Chapter 6</A>, &quot;Database
Connectivity Options,&quot; where you will find a thorough overview
of JDBC. In this chapter, you will investigate the classes that
make up the JDBC class hierarchy and how to use them. For your
convenience, the JDBC class hierarchy is shown again in Figure
10.1.
<P>
<A HREF="f10-1.gif" ><B>Figure 10.1 : </B><I>The JDBC class hierarchy.</I></A>
<P>
JDBC is a rich set of classes that give you transparent access
to a database with a single application programming interface,
or API. This access is done with plug-in platform-specific modules,
or drivers. Various database manufacturers provide these drivers.
Using these drivers and the JDBC classes, your programs will be
able to access consistently any database that supports JDBC, giving
you total freedom to concentrate on your applications and not
to worry about the underlying database.
<P>
The JDBC class hierarchy lives in the <TT>java.sql</TT>
package. As you can see in Figure 10.1, many of the classes in
the JDBC hierarchy are <TT>abstract</TT>.
It is up to the database vendor to provide implementations of
these classes for its customers.
<P>
All access to JDBC data sources is done through SQL. Sun has concentrated
on JDBC issuing SQL commands and retrieving their results in a
consistent manner. Though you gain so much ease by using this
SQL interface, you do not have the &quot;raw&quot; database access
that you might be used to. With the classes you can open a connection
to a database, execute SQL statements, and do what you will with
the results, however. Don't forget that SQL statements can create
database objects such as tables, views, synonyms, triggers, stored
procedures, and so on. Don't think that JDBC is limited.
<H3><A NAME="TheDriverManagerClass">The <TT><FONT SIZE=4 FACE="Courier">DriverManager</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The cornerstone of the JDBC package is the <TT>DriverManager</TT>
class. This class keeps track of all the different available database
drivers. For you Bozo fans out there, think of it as Ringmaster
Ned. The <TT>DriverManager</TT> manages
loading and unloading drivers. Just as Ringmaster Ned is essential
for introducing new circus acts, the <TT>DriverManager</TT>
is instrumental in creating new database connections.
<P>
You the programmer won't usually see the <TT>DriverManager</TT>'s
work, though. This class mostly works behind the scenes to ensure
that everything is cool for your connections.
<P>
The <TT>DriverManager</TT> maintains
a <TT>Vector</TT> that holds information
about all the drivers that it knows about. The elements in the
<TT>Vector</TT> contain information
about the driver such as the class name of the <TT>Driver</TT>
object, a copy of the actual <TT>Driver</TT>
object, and the <TT>Driver</TT> security
context.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD>
<BLOCKQUOTE>
The security context is an implementation-dependent object that defines the environment on which the application is running. This information is usually enough for Java to perform security checks.</BLOCKQUOTE>
<BLOCKQUOTE>
When the <TT>DriverManager</TT> opens or queries a <TT>Driver</TT>, the security context of the <TT>Driver</TT> will be checked against the security context of your application. If they don't jive, the <TT>Driver</TT> will not be loaded.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT>DriverManager</TT>, while
not a <TT>static</TT> class, maintains
all <TT>static</TT> instance variables
with <TT>static</TT> access methods
for registering and unregistering drivers. This allows the <TT>DriverManager</TT>
never to need instantiation. Its data always exists as part of
the Java runtime.
<P>
The drivers managed by the <TT>DriverManager</TT>
class are represented by the <TT>Driver</TT>
class.
<H3><A NAME="TheDriverClass">The <TT><FONT SIZE=4 FACE="Courier">Driver</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
If the cornerstone of JDBC is the <TT>DriverManager</TT>,
then the <TT>Driver</TT> class is
most certainly the bricks that build the JDBC. The <TT>Driver</TT>
is the software wedge that communicates with the platform-dependent
database, either directly or using another piece of software.
How it communicates really depends on the database, the platform,
and the implementation. Figure 10.2 illustrates the software layers
in a Java JDBC application connection to a database.
<P>
<A HREF="f10-2.gif" ><B>Figure 10.2 : </B><I>The Java-JDBC database.</I></A>
<P>
You must create each <TT>Driver</TT>
in your program or you can have them pre-loaded for you by specifying
the class names of the driver you wish to have pre-loaded. To
do this, you need to specify a value for the system property called
<TT>jdbc.drivers</TT>. This property
needs to contain the fully qualified class name of each <TT>Driver</TT>
separated by a colon (:), which allows the <TT>DriverManager</TT>
to instantiate the class because it knows how to find classes
in your <TT>CLASSPATH</TT>.
<P>
As an example, a sample property setting follows:
<BLOCKQUOTE>
<TT>jdbc.drivers=weblogic.jdbc.oci.Driver:jdbc.odbc.JdbcOdbcDriver</TT>
</BLOCKQUOTE>
<P>
This example will load WebLogic's Oracle driver and the JDBC-ODBC
bridge drivers. If you were using Sun's HotJava browser, this
line would go in your <TT>.hotjava/properties</TT>
file. You can also start your programs with the following code
as a command-line argument:
<BLOCKQUOTE>
<TT>java -Djdbc.drivers=weblogic.jdbc.oci.Driver:jdbc.odbc.JdbcOdbcDriver
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;MyApplication</TT>
</BLOCKQUOTE>
<P>
For your purposes, you will place them in your application configuration
files and let your <TT>ConfigProperties</TT>
class move it for us.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The <TT>ConfigProperties</TT> class checks each property string that it contains for the <TT>jdbc.drivers</TT> and copies it to the system properties list for you.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
After a <TT>Driver</TT> is constructed,
you really never need to worry about it again. In fact, if you
use the <TT>jdbc.drivers</TT> property
as outlined above, you never even have to create driver objects.
<P>
It is the <TT>Driver</TT>'s responsibility
to register with the <TT>DriverManager</TT>
and connect with the database. Database connections are represented
by the <TT>Connection</TT> class.
<H3><A NAME="TheConnectionClass">The <TT><FONT SIZE=4 FACE="Courier">Connection</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT>Connection</TT> class encapsulates
the actual database connection into an easy-to-use package. Sticking
with your foundation building analogy here, the <TT>Connection</TT>
class is the mortar that binds the JDBC together. It is created
by the <TT>DriverManager</TT> when
its <TT>getConnection()</TT> method
is called. This method accepts a database connection URL and returns
a database <TT>Connection</TT> to
the caller.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=556><B>The Database Connection URL</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=556>
<BLOCKQUOTE>
To connect with a JDBC data source, a uniform resource locator, or URL, is used. The format follows:</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>jdbc:&lt;sub-protocol&gt;:&lt;sub-name&gt;</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
where</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>sub-protocol</TT> is the name of the driver set that defines a particular database connectivity method. This can be represented by several drivers.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>sub-name</TT> is the additional information necessary to complete the URL. This information is different depending on the <TT>sub-protocol</TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
You are undoubtedly familiar with HTTP URLs. The JDBC URL simply prepends a <TT>jdbc</TT>.
</BLOCKQUOTE>
<BLOCKQUOTE>
Let's look at an example JDBC URL. Let's say you want to connect with an mSQL data source on host <TT>hermy.munster.com</TT> on port <TT>4333</TT>. The instance name is simply called data. The connection URL would be
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>jdbc:msql://hermy.munster.com:4333/data</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>msql</TT> is the sub-protocol, and <TT>//hermy.munster.com:4333/data</TT> is the sub-name.
</BLOCKQUOTE>
<BLOCKQUOTE>
To connect with an Oracle data source with the <TT>jdbcKona</TT> drivers from WebLogic, the following URL:
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>jdbc:weblogic:oracle</TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
is sufficient. This is because the <TT>jdbcKona</TT> drivers use Oracle's SQL*Net software, which maintains its own set of network addresses for database instances. All it needs to know is the type of database with which it is connecting.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
Remember that <TT>Vector</TT> that
holds driver information in the <TT>DriverManager</TT>
class? Well, here's where you'll use it.
<P>
When you call the <TT>getConnection()</TT>
method, the <TT>DriverManager</TT>
asks each driver that has registered with it whether the database
connection URL is valid. If one driver responds positively, the
<TT>DriverManager</TT> assumes a match.
If no driver responds positively, an <TT>SQLException</TT>
is thrown. The <TT>DriverManager</TT>
returns the error &quot;no suitable driver,&quot; which means
that of all the drivers that the <TT>DriverManager</TT>
knows about, not one of them could figure out the URL you passed
to it.
<P>
Assuming that the URL was good and a <TT>Driver</TT>
stepped up to the plate and said, &quot;I can handle this!&quot;,
then the <TT>DriverManager</TT> will
return a <TT>Connection</TT> object
to you. What can you do with a <TT>Connection</TT>
object? Not much. This class is nothing more than an encapsulation
of your database connection. It is a factory and manager object,
and is responsible for creating and managing <TT>Statement</TT>
objects.
<H3><A NAME="TheStatementClass">The <TT><FONT SIZE=4 FACE="Courier">Statement</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
Picture your <TT>Connection</TT> as
an open pipeline to your database. Database transactions travel
back and forth between your program and the database through this
pipeline. The <TT>Statement</TT> class
represents these transactions.
<P>
The <TT>Statement</TT> class encapsulates
SQL queries to your database. Using several methods, these calls
return objects that contain the results of your SQL query. When
you execute an SQL query, the data that is returned to you is
commonly called the result set. You can choose from several result
sets, depending on your needs:
<UL>
<LI><TT>ResultSet executeQuery( String sqlStatement
)<BR>
</TT>This method sends the SQL query contained in <TT>sqlStatement</TT>
and returns a single set of results. This method is best used
in sending <TT>SELECT</TT> statements.
These statements typically return a result set.
<LI><TT>int executeUpdate( String sqlStatement
)<BR>
</TT>This method sends the SQL query contained in <TT>sqlStatement</TT>
and returns an integer. This method is useful when you send SQL
<TT>INSERT</TT>s, <TT>DELETE</TT>s,
and <TT>UPDATE</TT>s. These commands
return a count of rows that were affected by your query. This
statement should not be used for queries that return result sets.
<LI><TT>boolean execute( String sqlStatement
)<BR>
</TT>This method sends the <TT>sqlStatement</TT>
to the database and returns <TT>true</TT>
if the statement returns a result set or <TT>false</TT>
if the statement returns an integer. This method is best used
when multiple result sets can be returned.
</UL>
<P>
Use the following methods to easily navigate the results a query
returns:
<UL>
<LI><TT>boolean getMoreResults()<BR>
</TT>This moves to the next result set in the <TT>Statement</TT>.
This, like the <TT>execute()</TT>
method, returns <TT>true</TT> if the
next result is a result set or <TT>false</TT>
if it is an integer. If you have already retrieved a <TT>ResultSet</TT>
from the <TT>Statement</TT>, this
method will close it before returning.
<LI><TT>ResultSet getResultSet()<BR>
</TT>This method returns to you a result set in a <TT>ResultSet</TT>
object. This result set is the current result set.
<LI><TT>int getUpdateCount()<BR>
</TT>This method returns to you the integer result that
an <TT>execute()</TT> method returned.
</UL>
<P>
By now you are probably wondering what this <TT>ResultSet</TT>
class is all about, and how it can possibly hold all that data.
Well, it's quite a class, as you are about to see.
<H3><A NAME="TheResultSetClass">The <TT><FONT SIZE=4 FACE="Courier">ResultSet</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
As you've probably guessed, the <TT>ResultSet</TT>
class encapsulates the results returned from an SQL query. Normally,
those results are in the form of rows of data. Each row contains
one or more columns. The <TT>ResultSet</TT>
class acts as a cursor, pointing to one record at a time, enabling
you to pick out the data you need.
<H4>Gaining Access to a Column's Data</H4>
<P>
You can gain access to the data within the <TT>ResultSet</TT>
using many different methods. These methods are in the form of
<TT>get<I>type</I>()</TT>, where <TT><I>type</FONT></I></TT>
is the data type of the column. These functions return a new instance
of the type that contains the data from the result set. If the
column value is <TT>NULL</TT>, the
value returned from these methods is <TT>NULL</TT>.
<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD ><B>Note</B></TD></TR>
<TR VALIGN=TOP><TD >
<BLOCKQUOTE>
The <TT>NULL</TT> value in database lingo is not the same as the <TT>NULL</TT> value in programming languages. Programming <TT>NULL</TT>s usually indicate zero or nothing. In database storage, however, the <TT>NULL</TT> value indicates the lack of a value, 
enabling zeroes to be stored, giving you clear indication that a column has not been set or modified.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
You can access the column's data either by column number or name.
Sometimes you might know the column number, sometimes you might
not. These methods give you the flexibility to access the columns
either way.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=569><B>Tip</B></TD></TR>
<TR VALIGN=TOP><TD WIDTH=569>
<BLOCKQUOTE>
Accessing the columns by name does present more overhead than accessing them by column. In performance-critical applications, consider accessing your data by column number.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The following list presents the <TT>get<I>type</I>()</TT>
methods provided by the <TT>ResultSet</TT>
class and their return types:
<UL>
<LI><TT>String getString()</TT>
<LI><TT>boolean getBoolean()</TT>
<LI><TT>byte getByte()</TT>
<LI><TT>short getShort</TT>()
<LI><TT>int getInt()</TT>
<LI><TT>long getLong()</TT>
<LI><TT>float getFloat()</TT>
<LI><TT>double getDouble()</TT>
<LI><TT>Numeric getNumeric()</TT>
<LI><TT>byte[] getBytes()</TT>
<LI><TT>java.sql.Date getDate()</TT>
<LI><TT>java.sql.Time getTime()</TT>
<LI><TT>java.sql.Timestamp getTimestamp()</TT>
<LI><TT>java.io.InputStream getAsciiStream()</TT>
<LI><TT>java.io.InputStream getUnicodeStream()</TT>
<LI><TT>java.io.InputStream getBinaryStream()</TT>
</UL>
<H4>Getting to the Next Row</H4>
<P>
When you've retrieved all the data you can from a column, it is
time to move on to the next row. Moving to the next row is done
with the <TT>next()</TT> method. This
method returns a boolean value indicating the status of the row.
Internally, it moves the <TT>ResultSet</TT>'s
cursor to the next row, thereby giving access to the data stored
in the columns of that row.
<P>
When a <TT>ResultSet</TT> object is
created, its position is always before the first row of data contained
within. This makes it necessary to call the <TT>next()</TT>
method before you can access any column data. The first call to
<TT>next()</TT> makes the first row
available to your program. Subsequent calls to <TT>next()</TT>
make the next rows available. If no more rows are available, <TT>next()</TT>
returns <TT>false</TT>.
<H3><A NAME="AJDBCSampleProgram">A JDBC Sample Program</A></H3>
<P>
Programming concepts aren't always clear when you read about them,
therefore a small example of JDBC program is definitely in order.
The following program in Listing 10.1 is a sample program that
illustrates the concepts presented so far. These concepts follow:
<UL>
<LI><FONT COLOR=#000000>Connecting to a JDBC data source</FONT>
<LI><FONT COLOR=#000000>Executing a query</FONT>
<LI><FONT COLOR=#000000>Parsing the results of the query</FONT>
</UL>
<P>
<HR>
<BLOCKQUOTE>
<B>Listing 10.1. A sample JDBC program.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
Imports&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
import&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.sql.*;
<BR>
<BR>
//****************************************************************************
<BR>
//* 
JDBCExample&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
JDBCExample<BR>
{<BR>
<BR>
//****************************************************************************
<BR>
//* 
main&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public static void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;main( String args[] )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;throws Exception<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Find
the class...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class.forName(
&quot;weblogic.jdbc.oci.Driver&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Open
a connection...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection myConnection
= DriverManager.getConnection(<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;jdbc:weblogic:oracle:tcp-loopback.world&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;scott&quot;,
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;tiger&quot;
);<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Create
a statement...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement myStatement
= myConnection.createStatement();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Execute
a query...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Execute
the query...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myStatement.execute(
&quot;select * from emp&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Get
the result set...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
mySet = myStatement.getResultSet();<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Advance
to the next row...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while
( mySet.next() )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Get
the data...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int
empno = mySet.getInt( &quot;empno&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String
ename = mySet.getString( &quot;ename&quot; );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long
salary = mySet.getLong( &quot;sal&quot; );<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Print
it all out...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(
Integer.toString( empno ) + &quot; - &quot; +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ename
+ &quot; - &quot; + Integer.toString( empno ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(
&quot;SQL Error: &quot; + e.toString() );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Close
everything up...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myStatement.close();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myConnection.close();
<BR>
&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
This program uses <TT>jdbcKona</TT>
drivers to communicate with a Personal Oracle7 database on a local
machine. When Personal Oracle7 is installed, it creates a database
alias called <BR>
<TT>tcp-loopback.world</TT>. You will
connect with this alias in this example. Also included with Personal
Oracle7 is a set of sample tables with data. This program will
retrieve and print three of the columns from the <TT>employee</TT>
table that comes with Personal Oracle7.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=590><BLOCKQUOTE>
<B>What is Personal Oracle7</B>?
</BLOCKQUOTE>

</TD></TR>
<TR VALIGN=TOP><TD WIDTH=590><BLOCKQUOTE>
Personal Oracle7 is a single-user Oracle product. It runs in either Windows 95 or Windows NT, and provides all of the functionality of the full-blown Oracle server product at a fraction of the cost. It is an excellent tool with which database developers 
can tune their craft; it is also good for application development.</BLOCKQUOTE>
<BLOCKQUOTE>
However, Personal Oracle7 is not like many desktop databases on the market today. There is really no comparison between Personal Oracle7 and Microsoft Access. Access provides you with a complete development environment rife with tools. Personal Oracle7 is 
simply a database and provides no user-friendly development tools such as wizards. Personal Oracle7 does come with a very nice interface program that lets you edit many database objects with dialog boxes instead of with SQL statements.</BLOCKQUOTE>
<BLOCKQUOTE>
Personal Oracle7 can be downloaded for a free trial from the Oracle Web site at</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><A HREF="http://www.oracle.com">http://www.oracle.com</A></TT>
</BLOCKQUOTE>
<BLOCKQUOTE>
Information about Microsoft Access can be found at</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><A HREF="http://www.microsoft.com">http://www.microsoft.com</A></TT>
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<H2><A NAME="MakingJDBCEasytoUse"><FONT SIZE=5 COLOR=#FF0000>Making
JDBC Easy to Use</FONT></A></H2>
<P>
To make JDBC even easier to use in your intranet applications,
you're going to create a set of interfaces and classes. These
objects will greatly simplify your use of JBDC and database programming
in general.
<P>
As you have been doing, you'll look at the interfaces first then
move on to the classes. Two interfaces in particular will be useful
to us: <TT>Connector</TT> and <TT>SQLFactory</TT>.
They both provide very different functions, so let's cover them
individually.
<H3><A NAME="TheConnectorInterface">The <TT><FONT SIZE=4 FACE="Courier">Connector</TT></FONT><FONT SIZE=4>
Interface</FONT></A></H3>
<P>
The <TT>Connector</TT> interface defines
the pattern or template that a class must follow to comply with
your database connection standard, JDBC. The standard is defined
by this interface, however, for the most part. By extending this
interface, you are extending the standard. The <TT>Connector</TT>
is the place to implement the functionality your applications
required.
<P>
The <TT>Connector</TT> interface defines
four standard methods, which follow:
<UL>
<LI><TT>connect</TT>: Connects with
a data source
<LI><TT>disconnect</TT>: Disconnects
from a data source
<LI><TT>connected</TT>: Indicates
the connection status
<LI><TT>getConnectionURL</TT>: Returns
an URL used for connecting to a JDBC data source
</UL>
<P>
Let's take a look at each of these interface methods.
<H4>The <TT>connect</TT> Method</H4>
<P>
The <TT>connect</TT> method is defined
as follows:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
connect&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;connect( String <I>user</I>, String <I>password</I>,
String <I>server</I> );</TT>
</BLOCKQUOTE>
<P>
The user's name and password and the server where the data exists
are accepted as input arguments. The third parameter, the server
where the data exists, might be optional with some <TT>Connector</TT>
implementations, but I have included it here for completeness.
<P>
The <TT>getConnectionURL</TT> method
used this information to connect with a JDBC data source. The
implementor must connect to the database in this method.
<H4>The <TT>disconnect</TT> Method
</H4>
<P>
The <TT>disconnect</TT> method is
defined as follows:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
disconnect&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;disconnect();</TT>
</BLOCKQUOTE>
<P>
Nothing spectacular here. The implementor must disconnect from
the database in this method.
<H4>The <TT>connected</TT> Method
</H4>
<P>
The <TT>connected</TT> method simply
returns <TT>true</TT> or <TT>false</TT>
if the object is currently connected to a database. The method
is defined as follows:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
connected&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public boolean<BR>
&nbsp;&nbsp;&nbsp;&nbsp;connected();</TT>
</BLOCKQUOTE>
<P>
The implementor must keep track of the connection status and report
on it through this method.
<H4>The <TT>getConnectionURL</TT>
Method</H4>
<P>
The final method in the <TT>Connector</TT>
interface is the <TT>getConnectionURL</TT>
method. It is defined as follows:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
constructConnectionURL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getConnectionURL()</TT>
</BLOCKQUOTE>
<P>
The connection URL is used to connect with a JDBC data source.
It is up to the implementor of this interface to return the correct
connection URL for the database with which it is working.
<H3><A NAME="TheSQLFactoryInterface">The <TT><FONT SIZE=4 FACE="Courier">SQLFactory</TT></FONT><FONT SIZE=4>
Interface</FONT></A></H3>
<P>
The second interface you need is one with which you can create
classes that generate SQL statements for the objects that they
contain. The implementor of this interface decides the method
of generation.
<P>
Why would you want to generate SQL on-the-fly? Because with SQL,
you can build smart objects that will know and keep track of whether
they have been modified. If you then place these smart objects
into a smart container, the container can produce an SQL statement
to update the database. But there needs to be a template or pattern
for these smart objects to follow, and that's where the <TT>SQLFactory</TT>
class comes in.
<P>
The <TT>SQLFactory</TT> interface
exists to provide a common set of methods for objects to use to
generate SQL. The SQL generated is used to send information back
to the database when values change. <A HREF="ch11.htm" >Chapter 11</A>,
&quot;User Interface Classes,&quot; contains some classes that
implement this interface.<BR>
<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD WIDTH=582>
<B>Note</B>
</TD>
</TR>
<TR VALIGN=TOP><TD WIDTH=582><BLOCKQUOTE>
<A HREF="ch6.htm" >Chapter 6</A> discussed the <TT>INSERT</TT> and <TT>UPDATE</TT> SQL commands. These two commands are used to ins ert and update records, or rows, in a database and are the subject of these interface methods.
</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
The <TT>SQLFactory</TT> interface
defines several methods. Two methods are very important: <TT>generateUpdateSQL</TT>
and <TT>generateInsertSQL</TT>.
<H4>The <TT>generateUpdateSQL</TT>
Method</H4>
<P>
This method is defined as follows:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
generateUpdateSQl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String<BR>
&nbsp;&nbsp;&nbsp;&nbsp;generateUpdateSQL( boolean addSet );</TT>
</BLOCKQUOTE>
<P>
The <TT>generateUpdateSQL</TT> method
takes a single argument: <TT>addSet</TT>.
In an SQL <TT>UPDATE</TT> statement,
you must place the keyword <TT>SET</TT>
in front of the very first column. By setting this argument to
<TT>true</TT>, a <TT>SET</TT>
is placed in front of the <TT>UPDATE</TT>
SQL returned. Sample return values follow:
<BLOCKQUOTE>
<TT>emp_salary = 75000 if addSet is set to
false</TT>
</BLOCKQUOTE>
<P>
<FONT SIZE=2>or</FONT>
<BLOCKQUOTE>
<TT>SET emp_salary = 750000 if addSet is
set to true</TT>
</BLOCKQUOTE>
<P>
These statements can be concatenated and used in an SQL <TT>UPDATE</TT>
statement.
<H4>The <TT>generateInsertSQL</TT>
Method</H4>
<P>
This method is defined as follows:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
generateInsertSQL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public String<BR>
&nbsp;&nbsp;&nbsp;&nbsp;generateInsertSQL( boolean addParen );</TT>
</BLOCKQUOTE>
<P>
The <TT>generateInsertSQL</TT> method
takes a single argument: <TT>addParen</TT>.
In an SQL <TT>INSERT</TT> statement,
you must place an opening parenthesis (<TT>(</TT>)
in front of the very first column. By setting this argument to
<TT>true</TT>, the parenthesis is
placed in front of the <TT>INSERT</TT>
SQL returned. Sample return values follow:
<BLOCKQUOTE>
<TT>emp_salary = 75000 if addParen is set
to false</TT>
</BLOCKQUOTE>
<P>
<FONT SIZE=2>or</FONT>
<BLOCKQUOTE>
<TT>( emp_salary = 750000 if addParen is
set to true</TT>
</BLOCKQUOTE>
<P>
These statements can be concatenated and used in an SQL <TT>INSERT</TT>
statement.
<H2><A NAME="TheClasses"><FONT SIZE=5 COLOR=#FF0000>The Classes</FONT></A>
</H2>
<P>
Let's create some classes to access these JDBC data sources. The
first class you'll create should encapsulate the connection to
a particular database. This class also should implement the <TT>Connector</TT>
interface you've just defined. You might want to build several
of these specialized connection classes however, so you'll place
all of your base functionality into an abstract class, then create
subclasses of it that implement the database specifics.
<P>
The first class, <TT>DBConnector</TT>,
is the abstract base class. You will use it as a basis for specific
database connection objects. Several classes will be derived from
this base class:
<UL>
<LI><TT>MSQLConnector</TT>: Connects
to mSQL data sources
<LI><TT>MSSQLServerConnector</TT>:
Connects to Microsoft SQL Server data sources
<LI><TT>ODBcconnector</TT>: Connects
to ODBC data sources
<LI><TT>OracleConnector</TT>: Connects
to Oracle data sources
<LI><TT>SybaseConnector</TT>: Connects
to Sybase data sources
</UL>
<P>
These classes really do nothing more than provide the base class
with a database URL with which to connect. The <TT>DriverManager</TT>
does the real work.
<P>
The last two classes that you've built for your intranet are the
<TT>OracleSequence</TT> and the <TT>SequenceGenerator</TT>
classes.
<P>
<TT>OracleSequence</TT> uses Oracle's
sequence object to create the unique number. This object is Oracle's
internal counter. When you query it for its next value, it increments
its counter and stores the result. It also returns the result
to you. Because not everyone will have access to Oracle sequences,
however, the <TT>SequenceGenerator</TT>
class is provided.
<P>
The <TT>SequenceGenerator</TT> class
provides the exact same functionality as the <TT>OracleSequence</TT>
class but in a generic manner that can be used with any database.
<P>
Let's look at some classes in depth.
<H3><A NAME="TheDBConnectorClass">The <TT><FONT SIZE=4 FACE="Courier">DBConnector</TT></FONT><FONT SIZE=4>
Class</FONT></A></H3>
<P>
The <TT>DBConnector</TT> class encapsulates
a lot of the repetitive tasks that are needed to connect with
a JDBC data source. It is an abstract class; therefore, it is
incomplete. You cannot instantiate the <TT>DBConnector</TT>
class directly; you can only instantiate its derivatives.
<P>
The declaration of the <TT>DBConnector</TT>
class follows:
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
DBConnector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
public abstract class<BR>
DBConnector<BR>
implements Connector</TT>
</BLOCKQUOTE>
<P>
The <TT>DBConnector</TT> class implements
the <TT>Connector</TT> interface but
not the entire interface. Extensions of this class must implement
one method, <TT>getConnectionURL</TT>;
therefore it is declared abstract.
<H4>Instance Variables</H4>
<P>
The <TT>DBConnector</TT> class has
several important instance variables:
<UL>
<LI><TT>protected Connection myConnection</TT>:
Holds a JDBC <TT>Connection</TT> object
for talking to the database
<LI><TT>protected Statement myStatement</TT>:
Holds a JDBC <TT>Statement</TT> object
for executing SQL queries
<LI><TT>protected boolean isConnected</TT>:
Holds an indicator of the connection status
<LI><TT>protected String lastError</TT>:
Holds the last error that occurred, if any
</UL>
<P>
All of these instance variables are protected. Only <TT>myStatement</TT>
is available outside of the <TT>DBConnector</TT>
hierarchy through the <TT>getStatement()</TT>
method. This class is mainly used to execute database queries.
<H3><A NAME="OracleSequence"><TT><FONT SIZE=4 FACE="Courier">OracleSequence</TT></FONT></A>
</H3>
<P>
A sequence is a database object that provides unique numbers for
storing in the database. For example, you could set up a sequence
to provide new employee identification numbers for your employee
table. This sequence would then generate the numbers for you.
<P>
This class encapsulates using an Oracle sequence. The sequence
must exist for this class to work. If you don't have any sequences,
you can create one with the following command:
<BLOCKQUOTE>
<TT>CREATE SEQUEncE <I>sequence name</I>
IncREMENT BY <I>increment</I> START<BR>
&nbsp;&nbsp;&nbsp;&nbsp;WITH <I>starting value</I></TT>
</BLOCKQUOTE>
<P>
where
<BLOCKQUOTE>
<TT><I>sequence name</FONT></I></TT> is the
name you wish to call the sequence.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>increment</FONT></I></TT> is the amount
to increment each time.
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT><I>starting value</FONT></I></TT> is
the value at which to start the sequence.<BR>
</BLOCKQUOTE>

<P><CENTER><TABLE BORDERCOLOR=#000000 BORDER=1 WIDTH=80%>
<TR VALIGN=TOP><TD><B>Note</B>
</TD>
</TR>
<TR VALIGN=TOP><TD><BLOCKQUOTE>
The preceding command line is only enough to get by. Many more command options are available. Consult your Oracle manual for more information.</BLOCKQUOTE>

</TD></TR>
</TABLE></CENTER>
<P>
<P>
This class provided two methods: <TT>getCurrentValue()</TT>
and <TT>getNextValue()</TT>. Each
returns <TT>int</TT>s and provides
the current and next values of the Oracle sequence. Listing 10.2
shows the source code for the <TT>OracleSequence</TT>
class.<BR>
<HR>
<BLOCKQUOTE>
<B>Listing 10.2. The </B><TT><B>OracleSequence</FONT></B></TT><B>
class.<BR>
</B>
</BLOCKQUOTE>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
OracleSequence&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
public class<BR>
OracleSequence<BR>
{<BR>
//****************************************************************************
<BR>
//* 
Members&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* The name of the database sequence<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mySequenceName;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;/**<BR>
&nbsp;&nbsp;&nbsp;&nbsp;* The name of the database sequence<BR>
&nbsp;&nbsp;&nbsp;&nbsp;*/<BR>
&nbsp;&nbsp;&nbsp;&nbsp;OracleConnector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myConnection;
<BR>
//****************************************************************************
<BR>
//* 
Constructors&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public<BR>
&nbsp;&nbsp;&nbsp;&nbsp;OracleSequence( OracleConnector connector,
String sequenceName )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myConnection =
connector;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mySequenceName
= sequenceName;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
//****************************************************************************
<BR>
//* 
getNextValue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getNextValue()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( getDBSequenceValue(
false ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
getCurrentValue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;public int<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getCurrentValue()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( getDBSequenceValue(
true ) );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
//****************************************************************************
<BR>
//* 
getDBSequenceValue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected int<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getDBSequenceValue( boolean currentVal
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Placeholder
for the value...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentValue
= 0;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;This
statement retrieves the current <BR>
value from the database<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String sql;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( currentVal
)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql
= &quot;select &quot; + mySequenceName + &quot;.currval from dual&quot;;
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sql
= &quot;select &quot; + mySequenceName + &quot;.nextval from dual&quot;;
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( myConnection.getStatement().execute( sql ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;The
results are received here...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
rs = <BR>
myConnection.getStatement().getResultSet();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs.next();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentValue
= rs.getInt( 1 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;No
records? Set to 1...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentValue
= 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return( currentValue
);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
<BR>
}</TT>
</BLOCKQUOTE>
<HR>
<P>
The <TT>getDBSequenceValue()</TT>
method constructs an SQL statement dynamically with the construction
values that were passed. This statement is then sent to the database
and the results are returned.
<H3>The <TT><FONT SIZE=4 FACE="Courier">SequenceGenerator</TT></FONT><FONT SIZE=4>
Class</FONT></H3>
<P>
The last class of note is the <TT>SequenceGenerator</TT>
class. This class generates a unique sequence number that identifies
the rows in your database tables. For example, you can use the
<TT>SequenceGenerator</TT> class to
generate employee identification numbers. You'll see that use
illustrated in <A HREF="ch13.htm" >Chapter 13</A>, &quot;Employee
Files.&quot;
<P>
The <TT>SequenceGenerator</TT> works
on a simple principle. Given a table and column, it retrieves
the data in that column of the table in reverse sorted order.
Therefore, the first row returned is the highest. It takes this
highest value and increments it, creating your unique number.
<P>
The constructor accepts as input the necessary components to create
the sequence retrieving SQL:
<BLOCKQUOTE>
<TT>public<BR>
SequenceGenerator( DBConnector connector, String table, <BR>
String column )</TT>
</BLOCKQUOTE>
<P>
The constructor records the value of these input parameters and
calls the following code to get the current highest value:<BR>
<BLOCKQUOTE>
<TT>//****************************************************************************
<BR>
//* 
getDBSequenceValue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*<BR>
//****************************************************************************
<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;protected void<BR>
&nbsp;&nbsp;&nbsp;&nbsp;getDBSequenceValue()<BR>
&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;The
first row returned by this SQL <BR>
statement is the largest number...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String sql = &quot;select
&quot; + myColumn + &quot; from &quot; + myTable +<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;
order by &quot; + myColumn + &quot; desc&quot;;<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
( myConnection.getStatement().execute( sql ) )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Check
the first row!<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet
rs = <BR>
myConnection.getStatement().getResultSet();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs.next();
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentValue
= rs.getInt( 1 );<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch ( SQLException
e )<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;No
records? Set to 1...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentValue
= 1;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
</TT>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
</BLOCKQUOTE>
<H2><A NAME="Summary"><FONT SIZE=5 COLOR=#FF0000>Summary</FONT></A>
</H2>
<P>
Well, this has been quite a chapter. You learned about many interfaces
and classes that will help you construct intranet applications.
These components also provide a consistent framework from which
to build connections to JDBC data sources. In addition, you saw
some examples of how to use these classes in real applications.
<P>
In <A HREF="ch11.htm" >Chapter 11</A>, you will learn a few neat
tricks for creating visually stunning user interfaces and you'll
implement the <TT>SQLFactory</TT>
interface in some of your classes.

<P>
<HR WIDTH="100%"></P>

<CENTER><P><A HREF="ch9.htm"><IMG SRC="pc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="#CONTENTS"><IMG SRC="cc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="index.htm"><IMG SRC="hb.gif" BORDER=0 HEIGHT=88 WIDTH=140></A><A HREF="ch11.htm"><IMG 
SRC="nc.gif" BORDER=0 HEIGHT=88 WIDTH=140></A></P></CENTER>

<P>
<HR WIDTH="100%"></P>

</BODY>
</HTML>
