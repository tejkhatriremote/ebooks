<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">

	<TITLE>Without a title - Title</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><A HREF="ch18.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37"
HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A
HREF="../index.html"><IMG SRC="../buttons/blantoc.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
BORDER="0"></A><A HREF="ch20.htm"><IMG SRC="../buttons/blannext.gif" WIDTH="37" HEIGHT="37"
ALIGN="BOTTOM" BORDER="0"></A></H1>

<UL>
	<LI><A HREF="#Heading1">Hour 19</A>
	<UL>
		<LI><A HREF="#Heading2">Toolbars and More Graphics</A>
		<UL>
			<LI><A HREF="#Heading3">Preparing for the Toolbar</A>
			<UL>
				<LI><A HREF="#Heading4">Figure 19.1.</A>
				<LI><A HREF="#Heading5">Figure 19.2.</A>
			</UL>
			<LI><A HREF="#Heading6">The Image List Control</A>
			<UL>
				<LI><A HREF="#Heading7">Figure 19.3.</A>
				<LI><A HREF="#Heading8">Figure 19.4.</A>
				<LI><A HREF="#Heading9">Figure 19.5.</A>
			</UL>
			<LI><A HREF="#Heading10">Finalizing the Toolbar</A>
			<UL>
				<LI><A HREF="#Heading11">Figure 19.6.</A>
				<LI><A HREF="#Heading12">Figure 19.7.</A>
			</UL>
			<LI><A HREF="#Heading13">The Line and Shape Controls</A>
			<UL>
				<LI><A HREF="#Heading14">Figure 19.8.</A>
			</UL>
			<LI><A HREF="#Heading15">The Line Control</A>
			<UL>
				<LI><A HREF="#Heading16">Mastering the Line Control</A>
				<UL>
					<LI><A HREF="#Heading17">Figure 19.9.</A>
					<LI><A HREF="#Heading18">Figure 19.10.</A>
				</UL>
				<LI><A HREF="#Heading19">Mastering the Shape Control</A>
				<UL>
					<LI><A HREF="#Heading20">Figure 19.11.</A>
				</UL>
			</UL>
			<LI><A HREF="#Heading21">Summary</A>
			<LI><A HREF="#Heading22">Q&amp;A</A>
			<LI><A HREF="#Heading23">Workshop</A>
			<UL>
				<LI><A HREF="#Heading24">Quiz</A>
				<LI><A HREF="#Heading25">Exercises</A>
			</UL>
		</UL>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H2 ALIGN="CENTER"><A NAME="Heading1"></A><FONT COLOR="#000077">Hour 19</FONT></H2>
<H2 ALIGN="CENTER"><A NAME="Heading2"></A><FONT COLOR="#000077">Toolbars and More
Graphics</FONT></H2>
<P>In Hour 17, &quot;Menus in VB Applications,&quot; you learned how to add menus
to your applications. Many applications use toolbars with buttons that mimic menu
options. Toolbars are part of most major Windows applications, and they can be part
of yours as well.</P>
<P>In addition, with toolbars you can draw your own graphics on the form. Although
VB's graphic-drawing tools are fairly primitive, you can draw lines and circles and
other basic shapes to accent and highlight areas of your form.</P>
<P>The highlights of this hour include

<UL>
	<LI>What the Image List control does
	<P>
	<LI>How to add the Toolbar control to the Toolbox window
	<P>
	<LI>Why you must connect the image list to the toolbar
	<P>
	<LI>How to respond to toolbar events
	<P>
	<LI>When to use the Line and Shape controls
	<P>
	<LI>How to accent forms with line-based graphics
</UL>

<H3 ALIGN="CENTER"><A NAME="Heading3"></A><FONT COLOR="#000077">Preparing for the
Toolbar</FONT></H3>
<H3 ALIGN="CENTER"><FONT COLOR="#000077"><BR>
Preparing for the Toolbar</FONT></H3>
<P>The tools that appear on your Toolbox window are called intrinsic controls. You
can add additional controls to the toolbar. As a matter of fact, you can obtain controls
from sources other than Microsoft because many people create controls for Visual
Basic.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT> In Hour 21, &quot;Visual
	Basic and ActiveX,&quot; you will learn more about how developers create new controls
	for Visual Basic. This book's CD-ROM comes with a complete control-building application
	called the Visual Basic Custom Control Edition. 
<HR>


</BLOCKQUOTE>

<P>Visual Basic's Professional and Enterprise Edition users can take advantage of
an extra control that comes with Visual Basic, called the Toolbar control. It comes
in a collection of other controls named the Microsoft Windows Common Controls 5.0.
To add this set of controls to your toolbar, select Project | Components (Ctrl+T)
to display Figure 19.1's Components dialog box.<BR>
<BR>
<A NAME="Heading4"></A><A HREF="../art/ch19/19cce01.jpg"><FONT COLOR="#000077">Figure
19.1.</FONT></A><FONT COLOR="#000077"> </FONT><I>Adding more tools to the toolbox
with the Components dialog box. </I><BR>
<BR>
Scroll the box down to the Microsoft Windows Common Controls 5.0 entry and select
it. Click OK. When you look at the Toolbox window once again, you'll see new controls
on the toolbox. Figure 19.2 labels these tools.<BR>
<BR>
<A NAME="Heading5"></A><A HREF="../art/ch19/19cce02.jpg"><FONT COLOR="#000077">Figure
19.2.</FONT></A><FONT COLOR="#000077"> </FONT><I>The Common Controls package of tools
gives you additional power.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT> You'll probably recognize
	the purpose of most of these new tools. With these additional tools you can add a
	status bar to your form, you can display a progress bar during a long sort or calculation,
	and the Tab Strip control gives you the ability to display a multiple-page dialog
	box (called a properties sheet or a properties page). 
<HR>


</BLOCKQUOTE>

<P><FONT COLOR="#000077"><B>New Term:</B></FONT> A properties sheet or properties
page is a dialog box that contains several tabbed pages. Entering property values
in the dialog box is often easier than entering them one by one in the Properties
window.
<H3 ALIGN="CENTER"><A NAME="Heading6"></A><FONT COLOR="#000077">The Image List Control</FONT></H3>
<P>As you know, a toolbar is a row of buttons with icons on them. The Toolbar control
has one slight limitation: It cannot keep track of each image that you place on a
toolbar button. Instead, the Toolbar control only works with a special control called
an Image List control. Fortunately, the Image List control appears on the toolbox
when you add the Microsoft Windows Common Controls 5.0 control set, as you did in
the previous section.</P>
<P>Therefore, you might want to practice adding a toolbar to a Form window by opening
a new project and then placing an Image List control on the Form window. Expand the
Form window slightly so that the Form window is wide enough for a toolbar (approximately
6,645 twips wide).</P>
<P>The Image List control does not look like much. Just like the Image control, the
Picture Box control, the Timer control, and the Common Dialog Box control, the Image
List control's placed size and location do not matter much because the user will
never directly see the Image List control on the form. The user will, instead, see
images that the Image List control keeps track of. The Image List control works a
lot like a graphic image array. The Image List control holds images from files, and
when you're using the Image List control for toolbars, the Image List control holds
toolbar icons such as the ones in VB's <TT>Graphics\Icons</TT> folder. <FONT COLOR="#000077"><B><BR>
<BR>
New Term:</B></FONT> An image list is a list of images in an array-like control called
the Image List control. The easiest way to add images to the Image List control is
by clicking the Image List control's <TT>Custom</TT> property to display Figure 19.3's
custom property pages. This dialog box organizes the Image List control's figures
and lets you manage each figure's property separately.<BR>
<BR>
<A NAME="Heading7"></A><A HREF="../art/ch19/19cce03.jpg"><FONT COLOR="#000077">Figure
19.3.</FONT></A><FONT COLOR="#000077"> </FONT><I>Specifying Image List control properties
in the Property Pages dialog box.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT> Although the first
	page of the Image List control's property pages lets you specify an image's size,
	you don't need to worry about the size if the graphics files are exactly the size
	you need to display, just as icon files (with the <TT>.ICO</TT> extension) are. If
	you use the Image List control to group graphic images of other kinds of files, you
	will need to specify each image's size if the file's size does not match the size
	you want to store the image as. 
<HR>


</BLOCKQUOTE>

<P>Click the Images tab to display the Images page. Here you will build a list of
images that will ultimately end up on your application's toolbar. To add some images
for this lesson's sample toolbar, perform these steps:

<DL>
	<DD><B>1.</B> Click the Insert Picture button and select the icon file named <TT>Disk04</TT>
	located in the <TT>Graphics\Icons\Computer</TT> folder. The image will appear in
	the image list, and its index value will be set to <TT>1</TT>, as Figure 19.4 shows.
</DL>

<P><A NAME="Heading8"></A><A HREF="../art/ch19/19cce04.jpg"><FONT COLOR="#000077">Figure
19.4.</FONT></A><FONT COLOR="#000077"> </FONT><I>The Image List control now has one
image. </I><BR>
<BR>
Keep inserting images in the following order (from the same folder to keep things
simple): <TT>Key04</TT>, <TT>Mouse02</TT>, <TT>Trash01</TT>, and <TT>W95mbx01</TT>.
As you insert the images one at a time, you'll notice that Visual Basic automatically
updates the image's Index text box value. After you add the final image, your image
list should look like Figure 19.5's list of icons.<BR>
<BR>
<A NAME="Heading9"></A><A HREF="../art/ch19/19cce05.jpg"><FONT COLOR="#000077">Figure
19.5.</FONT></A><FONT COLOR="#000077"> </FONT><I>The image list contains five icon
images.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT> If you want to change
	the toolbar's colors from the standard color scheme (typically a gray background
	just like Visual Basic's toolbars), click the Color tab and select a different color
	scheme. 
<HR>


</BLOCKQUOTE>

<P>Name the Image List control <TT>imlToolBar</TT> so the Toolbar control can reference
the images you just stored in the list.
<H3 ALIGN="CENTER"><A NAME="Heading10"></A><FONT COLOR="#000077">Finalizing the Toolbar</FONT></H3>
<P>Double-click the Toolbar control to add a toolbar to the top of the form. The
toolbar will first appear at the top of the form, which is where most toolbars reside.
You can change the <TT>Align</TT> property if you want to place the toolbar against
another edge of the form. Change the toolbar's <TT>Name</TT> property to <TT>tlbNew</TT>.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT> If you want to give your
	user a menu choice to place the toolbar elsewhere, the menu selection can change
	the <TT>Align</TT> property value so the toolbar moves to another location on the
	Form window. 
<HR>


</BLOCKQUOTE>

<P>Click the toolbar's <TT>Custom</TT> property to display the toolbar's Property
Pages dialog box, which is shown in Figure 19.6. Although you can set most of the
dialog box's properties from the Properties window, you'll find that the Property
Pages dialog box makes setting up the toolbox simpler.<BR>
<BR>
<A NAME="Heading11"></A><A HREF="../art/ch19/19cce06.jpg"><FONT COLOR="#000077">Figure
19.6.</FONT></A><FONT COLOR="#000077"> </FONT><I>The Toolbar control's Property Pages
dialog box. </I><BR>
<BR>
To connect the image list to the toolbar, open the ImageList drop-down list box and
select <TT>imlToolBar</TT> (if other image lists appeared on the form, they would
all appear and you could select the one that goes with the toolbar). Select the <TT>1-ccFixedSingle</TT>
<TT>BorderStyle</TT> property to help distinguish the toolbar from the rest of the
form's controls.</P>
<P>To add the toolbar button, click the Buttons tab to display the Buttons page.
For each button, click the Insert Button command button and change the <TT>Image</TT>
value to <TT>1</TT> (the first image's <TT>Index</TT> property value). Also type
<TT>Save</TT> for the <TT>Key</TT> value. When you click Apply (to apply the property
values), the first toolbar button will appear with the disk icon that first appears
in the image list.</P>
<P>Continue clicking the Insert Button command button and updating the Image text
box. Use the following values for the last five <TT>Key</TT> values: <TT>Save</TT>,
<TT>Button</TT>, <TT>Mouse</TT>, <TT>Trash</TT>, and <TT>Stop</TT>. When you finish
the toolbar buttons, close the dialog box, and the five toolbar buttons with their
corresponding icons from the Image List control will appear, as shown in Figure 19.7.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT> You will use the <TT>Key</TT>
	values inside code to determine exactly which toolbar button the user clicks. 
<HR>
<BR>
	
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT> Many programmers like
	to add the same <TT>Key</TT> values to the <TT>ToolTips</TT> property as well so
	the toolbar supports tooltip-based help. 
<HR>


</BLOCKQUOTE>

<P><A NAME="Heading12"></A><A HREF="../art/ch19/19cce07.jpg"><FONT COLOR="#000077">Figure
19.7.</FONT></A><FONT COLOR="#000077"> </FONT><I>The toolbar is now complete. </I><BR>
<BR>
Run the application and try the new toolbar. When you click a button, you'll see
the button clicking. You've now got to hook up the commands to the buttons. Stop
the running application to add the event procedure.</P>
<P>The toolbar acts like a control array. To add code that responds to a toolbar's
button click, double-click the Toolbar control to open a new event procedure. The
first and last lines appear here:</P>
<PRE><FONT COLOR="#0066FF">Private Sub tlbNew_ButtonClick(ByVal Button As ComctlLib.Button)

End Sub
</FONT></PRE>
<P>The <TT>ButtonClick()</TT> event is the toolbar's event that occurs when the user
clicks a toolbar button. The argument tells your code which button the user clicked
so you can respond accordingly. You must use the argument's <TT>Key</TT> method to
determine the button clicked. The button's <TT>Key</TT> method returns the string
you entered for the toolbar button's <TT>Key</TT> method. The following code shows
an outline of the code you could write that would execute a different procedure depending
on the user's toolbar button click:</P>
<PRE><FONT COLOR="#0066FF">Private Sub tlbNew_ButtonClick(ByVal Button As ComctlLib.Button)
   ` Respond to button clicks
   Dim msgPress As Integer
   ` Display a message box depending
   ` on which toolbar button the user clicks
   Select Case Button.Key
      Case Is = &quot;Save&quot;:
         msgPress = MsgBox(&quot;You pressed Save&quot;, , &quot;Save&quot;)
      Case Is = &quot;Button&quot;:
         msgPress = MsgBox(&quot;You pressed Button&quot;, , &quot;Button&quot;)
      Case Is = &quot;Mouse&quot;:
         msgPress = MsgBox(&quot;You pressed Mouse&quot;, , &quot;Mouse&quot;)
      Case Is = &quot;Trash&quot;:
         msgPress = MsgBox(&quot;You pressed Trash&quot;, , &quot;Trash&quot;)
      Case Is = &quot;Stop&quot;:
         Unload Me
         End
   End Select
End Sub
</FONT></PRE>
<P>Of course your application would do more than display a message box when the user
clicks a toolbar button. More likely you would insert a <TT>Call</TT> statement to
call a procedure that handles the toolbar button. If the toolbar's buttons mimic
menu selections, as most users design toolbar buttons to do, the <TT>Call</TT> statement
can call the corresponding menu item, such as <TT>Call mnuFileExit_Click</TT>.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT> If you place the toolbar
	at the top of the form but the Form window contains a menu (or if you add the menu
	after you place the Toolbar control), the toolbar will appear beneath the menu and
	always give room for the menu. The menu's pull-down submenus will always appear on
	top of the toolbar. 
<HR>


</BLOCKQUOTE>

<H3 ALIGN="CENTER"><A NAME="Heading13"></A><FONT COLOR="#000077">The Line and Shape
Controls</FONT></H3>
<P>The graphics you've worked with in this book have, until now, been graphic images
stored in files. The Image and Picture Box controls display graphic images on the
form. The Toolbar buttons can display icon images. You have yet to see how to draw
your own graphics. The rest of this lesson introduces VB's drawing tools.</P>
<P>The Line and Shape controls work together to draw lines, boxes, and all kinds
of circular figures on the form. By placing the controls and setting appropriate
properties, you'll be adding flair to applications. The properties of each control
that you place on your form determine exactly what kind of image the control becomes.</P>
<P>Here are the primary graphic images that you can draw with the Line and Shape
controls:

<UL>
	<LI>Lines
	<P>
	<LI>Rectangles
	<P>
	<LI>Squares
	<P>
	<LI>Ovals
	<P>
	<LI>Circles
	<P>
	<LI>Rounded rectangles
	<P>
	<LI>Rounded squares
</UL>

<P>Figure 19.8 shows each of these primary images. By combining these fundamental
geometric images and setting appropriate color and size properties, you can draw
virtually anything you need to draw on the form.<BR>
<BR>
<A NAME="Heading14"></A><A HREF="../art/ch19/19cce08.jpg"><FONT COLOR="#000077">Figure
19.8.</FONT></A><FONT COLOR="#000077"> </FONT><I>The images that you can draw.</I>
<H4 ALIGN="CENTER"><A NAME="Heading15"></A><FONT COLOR="#000077">The Line Control</FONT></H4>
<P>You use the Line control for drawing lines of various widths, lengths, and patterns.
The Shape control handles the drawing for all the other fundamental shapes.
<H4 ALIGN="CENTER"><A NAME="Heading16"></A><FONT COLOR="#000077">Mastering the Line
Control</FONT></H4>
<P>The Line control contains properties that specify the width and length of lines
you draw. In addition, you can change the pattern of each line you draw.</P>
<P>Table 19.1 lists the fundamental property values for the Line control. Table 19.2
contains the values that you can specify for the <TT>BorderStyle</TT> property. The
<TT>BorderStyle</TT> property determines the pattern that Visual Basic uses to draw
the line. By specifying various <TT>BorderStyle</TT> values, you can vary the line
pattern. If you assign a <TT>BorderStyle</TT> property at runtime, you either can
specify a number that represents <TT>BorderStyle</TT> or use one of Visual Basic's
named literals.</P>
<CENTER>
<P><B>Table 19.1. The Line control's fundamental properties. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>BorderColor</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Sets the line's color.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>BorderStyle</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Contains one of seven values that specifies the pattern of the drawn line. See Table
			19.2 for available <TT>BorderStyle</TT> values. The default value is <TT>1-Solid</TT>.
			<TT>BorderStyle</TT> has no effect on lines with <TT>BorderWidth</TT> greater than
			1 twip.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>BorderWidth</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies the size, in twips, that the line takes.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>DrawMode</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">An advanced style that determines how the bit patterns of the line interact with
			the surrounding form's bit appearance. The default value, <TT>13-Copy Pen</TT>, works
			well for virtually all Visual Basic applications.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Visible</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Holds <TT>True</TT> or <TT>False</TT>, indicating whether the user can see the line
			control. You may want to set the <TT>Visible</TT> property in code so the line appears
			as a highlighting tool.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>X1</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Contains the number of twips from the left of the Form window to the start of the
			line.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>X2</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Contains the number of twips from the left of the Form window to the end of the line.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Y1</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Contains the number of twips from the top of the Form window to the left starting
			point of the line.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Y2</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Contains the number of twips from the top of the Form window to the lower ending
			point of the line.</TD>
	</TR>
</TABLE>
<B>Table 19.2. The Line control's BorderStyle values. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Value</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Named Literal</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>0-Transparent</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbTransparent</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Background comes through the line.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>1-Solid</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbBSSolid</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The line is a solid line.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>2-Dash</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbBSDash</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The line is composed of dashes.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>3-Dot</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbBSDot</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The line is composed of dots.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>4-Dash-Dot</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbBSDashDot</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The line is composed of a continuing dash-dot-dash-dot.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>5-Dash-Dot-Dot</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbBSDashDotDot</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The line is composed of a series of one dash followed by two dots.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>6-Inside Solid</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbBSInsideSolid</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Same as <TT>1-Solid</TT> for lines.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>Figure 19.9 shows how various <TT>BorderStyle</TT> settings affect the lines you
draw. <TT>BorderStyle</TT> determines how a series of dashes and dots compose the
line's pattern. (Is this Morse code we're speaking here?)<BR>
<BR>
<A NAME="Heading17"></A><A HREF="../art/ch19/19cce09.jpg"><FONT COLOR="#000077">Figure
19.9. </FONT></A><I>The Borderstyle property values. </I><BR>
<BR>
To draw a line, double-click the Line control on the toolbox. A line appears in the
center of the form with two handles on each end. To move the line to a different
location, drag the center of the line with the mouse. To lengthen or shorten the
line, drag either handle on the line. You can raise and lower either end of the line
by dragging either end's handle with the mouse.</P>
<P>After you position the line with the mouse in the approximate location at which
you need the line to appear, you can fine-tune the line's size and location by setting
the various property values. If you're a patient programmer, you can even animate
the lines by changing the <TT>X1</TT>, <TT>X2</TT>, <TT>Y1</TT>, and <TT>Y2</TT>
property settings repeatedly through code.</P>
<P>Figure 19.10 contains the Form window that might be used as a company's front-end
form. The various lines help separate controls from the title. As you can see, lines
help focus the user's attention.<BR>
<BR>
<A NAME="Heading18"></A><A HREF="../art/ch19/19cce10.jpg"><FONT COLOR="#000077">Figure
19.10.</FONT></A><FONT COLOR="#000077"> </FONT><I>Accenting forms with lines.</I>
<CENTER>
<H4><A NAME="Heading19"></A><FONT COLOR="#000077">Mastering the Shape Control</FONT></H4>
</CENTER>
<P>The Shape control gives you the ability to draw six different kinds of figures
on the form. The various shading and color properties help you distinguish one shape
from another. Table 19.3 contains the basic properties you'll use for the Shape control.
The most important property is the <TT>Shape</TT> property. The <TT>Shape</TT> property
gives a shape one of the six fundamental shapes.</P>
<CENTER>
<P><B>Table 19.3. The Shape control's fundamental properties. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>BackColor</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies a Windows color value that determines the background color of the shape.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>BackStyle</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Contains either <TT>0-Transparent</TT> (the default) or <TT>1-Opaque</TT>, which
			determines whether the background of the form appears through the shape or if the
			shape hides whatever it covers.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>BorderColor</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies a Windows color value that determines the color of the shape's bordering
			edges.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>BorderStyle</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Contains one of seven values that specifies the pattern of the shape's border. Table
			19.2's Line control's <TT>BorderStyle</TT> values provide the shape's <TT>BorderStyle</TT>
			possible values as well. The default value is <TT>1-Solid</TT>. <TT>BorderStyle</TT>
			has no effect on shapes with a <TT>BorderWidth</TT> greater than 1 twip.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>BorderWidth</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies the size, in twips, that the shape's outline takes.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>DrawMode</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">An advanced style that determines how the bit patterns of the shape interact with
			the surrounding form's bit appearance. The default value, <TT>13-Copy Pen</TT>, works
			well for virtually all Visual Basic applications.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>FillColor</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies a Windows color value that determines the color of the shape's interior
			lines.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>FillStyle</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Contains one of eight values that specifies the pattern of lines with which Visual
			Basic paints the interior of the shape. Table 19.4 contains the possible values for
			the shape's <TT>FillStyle</TT>. The default <TT>FillStyle</TT> value is <TT>0-Solid</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Height</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies the number of twips high that the shape is (from the highest point to the
			lowest point in the shape).</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Left</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies the number of twips from the form's left edge to the shape's leftmost edge.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Shape</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Contains one of six values that specifies the type of shape that the Shape control
			takes on. Table 19.5 contains the possible values for the shape's <TT>Shape</TT>
			property. The default <TT>Shape</TT> property is <TT>0-Rectangle.</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Top</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies the number of twips from the form's top edge to the shape's highest edge.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Width</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies the number of twips wide that the shape takes (at the widest axis).</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>Table 19.4 contains the possible values for the Shape control's <TT>FillStyle</TT>
property. Figure 19.11 shows you the various fill patterns that a shape can contain.</P>
<CENTER>
<P><B>Table 19.4. The Shape control's FillStyle values. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Value</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Named Literal</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD HEIGHT="34" ALIGN="LEFT" VALIGN="TOP"><TT>0-Solid</TT></TD>
		<TD HEIGHT="34" ALIGN="LEFT" VALIGN="TOP"><TT>vbFSSolid</TT></TD>
		<TD HEIGHT="34" ALIGN="LEFT" VALIGN="TOP">Solid color fill with no pattern.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>1-Transparent</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbFSTransparent</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The shape appears as an outline only.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>2-Horizontal Line</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbHorizontalLine</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Horizontal lines fill the shape.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>3-Vertical Line</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbVerticalLine</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Vertical lines fill the shape.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>4-Upward Diagonal</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbUpwardDiagonal</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Upward diagonal lines fill the shape.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>5-Downward Diagonal</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbDownwardDiagonal</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Downward diagonal lines fill the shape.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>6-Cross</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbCross</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Crosshairs fill the shape.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>7-Diagonal Cross</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbDiagonalCross</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Diagonal crosshairs fill the shape.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P><A NAME="Heading20"></A><A HREF="../art/ch19/19cce11.jpg"><FONT COLOR="#000077">Figure
19.11.</FONT></A><FONT COLOR="#000077"> </FONT><I>The <TT>FillStyle</TT> property
determines the shape's interior design. </I><BR>
<BR>
Table 19.5 contains the possible values for the Shape control's <TT>Shape</TT> property.
Figure 19.8 shows you the various shapes that the Shape control can take. Therefore,
when you want to place a square on a form, you'll place the Shape control on the
form and set the <TT>Shape</TT> property to <TT>1-Square</TT>.</P>
<CENTER>
<P><B>Table 19.5. The Shape control's Shape values. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Value</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>0-Rectangle</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A rectangle</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>1-Square</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A square</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>2-Oval</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">An oval</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>3-Circle</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A circle</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>4-Rounded Rectangle</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A rectangle with rounded corners</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>5-Rounded Square</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A square with rounded corners</TD>
	</TR>
</TABLE>

</CENTER>
<CENTER>
<H3><A NAME="Heading21"></A><FONT COLOR="#000077">Summary</FONT></H3>
</CENTER>
<P>In this lesson you have learned how to place toolbars on your application's form
and to respond to the toolbar's event procedure. Unfortunately, there is not enough
room to hold every Toolbox control, so if you want to use a non-intrinsic control,
you must add that control from the Project | Components dialog box. Before you can
add a toolbar, you must generate the image list that holds each of the toolbar's
images.</P>
<P>The Line and Shape controls are the primary drawing controls. There are seven
fundamental geometric shapes that you can draw. By specifying various properties,
you can control how those shapes appear on the form.</P>
<P>The next hour's lesson does not discuss any new control, command, method, property,
or event! The next lesson takes you on a tour of Visual Basic's debugging tools that
help you test and eliminate bugs from your applications.
<CENTER>
<H3><A NAME="Heading22"></A><FONT COLOR="#000077">Q&amp;A</FONT></H3>
</CENTER>

<DL>
	<DD><B>Q I'm no artist, so why would I want to learn Visual Basic's drawing controls?<BR>
	<BR>
	A </B>The drawing tools are not for artists. If you want to place a nice art image
	on your form, use a drawing or paint program designed specifically to help create
	works of art. You can also download royalty-free images from most online services
	and the Internet. Place those images on your form with the Picture Box control or
	the Image control. The drawing tools, although you can use them to draw pictures,
	are rather primitive, but they do serve to help you accentuate and highlight various
	parts of a form.<BR>
	<B><BR>
	Q Why can I not use most of the BorderStyle properties when the line's width is greater
	than 1 twip?<BR>
	<BR>
	A</B> That's a good question, and there seems to be no great answer. Often, a thick
	dotted line or dashed line would be welcome for programmers who want to separate
	parts of a form with such a division. Unfortunately, Visual Basic does not seem to
	support the feature and has not since its very first version.
</DL>

<CENTER>
<H3><A NAME="Heading23"></A><FONT COLOR="#000077">Workshop</FONT></H3>
</CENTER>
<P>The quiz questions and exercises are provided for your further understanding.
See Appendix C, &quot;Answers,&quot; for answers.
<CENTER>
<H4><A NAME="Heading24"></A><FONT COLOR="#000077">Quiz</FONT></H4>
</CENTER>

<DL>
	<DD><B>1. </B>Which Visual Basic editions support the Toolbar control?<BR>
	<B><BR>
	2.</B> Why must you open the project's Components dialog box before using the Toolbar
	control?<BR>
	<B><BR>
	3.</B> Which control works with the toolbar to produce icon images on the buttons?<BR>
	<B><BR>
	4. </B>What does the Image control's <TT>Key</TT> method do?<BR>
	<B><BR>
	5. </B>Why does the toolbar's event procedure use an argument?<BR>
	<B><BR>
	6.</B> How many shapes can the Shape control produce?<BR>
	<B><BR>
	7.</B> Which property determines the pattern of drawn lines?<BR>
	<B><BR>
	8.</B> True or false: You should use the <TT>LoadPicture()</TT> function to initialize
	or change the value displayed with the Shape control.<BR>
	<B><BR>
	9.</B> What is the <TT>FillStyle</TT> property used for?<BR>
	<B><BR>
	10. </B>True or false: You can change a shape's interior and exterior color.
</DL>

<CENTER>
<H4><A NAME="Heading25"></A><FONT COLOR="#000077">Exercises</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> Write an application that includes a large Shape control (originally
	placed as a square) in the middle of the form. Add a command button that reads <TT>Change
	Shape</TT>. Every time the user clicks the command button change the shape to something
	different.<BR>
	<B><BR>
	2.</B> Create a Form window that contains a rectangle with a blue border, red diagonal
	lines, and a green interior.<BR>
	<B><BR>
	3.</B> Write an application that draws a yellow happy face in the center of the form.
	Do not use a graphic image file. Add two toolbar buttons, one with a happy face icon
	from an icon file and one with the sad face icon. When the user clicks the happy
	face toolbar button, wink the happy face's eye. When the user clicks the sad face
	toolbar button, draw a tear coming out of one eye.
	<P ALIGN="CENTER"><BR>
	<A HREF="ch18.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
	BORDER="0"></A><A HREF="../index.html"><IMG SRC="../buttons/blantoc.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="ch20.htm"><IMG SRC="../buttons/blannext.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="#heading1"><IMG SRC="../buttons/blantop.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A>
</DL>



</BODY>

</HTML>
