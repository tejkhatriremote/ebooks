<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">

	<TITLE>Without a title - Title</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><A HREF="ch04.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37"
HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A
HREF="../index.html"><IMG SRC="../buttons/blantoc.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
BORDER="0"></A><A HREF="ch06.htm"><IMG SRC="../buttons/blannext.gif" WIDTH="37" HEIGHT="37"
ALIGN="BOTTOM" BORDER="0"></A></H1>

<UL>
	<LI><A HREF="#Heading1">Hour 5</A>
	<LI><A HREF="#Heading2">Putting Code into Visual Basic</A>
	<UL>
		<LI><A HREF="#Heading3">Coding Basics</A>
		<UL>
			<LI><A HREF="#Heading4">Figure 5.1.</A>
			<LI><A HREF="#Heading5">Figure 5.2.</A>
		</UL>
		<LI><A HREF="#Heading6">Data Basics</A>
		<UL>
			<LI><A HREF="#Heading7">Data Types</A>
			<LI><A HREF="#Heading8">Variables Hold Data</A>
		</UL>
		<LI><A HREF="#Heading9">The Dim Statements Location</A>
		<UL>
			<LI><A HREF="#Heading10">Putting Data in Variables</A>
		</UL>
		<LI><A HREF="#Heading11">Listing 5.1. An event procedure that assigns</A>
		<LI><A HREF="#Heading12">a new command button caption.</A>
		<LI><A HREF="#Heading13">Expressions and Math Operators</A>
		<LI><A HREF="#Heading14">Summary</A>
		<LI><A HREF="#Heading15">Q&amp;A</A>
		<LI><A HREF="#Heading16">Workshop</A>
		<UL>
			<LI><A HREF="#Heading17">Quiz</A>
			<LI><A HREF="#Heading18">Exercises</A>
		</UL>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H2 ALIGN="CENTER"></H2>
<H2 ALIGN="CENTER"><A NAME="Heading1"></A><FONT COLOR="#000077">Hour 5</FONT></H2>
<H2 ALIGN="CENTER"><A NAME="Heading2"></A><FONT COLOR="#000077">Putting Code into
Visual Basic</FONT></H2>
<P>It's time to hone your multilingual skills and learn a new language! This hour's
lesson explores the Visual Basic programming language. You'll learn how code goes
together to form the application, and you'll learn how VB works with data. Your applications
must be capable of processing many types of data values, and you'll master those
data types before the hour is up.</P>
<P>The highlights of this hour include

<UL>
	<LI>What data types VB supports
	<P>
	<LI>How to declare variables
	<P>
	<LI>How to assign data to variables
	<P>
	<LI>Why data type mixups can occur
	<P>
	<LI>When to use operators
</UL>

<H3 ALIGN="CENTER"><A NAME="Heading3"></A><FONT COLOR="#000077">Coding Basics</FONT></H3>
<P>As you write more powerful programs, you'll need to insert more and more of Visual
Basic's programming language into your applications. The language, although one of
the easiest to master, can be tricky in places. Nevertheless, if you start with the
fundamentals, you'll have no trouble mastering the hard parts.</P>
<P>Remember that a VB program consists of the following:

<UL>
	<LI>One or more forms
	<P>
	<LI>Controls on the forms
	<P>
	<LI>Code written in the Visual Basic programming language
</UL>

<P>Although you can create great-looking applications just by dragging controls onto
forms and setting properties, the applications don't really become useful until you
add code to tie the controls together and to perform calculations and data manipulation
when needed. No control exists to calculate inventory accounting values; you must
add the code to do things like that. The program code that you write is just a detailed
set of instructions that tells Visual Basic how to manipulate data, perform input
and output (known as I/O), and respond to the user.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>I/O stands for input and
output and refers to the practice of receiving data from a control, the user, or
a data source such as the disk drive and sending data from your computer to the outside
world, such as the screen or printer.</P>
<P>Before looking at specifics, you should take a moment to consider the location
of the code in a VB application. You now know that much of the code in an application
is comprised of small event procedures that respond to events. The form's controls
often trigger the events when the user interacts with a control. Event procedures
are not the only code that appears in an application, however. Code can appear in
several places. This 24-hour tutorial concerns itself with code that appears in form
modules and in standard modules.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>A form module is a module
file that holds one or more forms and the code that goes with each form.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>A standard module is a file
that holds code not related to a form.</P>
<P>A form module is code connected to a specific form. The form's event procedures
appear in the form's form module as does other code that is not directly connected
to events such as calculations and data sorting routines. Every application has at
least one form, so every application contains at least one form module. When you
add a new form to an application, Visual Basic adds a new form module to go with
the form.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Some applications,
	such as those that perform system utility functions and background processing tasks,
	never display their form. The form's <TT>Visible</TT> property is set to <TT>False</TT>.
	
<HR>


</BLOCKQUOTE>

<P>Figure 5.1 helps illustrate the module concepts this section describes. All of
the application's modules reside in separate disk files even though Visual Basic
groups them together in a single project. You can consider all the project's files
as one entity during your application's creation and execution, but the files do
reside separately on the disk. The Project Explorer window keeps things together
in an orderly manner.<BR>
<BR>
<A NAME="Heading4"></A><A HREF="../art/ch05/05cce01.jpg"><FONT COLOR="#000077">Figure
5.1.</FONT></A><FONT COLOR="#000077"> </FONT><I>One or more modules can appear in
an application. </I><BR>
<BR>
A program that supports multiple forms (and therefore, multiple form modules) is
either an MDI (for multiple-document interface) application or an SDI (for single-document
interface). An MDI application, such as Word, can open several windows at once that
contain different data documents. An SDI application, although it can contain multiple
forms such as dialog boxes, only supports one data document (the Windows Notepad
application is an SDI application because when you open a new document, the current
one leaves the work area). No matter which kind of application you create, your application
can contain multiple Form windows and, hence, can contain multiple form modules.</P>
<P>In addition to form modules, an application might contain one or more standard
modules. Standard modules contain code and have no forms or controls associated with
them. Although the code inside a standard module might manipulate a form or its controls,
the code that you put in a standard module usually contains general-purpose code
that you can use in several applications. For example, you might write some Visual
Basic code that calculates wages using some special formulas that your company requires.
If you need to use those calculations in several applications, store the calculations
in a standard module and then add a copy of that standard module to each application
instead of typing the code multiple times in multiple applications.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:57"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>You will understand
	the differences in modules much more clearly as you progress through these 24 hours.
	For now, concentrate on getting the &quot;big picture.&quot; 
<HR>


</BLOCKQUOTE>

<P>Fortunately, you don't have to do much to manage projects that require multiple
files. The Project Explorer window keeps track of things. As you add files to or
remove files from the application (by selecting from the menu that appears when you
right-click over the Project Explorer window), the Project Explorer window keeps
track of the bookkeeping. When you want to modify or add to one of the items in the
Project Explorer window, double-click the object's icon in the Project Explorer window,
and the form or code opens in the work area (see Figure 5.2).<BR>
<BR>
<A NAME="Heading5"></A><A HREF="../art/ch05/05cce02.jpg"><FONT COLOR="#000077">Figure
5.2.</FONT></A><FONT COLOR="#000077"> </FONT><I>The Project Explorer window displays
the project's files.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Visual Basic
	also supports class modules, but this book does not discuss class modules in detail.
	
<HR>


</BLOCKQUOTE>

<H3 ALIGN="CENTER"><A NAME="Heading6"></A><FONT COLOR="#000077">Data Basics</FONT></H3>
<P>Now that you've got a better idea of how code goes together to support a Visual
Basic application, you're ready to begin the specifics. This section teaches you
all about the types of data that Visual Basic can manipulate.</P>
<P>Before you can perform data processing, you must understand data. When you are
able to represent data properly, you can learn some commands to manipulate and process
that data. Data is the cornerstone for learning the rest of the Visual Basic programming
language. Although writing code that manipulates data might not seem to be as much
fun as working with controls, you'll soon see the tie-in between controls and the
code you write. Once you learn to represent and process data, you can then work with
controls in ways that you could not without the language's help.
<H4 ALIGN="CENTER"><A NAME="Heading7"></A><FONT COLOR="#000077">Data Types</FONT></H4>
<P>Data falls into three broad categories: numeric, string, and special. If you want
to work with a number, you'll need to use a number that fits within one of VB's data
type categories. If you want to work with text data, you'll need to use a string.
Other data might fall into one of several special data type categories such as an
item that represents a check box-like value of <TT>True</TT> or <TT>False</TT>.</P>
<P>A string is a series of zero or more characters that you treat as a single entity.
VB supports both fixed-length and variable-length strings.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Controls almost
	always supply the <TT>Variant</TT> data type to your programs. Therefore, when your
	program receives a value from a control, the data type is <TT>Variant</TT>. You can,
	through a conversion routine or by implicit typing (when VB converts the data type
	for you as you store one data type in a location that is designed to hold a different
	data type), convert the control's data type to another data type. The <TT>Variant</TT>
	data type lets you store data in a variable when you don't know the specific data
	type of the variable. 
<HR>


</BLOCKQUOTE>

<P>Implicit typing is the process that VB performs when converting one data type
to another.</P>
<P>Table 5.1 lists the data types that Visual Basic supports. As you work with Visual
Basic, you'll become familiar with all the data types (with the possible exception
of <TT>Decimal</TT>, which is not supported throughout the Visual Basic language
yet).</P>
<CENTER>
<P><B>Table 5.1. The Visual Basic data types. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Data Type</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description and Range</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Boolean</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A data type that takes on one of two values only: <TT>True</TT> or <TT>False</TT>.
			<TT>True</TT> and <TT>False</TT> are Visual Basic reserved words, meaning that you
			cannot use them for names of items you create.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Byte</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Positive numeric values without decimals that range from <TT>0</TT> to <TT>255</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Currency</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Data that holds dollar amounts from -$922,337,203,685,477.5808 to $922,337,203,685,477.5807.
			The four decimal places ensure that proper rounding can occur. VB respects your Windows
			International settings and adjusts currency amounts according to your country's requirements.
			Never include the dollar sign when entering <TT>Currency</TT> values.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Date</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Holds date and time values. The date can range from January 1, 100, to December 31,
			9999. (In the years following 9999, people will have to use something other than
			Visual Basic!)</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Decimal</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A new data type not yet supported in Visual Basic except in a few advanced situations.
			The <TT>Decimal</TT> data type represents numbers with 28 decimal places of accuracy.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Double</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Numeric values that range from -1.79769313486232E+308 to 1.79769313486232E+308. The
			<TT>Double</TT> data type is often called double-precision.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Integer</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Numeric values with no decimal point or fraction that range from -32,768 to 32,767.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Long</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Integer values with a range beyond that of <TT>Integer</TT> data values. <TT>Long</TT>
			data values range from -2,147,483,648 to 2,147,483,647. <TT>Long</TT> data values
			consume more memory storage than integer values, and they are less efficient. The
			<TT>Long</TT> data type is often called long integer.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Object</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A special data type that holds and references objects such as controls and forms.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Single</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Numeric values that range from -3.402823E+38 to 3.402823E+38. The <TT>Single</TT>
			data type is often called single-precision.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>String</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Data that consists of 0 to 65,400 characters of alphanumeric data. Alphanumeric means
			that the data can be both alphabetic and numeric. <TT>String</TT> data values may
			also contain special characters such as <TT>^</TT>, <TT>%</TT>, and <TT>@</TT>. Both
			fixed-length strings and variable-length strings exist.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Variant</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Data of any data type and used for control and other values for which the data type
			is unknown.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>Scientific Notation <B><BR>
<BR>
</B><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>An exponent is a power of
10 by which you want to multiply another value.</P>
<P>Table 5.1 contains Es and Ds in some numeric values. E stands for exponent, and
D stands for double-precision exponent. The double-precision provides more accuracy
than the regular exponent (often called a single-precision exponent). Both data types
demonstrate a shorthand number notation called scientific notation. Scientific notation
contains either uppercase or lowercase Es and Ds because the notation's letter case
is insignificant.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>Scientific notation is a
shorthand notation for specifying extremely large or extremely small numbers.</P>
<P>Use scientific notation to represent extremely large and extremely small decimal
numbers without typing a lot of zeros or other digits. You can convert a scientific
notation value to its real value by following these steps:

<DL>
	<DD><B>1. </B>Raise 10 to the number after the D or E. Therefore, the number 5.912E+6
	requires that you raise 10 to the 6th power to get 1,000,000.<BR>
	<B><BR>
	2. </B>Multiply the number at the left of the D or E by the value you got in step
	1. Therefore, the number 5.912E+6 requires that you multiply 5.912 by the 1,000,000
	you got in the first step to get a final meaningful result of 5,912,000.
</DL>

<P>Typing <TT>5.912E+6</TT> is not a lot easier than typing <TT>5912000</TT>; but
when the number grows to the trillions and beyond, scientific notation is easier.
By the way, you cannot insert commas when you enter Visual Basic numbers unless your
International settings uses the comma for the decimal position.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>Visual Basic often
	displays value in the scientific notation format to save room on the screen or in
	a control. Therefore, you need to understand scientific notation, even if you never
	plan to use scientific notation, so you'll recognize its meaning when you see it.
	
<HR>


</BLOCKQUOTE>

<P>Specifying Values A literal is a value that does not change. You will sprinkle
literals throughout your program. For example, if you need to annualize a monthly
calculation, you'll surely multiply a value by <TT>12</TT> somewhere in the calculation
because 12 months appear in each year. <TT>12</TT> is a literal and represents either
a <TT>Byte</TT>, an <TT>Integer</TT>, or a <TT>Long</TT> data type, depending on
its context. If you multiplied the monthly value by <TT>12.0</TT>, the <TT>12.0</TT>
is also a literal, but <TT>12.0</TT> must be a <TT>Single</TT> or <TT>Double</TT>
data type due to the decimal.</P>
<P>When typing numeric literal values, you don't have to concern yourself with the
data type because Visual Basic takes care of things for you and attaches the best
data type for the calculation. If, however, you specify data of other data types,
you must consider the way you type the data.</P>
<P>All <TT>String</TT> literal data contains surrounding quotation marks. The <TT>String</TT>
literals do not include the quotation marks. The following are literals that take
the <TT>String</TT> data type:</P>
<PRE><FONT COLOR="#0066FF">&quot;Sams&quot;       &quot;123 E. Sycamore St.&quot;     &quot;91829&quot;
&quot;#$%^&amp;*&quot;     &quot;[Adam]&quot;     &quot;Happy birthday!&quot;    &quot;&quot;
</FONT></PRE>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>The last string
	is called an empty string or a null string because the quotation marks are together
	without even a space between them. 
<HR>


</BLOCKQUOTE>

<P>You must embed date and time literals (Visual Basic uses the <TT>Date</TT> data
type to hold these values) inside pound signs (<TT>#</TT>). Depending on your International
settings, you can specify the date or time in just about any valid date or time format,
as in the following:</P>
<PRE><FONT COLOR="#0066FF">#12-Jan-1999#     #14:56#     #2:56 PM#     #December 5, 1998#
</FONT></PRE>
<P>A <TT>Boolean</TT> literal is always <TT>True</TT> or <TT>False</TT>, so any time
you must store or retrieve a <TT>True</TT> or <TT>False</TT> value, Visual Basic
uses the <TT>Boolean</TT> data type to hold the value. Option and Check Box controls
return their values in the <TT>Boolean</TT> data type. Many programmers use the <TT>Boolean</TT>
data type to store two-value data such as yes/no or on/off values.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>You'll learn
	more about <TT>Variant</TT> and <TT>Object</TT> when you tie code to controls and
	forms later in this book. 
<HR>


</BLOCKQUOTE>

<P>Although Visual Basic normally takes care of data types when you type number values,
you might need to ensure that Visual Basic interprets a numeric literal as one of
the specific numeric data types. For example, you might type the literal <TT>86</TT>
and need Visual Basic to store or display the value as a <TT>Long</TT> data type
even though <TT>86</TT> fits within a <TT>Byte</TT> or <TT>Integer</TT> data type.</P>
<P>You can use the data type suffix characters from Table 5.2 to override the default
data type. The suffix characters let you specify the data type for numeric literals
when you need to. Occasionally, Visual Basic will also use the data type suffix characters
when displaying numeric information. Therefore, if you type <TT>86#</TT>, Visual
Basic treats the number 86 as a double-precision value.</P>
<CENTER>
<P><B>Table 5.2. Numeric data type suffix characters. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><B><I>Suffix Character</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Data Type</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Example</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>&amp;</TT></TD>
		<TD ALIGN="LEFT"><TT>Long</TT></TD>
		<TD ALIGN="LEFT"><TT>86&amp;</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>!</TT></TD>
		<TD ALIGN="LEFT"><TT>Single</TT></TD>
		<TD ALIGN="LEFT"><TT>86!</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>#</TT></TD>
		<TD ALIGN="LEFT"><TT>Double</TT></TD>
		<TD ALIGN="LEFT"><TT>86#</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>@</TT></TD>
		<TD ALIGN="LEFT"><TT>Currency</TT></TD>
		<TD ALIGN="LEFT"><TT>86@</TT></TD>
	</TR>
</TABLE>

</CENTER>
<CENTER>
<H4><A NAME="Heading8"></A><FONT COLOR="#000077">Variables Hold Data</FONT></H4>
</CENTER>
<P>All your data cannot be literals. The information your program's users enter in
controls such as text boxes is not literal data because the user can change information.
In addition, your program has to have a place to hold information temporarily for
calculations and for in-memory storage before sending information to a disk file
or to the printer. To hold data that might change due to calculations or state changes
within the application, you must declare variables. A variable is a named location
that holds data.</P>
<P>Variables, unlike literals, can change. In other words, you can store a number
in a variable early in the program and then change that number later in the program.
The variable acts like a box that holds a value. The data you store in variables
does not have to change, but often the program does change the contents of variables.</P>
<P>A program can have as many variables as you need it to have. Before you can use
a variable, you must request that Visual Basic create the variable by declaring the
variable before using it. To declare a variable, you tell Visual Basic the name and
data type of the variable.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>A variable can
	hold only one data type. 
<HR>


</BLOCKQUOTE>

<P>Once you declare variables, the variables always retain their original declared
data type. Therefore, a single-precision variable can hold only single-precision
values. When you store an integer in a single-precision variable, Visual Basic converts
the integer to a single-precision number before the number gets to the variable.
Such data type conversions are common and they typically do not cause many problems.</P>
<P>You use the <TT>Dim</TT> statement to declare variables (<TT>Dim</TT> stands for
dimension). The <TT>Dim</TT> statement defines variables. <TT>Dim</TT> tells Visual
Basic that somewhere else in the program the program will need to use a variable.
<TT>Dim</TT> describes the data type and also assigns a name to the variable.</P>
<P>Hour 2, &quot;Analyzing Visual Basic Programs,&quot; describes the naming rules
for controls, and you use the same naming rules for variables. Follow the naming
rules when you make up names for variables. Whenever you learn a new statement, you
need to learn the format for that statement. Here is the format of the <TT>Dim</TT>
statement:</P>
<PRE><FONT COLOR="#0066FF">Dim VarName As DataType
</FONT></PRE>
<P>VarName is a name that you supply. When Visual Basic executes the <TT>Dim</TT>
statement at runtime, it creates a variable in memory and assigns it the name you
give in the VarName location of the statement. DataType is one of the data types
that you learned about in Table 5.1.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="WARNING"></A><FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>Never declare
	two variables with the same name in the same location. That is, you cannot declare
	two variables with the name <TT>intNumber</TT> in the same event procedure. 
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading9"></A><FONT COLOR="#000077">The Dim Statements Location</FONT></H3>
</CENTER>


<BLOCKQUOTE>
	<P>The location of the <TT>Dim</TT> determines how you use the variable. If you include
	a special statement called the <TT>Option Explicit</TT> statement at the very top
	of a form module or at the top of a standard module (in a section called the <TT>general</TT>
	section that appears before all event procedures), you must declare all variables
	before you use them. Without <TT>Option Explicit</TT>, you can begin using a variable
	name without declaring the variable, but Visual Basic always assumes that the variable
	is a <TT>Variant</TT> data type. If <TT>Dim</TT> appears in an event procedure, the
	variable is visible (usable) only from within that event procedure and known as a
	local variable. If you use <TT>Dim</TT> in a module's <TT>general</TT> section, all
	variables in that module can access the variable (the variable is said to be global
	to the module). If you replace <TT>Dim</TT> with <TT>Public</TT> in a <TT>general</TT>
	section (the <TT>Public</TT> statement uses the same format as <TT>Dim</TT>), the
	variable is global to the entire module as well as every other module within the
	project. Standard module variables are almost always globally defined with <TT>Public</TT>
	so that other modules within a project you add the standard module to can access
	the variables. Generally, local variables are better than global with a few exceptions
	(this book points out these exceptions at the appropriate times).

</BLOCKQUOTE>

<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>Global variables are variables
that are available to the entire module or to the entire application.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>Local variables are variables
that are available only to the procedure in which you define the variables.</P>
<P>The following statement defines a variable named <TT>curProductTotal</TT>:</P>
<PRE><FONT COLOR="#0066FF">Dim curProductTotal As Currency
</FONT></PRE>
<P>From the <TT>Dim</TT> statement, you know that the variable holds the <TT>Currency
</TT>data type and that the variable's name is <TT>curProductTotal</TT>. Programmers
often prefix variable names with a three-letter abbreviation that indicates the variable's
data type, but such a prefix is not required. Table 5.3 lists these common variable
prefix values. Please remember that you put these prefixes at the beginning of variable
names just to remind yourself of the variable's data type. The prefix itself has
no meaning to Visual Basic and is just part of the name.</P>
<CENTER>
<P><B>Table 5.3. Using variable name prefixes to maintain accurate data types. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Prefix</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Data Type</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Example</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>bln</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Boolean</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>blnIsOverTime</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>byt</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Byte</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>bytAge</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>cur</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Currency</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>curHourlyPay</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>dtm</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Date</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>dteFirstBegan</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>dbl</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Double</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>dblMicroMeasurement</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>int</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Integer</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>intCount</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>lng</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Long</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>lngStarDistance</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>obj</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Object</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>objSoundClip</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>sng</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Single</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>sngYearSales</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>str</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>String</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>strLastName</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vnt</TT> or <TT>var</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Variant</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vntControlValue</TT></TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>The following statements define <TT>Integer</TT>, <TT>Single</TT>, and <TT>Double</TT>
variables:</P>
<PRE><FONT COLOR="#0066FF">
Dim intLength As Integer
Dim sngPrice As Single
Dim dblStructure As Double
</FONT></PRE>
<P>If you want to write a program that stores the user's text box entry for the first
name, you would define a string like this:</P>
<PRE><FONT COLOR="#0066FF">Dim strFirstName As String
</FONT></PRE>
<P>You can get fancy when you define strings. This <TT>strFirstName</TT> string can
hold any string from 0 to 65,500 characters long. You will learn in the next section
how to store data in a string. The <TT>strFirstName</TT> string can hold data of
virtually any size. You could store a small string in <TT>strFirstName</TT>--such
as <TT>&quot;Joe&quot;</TT>--and then a longer string in <TT>strFirstName</TT>--such
as <TT>&quot;Mercedes&quot;</TT>. <TT>strFirstName</TT> is a variable-length string.</P>
<P>Sometimes you want to limit the amount of text that a string holds. For example,
you might need to define a <TT>String</TT> variable to hold a name that you read
from the disk file. Later, you will display the contents of the string in a label
on the form. The form's label has a fixed length, however--assuming that the <TT>AutoSize</TT>
property is set to <TT>True</TT>. Therefore, you want to keep the <TT>String</TT>
variable to a reasonable length. The following <TT>Dim</TT> statement demonstrates
how you can add the <TT>* </TT>StringLength option when you want to define fixed-length
strings:</P>
<PRE><FONT COLOR="#0066FF">Dim strTitle As String * 20
</FONT></PRE>
<P><TT>strTitle</TT> is the name of a <TT>String</TT> variable that can hold a string
from 0 to 20 characters long. If the program attempts to store a string value that
is longer than 20 characters in <TT>strTitle</TT>, Visual Basic truncates the string
and stores only the first 20 characters.</P>
<P>Here's a shortcut: You can omit the <TT>As Variant</TT> descriptor when you define
<TT>Variant</TT> variables. This <TT>Dim</TT> statement:</P>
<PRE><FONT COLOR="#0066FF">Dim varValue As Variant
</FONT></PRE>
<P>does exactly the same thing as this:</P>
<PRE><FONT COLOR="#0066FF">Dim varValue
</FONT></PRE>
<P>A good rule of thumb is to make your code as explicit as possible, so use <TT>As
Variant</TT> to clarify your code intentions. If you begin calling a variable one
name, you must stay with that name for the entire program. <TT>curSale</TT> is not
the same variable name as <TT>curSales</TT>. Use <TT>Option Explicit</TT> to guard
against such common variable-naming errors. Visual Basic supports a shortcut when
you need to define several variables. Instead of listing each variable definition
on separate lines like this:</P>
<PRE><FONT COLOR="#0066FF">Dim A As Integer
Dim B As Double
Dim C As Integer
Dim D As String
Dim E As String
</FONT></PRE>
<P>you can combine variables of the same data type on one line. Here's an example:</P>
<PRE><FONT COLOR="#0066FF">Dim A As Integer, C As Integer
Dim B As Double
Dim D As String, E As String
</FONT></PRE>
<CENTER>
<H4><A NAME="Heading10"></A><FONT COLOR="#000077">Putting Data in Variables</FONT></H4>
</CENTER>
<P>So far you have learned how to define variables but not how to store data in them.
Use the assignment statement when you want to put data values into variables. Variables
hold data of specific data types and many lines inside a Visual Basic program consist
of assignment statements that assign data to variables. Here is the format of the
assignment statement:</P>
<PRE><FONT COLOR="#0066FF">VarName = Expression
</FONT></PRE>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>An assignment statement is
a program statement that puts data into a control, a variable, or another object.</P>
<P>VarName is a variable name that you have defined using the <TT>Dim</TT> statement.
Expression can be a literal, another variable, or a mathematical expression.</P>
<P>Suppose that you need to store a minimum age value of <TT>18</TT> in an <TT>Integer</TT>
variable named <TT>intMinAge</TT>. The following assignment statement does that:</P>
<PRE><FONT COLOR="#0066FF">intMinAge = 18
</FONT></PRE>
<P>To store a temperature in a single-precision variable named <TT>sngTodayTemp</TT>,
you could do this:</P>
<PRE><FONT COLOR="#0066FF">sngTodayTemp = 42.1
</FONT></PRE>
<P>The data type of Expression must match the data type of the variable to which
you are assigning it. In other words, the following statement is invalid. It would
produce an error in Visual Basic programs if you tried to use it:</P>
<PRE><FONT COLOR="#0066FF">sngTodayTemp = &quot;Forty-Two point One&quot;
</FONT></PRE>
<P><TT>sngTodayTemp</TT> is a single-precision variable, so you cannot assign a string
to it. However, Visual Basic often makes a quick conversion for you when the conversion
is trivial. For example, it is possible to perform the following assignment even
if you have defined <TT>dblMeasure</TT> to be a double-precision variable:</P>
<PRE><FONT COLOR="#0066FF">dblMeasure = 921.23
</FONT></PRE>
<P>At first glance, it appears that <TT>921.23</TT> is a single-precision number
because of its size. <TT>921.23</TT> is actually a <TT>Variant</TT> data value. Visual
Basic assumes that all data literals are <TT>Variant</TT> unless you explicitly add
a suffix character to the literal to make the constant a different data type. Visual
Basic can easily and safely convert the <TT>Variant</TT> value to double-precision.
That's just what Visual Basic does here, so the assignment works fine.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>Constant is another name
for literal.</P>
<P>In addition to constants, you can assign other variables to variables. Consider
the following code:</P>
<PRE><FONT COLOR="#0066FF">Dim sngSales As Single, sngNewSales As Single
sngSales = 3945.42
sngNewSales = sngSales
</FONT></PRE>
<P>When the third statement finishes, both <TT>sngSales</TT> and <TT>sngNewSales</TT>
have the value <TT>3945.42</TT>.</P>
<P>Feel free to assign variables to controls and controls to variables. Suppose,
for example, that the user types the value <TT>18.34</TT> in a text box's <TT>Text</TT>
property. If the text box's <TT>Name</TT> property is <TT>txtFactor</TT>, the following
statement stores the value of the text box in a variable named <TT>sngFactorVal</TT>:</P>
<PRE><FONT COLOR="#0066FF">sngFactorVal = txtFactor.Text
</FONT></PRE>
<P>Suppose that you defined <TT>strTitle</TT> to be a <TT>String</TT> variable with
a fixed length of 10, but a user types <TT>Mondays Always Feel Blue</TT> in a text
box's <TT>Text</TT> property that you want to assign to <TT>strTitle</TT>. Visual
Basic stores only the first 10 characters of the control to <TT>strTitle</TT> and
truncates the rest of the title. Therefore, <TT>strTitle</TT> holds only the string
<TT>&quot;Mondays Al&quot;</TT>.</P>
<P>You can instantly make data appear on a form by assigning the <TT>Text</TT> property
of text boxes or the <TT>Caption</TT> property of labels and command buttons. No
variables are required to do this. Suppose you put a command button named <TT>cmdPress</TT>
on a form. The event procedure shown in Listing 5.1 changes the command button's
<TT>Caption</TT> property and immediately places a new caption on the form (this
occurs at runtime when this event procedure executes).
<CENTER>
<H3><A NAME="Heading11"></A><FONT COLOR="#000077">Listing 5.1. An event procedure
that assigns a new command button caption.</FONT></H3>
</CENTER>
<PRE><FONT COLOR="#0066FF">
Private Sub cmdPress_Click ()
  cmdPress.Caption = &quot;Brush your teeth daily!&quot;
<TT>End Sub</TT> </FONT></PRE>
<P><BR>
No matter what the command button's <TT>Caption</TT> property is set to at the start
of the event procedure, when the user clicks the command button, this event procedure
executes and the command button's caption changes to <TT>Brush your teeth!</TT>.</P>
<P>Some properties accept only a limited range of values. Assign only the number
when a control's property can accept a limited range of values. For example, the
possible values that you can select for a label's <TT>BorderStyle</TT> property in
the Properties window are <TT>0-None</TT> and <TT>1-Fixed Single</TT>. To assign
border style directly without using a named constant, assign just <TT>0</TT> or <TT>1</TT>.
Don't spell out the entire property. For example, you can assign a fixed single-line
border around a label like this:</P>
<PRE><FONT COLOR="#0066FF">lblSinger.BorderStyle = 1
</FONT></PRE>
<P>Visual Basic includes a number of named literals internally that you can use for
assigning such controls when the controls require a limited number of values. You
can search the property's online help to see a list of named literals that you can
assign. For example, not only can you assign <TT>0</TT> and <TT>1</TT> to a label's
border, but you can also assign one of the named literals, <TT>vbBSNone</TT> and
<TT>vbFixedSingle</TT>. Most named literals begin with the <TT>Visual Basic</TT>
prefix.
<CENTER>
<H3><A NAME="Heading13"></A><FONT COLOR="#000077">Expressions and Math Operators</FONT></H3>
</CENTER>
<P>You should learn Visual Basic's math operators so you can calculate and assign
expression results to variables when you code assignment statements that contain
expressions. An operator is a symbol or word that does math and data manipulation.</P>
<P>Table 5.4 describes Visual Basic's primary math operators. Other operators exist,
but the ones in Table 5.4 suffice for most of the programs that you write. Look over
the operators. You are already familiar with most of them because they look and act
just like their real-world counterparts.</P>
<CENTER>
<P><B>Table 5.4. The primary math operators. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><B><I>Operator</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Example</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>+</TT></TD>
		<TD ALIGN="LEFT"><TT>Net + Disc</TT></TD>
		<TD ALIGN="LEFT">Adds two values</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">-</TD>
		<TD ALIGN="LEFT"><TT>Price - 4.00</TT></TD>
		<TD ALIGN="LEFT">Subtracts one value from another value</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">*</TD>
		<TD ALIGN="LEFT"><TT>Total * Fact</TT></TD>
		<TD ALIGN="LEFT">Multiplies two values</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">/</TD>
		<TD ALIGN="LEFT"><TT>Tax / Adjust</TT></TD>
		<TD ALIGN="LEFT">Divides one value by another value</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">^</TD>
		<TD ALIGN="LEFT"><TT>Adjust ^ 3</TT></TD>
		<TD ALIGN="LEFT">Raises a value to a power</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>&amp;</TT> (or <TT>+</TT>)</TD>
		<TD ALIGN="LEFT"><TT>Name1 &amp; Name2</TT></TD>
		<TD ALIGN="LEFT">Concatenates two strings</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>Suppose that you wanted to store the difference between the annual sales (stored
in a variable named <TT>curAnnualSales</TT>) and cost of sales (stored in a variable
named <TT>curCostOfSales</TT>) in a variable named <TT>curNetSales</TT>. Assuming
that all three variables have been defined and initialized, the following assignment
statement computes the correct value for <TT>curNetSales</TT>:</P>
<PRE><FONT COLOR="#0066FF">curNetSales = curAnnualSales - curCostOfSales
</FONT></PRE>
<P>This assignment tells Visual Basic to compute the value of the expression and
to store the result in the variable named <TT>curNetSales</TT>. Of course, you can
store the results of this expression in a control's <TT>Caption</TT> or <TT>Text</TT>
properties, too.</P>
<P>If you want to raise a value by a power--which means to multiply the value by
itself a certain number of times--you can do so. The following code assigns <TT>10000</TT>
to <TT>lngValue</TT> because 10 raised to the fourth power (10 times 10 times 10
times 10) is 10,000:</P>
<PRE><FONT COLOR="#0066FF">lngYears = 4
lngValue = 10 ^ intYears
</FONT></PRE>
<P>No matter how complex the expression is, Visual Basic computes the entire result
before it stores that result in the variable at the left of the equal sign. The following
assignment statement, for example, is rather lengthy, but Visual Basic computes the
result and stores the value in the variable named <TT>sngAns</TT>:</P>
<PRE><FONT COLOR="#0066FF">sngAns = 8 * sngFactor - sngPi + 12 * sngMonthlyAmts
</FONT></PRE>
<P>Combining expressions often produces unintended results because Visual Basic computes
mathematical results in a predetermined order. Visual Basic always calculates exponentiation
first if one or more <TT>^</TT> operators appear in the expression. Visual Basic
then computes all multiplication and division--working from left to right--before
any addition and subtraction.</P>
<P>Visual Basic assigns <TT>13</TT> to <TT>intResult</TT> in the following assignment:</P>
<PRE><FONT COLOR="#0066FF">intResult = 3 + 5 * 2
</FONT></PRE>
<P>At first, you might think that Visual Basic would assign <TT>16</TT> to <TT>intResult</TT>
because <TT>3 + 5</TT> is <TT>8</TT> and <TT>8 * 2</TT> is <TT>16</TT>. However,
the rules state that Visual Basic always computes multiplication--and division if
division exists in the expression--before addition. Therefore, Visual Basic first
computes the value of <TT>5 * 2</TT>, or <TT>10</TT>, and next adds <TT>3</TT> to
<TT>10</TT> to get <TT>13</TT>. Only then does it assign the <TT>13</TT> to <TT>Result</TT>.</P>
<P>If both multiplication and division appear in the same expression, Visual Basic
calculates the intermediate results from left to right. For example, Visual Basic
assigns <TT>20</TT> to the following expression:</P>
<PRE><FONT COLOR="#0066FF">intResult = 8 / 2 + 4 + 3 * 4
</FONT></PRE>
<P>Visual Basic computes the division first because the division appears to the left
of the multiplication. If the multiplication appeared to the left of the division,
Visual Basic would have multiplied first. After Visual Basic calculates the intermediate
answers for the division and the multiplication, it performs the addition and stores
the final answer of <TT>20</TT> in <TT>intResult</TT>.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>The order of
	computation has many names. Programmers usually use one of these terms: order of
	operators, operator precedence, or math hierarchy. 
<HR>


</BLOCKQUOTE>

<P>It is possible to override the operator precedence by using parentheses. Visual
Basic always computes the values inside any pair of parentheses before anything else
in the expression, even if it means ignoring operator precedence. The following assignment
statement stores <TT>16</TT> in <TT>intResult</TT> because the parentheses force
Visual Basic to compute the addition before the multiplication:</P>
<PRE><FONT COLOR="#0066FF">
intResult = (3 + 5) * 2
</FONT></PRE>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>Appendix A, &quot;Operator
	Precedence,&quot; contains the complete Visual Basic operator precedence table. The
	table contains several operators that you have yet to learn about, so you might not
	understand the full table at this time. 
<HR>


</BLOCKQUOTE>

<P>The following expression stores the fifth root of 125 in the variable named <TT>sngRoot5</TT>:</P>
<PRE><FONT COLOR="#0066FF">sngRoot5 = 125 ^ (1/5)
</FONT></PRE>
<P>As you can see from this expression, Visual Basic supports fractional exponents.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>To concatenate means to merge
two strings together.</P>
<P>One of Visual Basic's primary operators has nothing to do with math. The concatenation
operator joins one string to the end of another. Suppose that the user entered his
first name in a Label control named <TT>lblFirst</TT> and his last name in a Label
control named <TT>lblLast</TT>. The following concatenation expression stores the
full name in the <TT>String</TT> variable named <TT>strFullName</TT>:</P>
<PRE><FONT COLOR="#0066FF">strFullName = lblFirst &amp; lblLast
</FONT></PRE>
<P>There is a problem here, though, that might not be readily apparent--there is
no space between the two names. The <TT>&amp;</TT> operator does not automatically
insert a space because you don't always want spaces inserted when you concatenate
two strings. Therefore, you might have to concatenate a third string between the
other two, as in</P>
<PRE><FONT COLOR="#0066FF">strFullName = lblFirst &amp; &quot; &quot; &amp; lblLast
</FONT></PRE>
<P>Visual Basic actually supports a synonym operator, the plus sign (<TT>+</TT>),
for concatenation. In other words, the following assignment statement is identical
to the previous one (although the ampersand [<TT>&amp;</TT>] keeps ambiguity down
because of the plus sign's double usage with numbers and strings):</P>
<PRE><FONT COLOR="#0066FF">strFullName = lblFirst + &quot; &quot; + lblLast
</FONT></PRE>
<P>Use the ampersand for string concatenation even though the plus sign works also.
The ampersand is less ambiguous and makes for better programs.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Remember that
	you'll use the Code window to enter code such as that which you see in this lesson.
	The Code window appears when you select View|Code or when you double-click a control
	to open its event procedure as you saw in Hour 3, &quot;Controls and Properties.&quot;
	
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading14"></A><FONT COLOR="#000077">Summary</FONT></H3>
</CENTER>
<P>In this lesson you have learned how to recognize and use Visual Basic data. Visual
Basic supports 14 data types, and you must know how to specify literals and declare
variables that take on those data types. Once you know the data types and variables,
you can perform calculations that assign the results of expressions to variables
and controls.</P>
<P>The next hour adds to your programming power by explaining a quick and simple
way to display information and receive user input.
<CENTER>
<H3><A NAME="Heading15"></A><FONT COLOR="#000077">Q&amp;A</FONT></H3>
</CENTER>

<DL>
	<DD><B>Q I don't like math, so will I not like VB programming?<BR>
	<BR>
	A</B> Visual Basic does all the math for you! That's why you learned the operators.
	People who do not like math use calculators and people who do not like math can write
	VB programs.<BR>
	<BR>
	<B>Q If I want to represent a person's age value, which integer-based data type do
	I use?<BR>
	<BR>
	A</B> The quick answer is that you should use the smallest data type that will hold
	every value you'd want to assign. A person's age rarely gets over 100 and does not
	ever go past 255. Therefore, you could use a <TT>Byte</TT> data type for a person's
	age. The <TT>Byte</TT> data type is small and is much more efficient than a <TT>Long</TT>.
	You should now have the idea that you need to ensure that your variables can hold
	all the data required but that you should not use one that's too large and that will
	use unnecessary space. Having said that, the <TT>Byte</TT> data type is really an
	exception to that rule! <TT>Byte</TT> is generally reserved for special system-level
	coding. Generally, the smallest integer programmers use is the <TT>Integer</TT> data
	type even though an <TT>Integer</TT> is slightly less efficient than a <TT>Byte</TT>
	data type because the computer has to transfer more information at one time when
	working with integers.
</DL>

<CENTER>
<H3><A NAME="Heading16"></A><FONT COLOR="#000077">Workshop</FONT></H3>
</CENTER>
<P>The quiz questions and exercises are provided for your further understanding.
See Appendix C, &quot;Answers,&quot; for answers.
<CENTER>
<H4><A NAME="Heading17"></A><FONT COLOR="#000077">Quiz</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> What is a data type?<BR>
	<BR>
	<B>2.</B> What is the difference between a <TT>String</TT> and a <TT>Boolean</TT>
	data type?<BR>
	<BR>
	<B>3.</B> What are two controls that behave as if they conform to the <TT>Boolean</TT>
	data type?<BR>
	<BR>
	<B>4.</B> What is the difference between a literal and a variable?<BR>
	<BR>
	<B>5.</B> Which of the following are invalid variable names?
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">12Months     
a     
85     
&quot;curSalesForecast&quot;     
Acctg98</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>

<DL>
	<DD><B>6.</B> Which operator performs two operations?<BR>
	<B><BR>
	7.</B> What is the difference between a fixed-length string and a variable-length
	string?<BR>
	<B><BR>
	8.</B> What value would Visual Basic store in the following <TT>ans</TT> variables?
	<DL>
		<DD><B><BR>
		a. </B><TT>ans = 1 + 2 + 3 + 4 / 2</TT><BR>
		<B><BR>
		b.</B> <TT>ans = 1 + 2 + 3 + (4 / 2)</TT><BR>
		<B><BR>
		c.</B> <TT>ans = 2 ^ 5<BR>
		</TT><B><BR>
		d.</B> <TT>ans = 25 - 8 / 2 ^ 2 + 1</TT>
	</DL>
</DL>

<CENTER>
<H4><A NAME="Heading18"></A><FONT COLOR="#000077">Exercises</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> Write code that declares these variables: your first name, your last
	name, your age, your tax rate, and whether you are married.<BR>
	<BR>
	<B>2.</B> Write an application that accepts your age in a text box and then displays,
	when you click a command button, your age in dog years (your age divided by 7). Don't
	worry about rounding that might take place.
	<CENTER>
	<DD></CENTER>
	<P ALIGN="CENTER"><BR>
	<A HREF="ch04.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
	BORDER="0"></A><A HREF="../index.html"><IMG SRC="../buttons/blantoc.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="ch06.htm"><IMG SRC="../buttons/blannext.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="#heading1"><IMG SRC="../buttons/blantop.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A>
</DL>



</BODY>

</HTML>
