<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">

	<TITLE>Without a title - Title</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><A HREF="ch17.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37"
HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A
HREF="../index.html"><IMG SRC="../buttons/blantoc.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
BORDER="0"></A><A HREF="ch19.htm"><IMG SRC="../buttons/blannext.gif" WIDTH="37" HEIGHT="37"
ALIGN="BOTTOM" BORDER="0"></A></H1>

<UL>
	<LI><A HREF="#Heading1">Hour 18</A>
	<UL>
		<LI><A HREF="#Heading2">The Graphic Image Controls</A>
		<UL>
			<LI><A HREF="#Heading3">The Image Control</A>
			<UL>
				<LI><A HREF="#Heading4">Figure 18.1.</A>
			</UL>
			<LI><A HREF="#Heading5">Preparing the Image</A>
			<UL>
				<LI><A HREF="#Heading6">Sizing the Image</A>
				<UL>
					<LI><A HREF="#Heading7">Figure 18.2.</A>
					<LI><A HREF="#Heading8">Figure 18.3.</A>
				</UL>
				<LI><A HREF="#Heading9">Loading Pictures at Runtime</A>
			</UL>
			<LI><A HREF="#Heading10">The Picture Box Control</A>
			<UL>
				<LI><A HREF="#Heading11">Figure 18.4.</A>
			</UL>
			<LI><A HREF="#Heading12">Animating Pictures</A>
			<UL>
				<LI><A HREF="#Heading13">Figure 18.5.</A>
				<LI><A HREF="#Heading14">Figure 18.6.</A>
			</UL>
			<LI><A HREF="#Heading15">Static Variables</A>
			<LI><A HREF="#Heading16">Summary</A>
			<LI><A HREF="#Heading17">Q&amp;A</A>
			<LI><A HREF="#Heading18">Workshop</A>
			<UL>
				<LI><A HREF="#Heading19">Quiz</A>
				<LI><A HREF="#Heading20">Exercises</A>
			</UL>
		</UL>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H2 ALIGN="CENTER"><A NAME="Heading1"></A><FONT COLOR="#000077">Hour 18</FONT></H2>
<H2 ALIGN="CENTER"><A NAME="Heading2"></A><FONT COLOR="#000077">The Graphic Image
Controls</FONT></H2>
<P>Take a time-out to have some fun! Almost everybody enjoys working with graphics,
and Visual Basic's graphic image controls let you add graphics to your applications.
The two primary graphic image tools, the Image control and the Picture Box control,
work almost exactly alike to add graphic images to your applications. The tools don't
give you the ability to draw lines and circles (other controls do that, as you'll
see in the next hour), but you can add graphic images to your applications and manipulate
those images with what you learn in this hour's lesson.</P>
<P>The highlights of this hour include

<UL>
	<LI>Which controls display graphic images
	<P>
	<LI>What types of graphic files you can display
	<P>
	<LI>How the Image control differs from the Picture Box control
	<P>
	<LI>When the Toolbar control provides animation techniques
	<P>
	<LI>How to adjust the image's size in the Picture Box or Image control
	<P>
	<LI>How to improve the animation's efficiency so the movement runs more smoothly
	across your screen
</UL>

<H3 ALIGN="CENTER"><A NAME="Heading3"></A><FONT COLOR="#000077">The Image Control</FONT></H3>
<P>The Image control displays graphics on your Form window. The graphics reside in
a file, and the Image control determines how that file's graphic image will appear
on the screen.</P>
<P>When you add the Image control to your application's form, you will not see an
image of any kind, but rather the outline of a rectangle, as shown in Figure 18.1.<BR>
<BR>
<A NAME="Heading4"></A><A HREF="../art/ch18/18cce01.jpg"><FONT COLOR="#000077">Figure
18.1.</FONT></A><FONT COLOR="#000077"> </FONT><I>The Image control does not look
like much when you first place it.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>It's been a while
	(Hour 1, &quot;Visual Basic at Work&quot;) since you saw the location of all the
	Toolbox window's tools. If you cannot locate the Image control or the Picture Box
	control for this lesson, remember that all of VB's development environment supports
	tooltips, so you can find the correct controls by hovering your mouse pointer over
	the tools on the Toolbox window. The Picture Box control icon looks like a desert.
	The Image control icon contains the sun overlooking mountains. 
<HR>


</BLOCKQUOTE>

<H4 ALIGN="CENTER"><A NAME="Heading5"></A><FONT COLOR="#000077">Preparing the Image</FONT></H4>
<P>A placed Image control does not look like a graphic image until you set appropriate
properties. The most important property setting is the <TT>Picture</TT> property
because the <TT>Picture</TT> property determines which image appears inside the Image
control's boundaries on the form. When you click on the Picture control, Visual Basic
displays an ellipsis button you can click to display a Load Picture dialog box that
displays a dialog box similar to a File Open dialog box.</P>
<P>The Load Picture dialog box displays a list of files with the graphic-related
filename extensions shown in Table 18.1.</P>
<CENTER>
<P><B>Table 18.1. The file types supported by the Image control. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Extension</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>File Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>.bmp</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A Windows bitmap image file</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>.cur</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">An animated cursor file (not available for NT programmers at this time because NT
			does not support animated cursors that move)</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>.dib</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">An older bitmap image format</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>.emf</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">An enhanced Windows metafile extension</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>.gif</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A Graphic Interchange Format file often used on Web pages</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>.ico</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">An icon file</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>.jpg</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The JPEG image format that stores graphics in a highly compressed format</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>.wmf</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">A Windows metafile</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>As long as an image contains one of Table 18.1's filename extensions, you can
display that image on your form with the Image control.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Visual Basic
	comes with several supplied graphic image files that take on Table 18.1's formats.
	These files are stored in VB's <TT>Graphics</TT> folder and further subdivided into
	categories and file types. When this lesson discusses using one of these graphic
	files, search the <TT>Graphics</TT> folder for the image file to load. 
<HR>


</BLOCKQUOTE>

<P>You can select a graphic file that you want to load into the Image control's <TT>Picture</TT>
property, and Visual Basic displays that image on the form. If you were to select
the <TT>Coins.wmf</TT> file located in the <TT>Graphics\Metafile\Business</TT> folder,
you would see the coin metafile appear like the one shown in Figure 18.2. In the
figure, the <TT>BorderStyle</TT> property is set to <TT>1-FixedSingle</TT> so you'll
know where the Image control edges appear in relation to the image.
<CENTER>
<H4><A NAME="Heading6"></A><FONT COLOR="#000077">Sizing the Image</FONT></H4>
</CENTER>
<P>If the metafile had been smaller, the Image control would have decreased its size
to capture exactly the image's measurements. The Image control shrinks or enlarges
to display the entire image. Therefore, the typical sizing properties such as <TT>Width</TT>
and <TT>Height</TT> don't always mean much when you place an Image control on the
form. The Image control will adjust to hold the entire image that you want to display
there.<BR>
<BR>
<A NAME="Heading7"></A><A HREF="../art/ch18/18cce02.jpg"><FONT COLOR="#000077">Figure
18.2.</FONT></A><FONT COLOR="#000077"> </FONT><I>The Image control enlarges to hold
the entire metafile image.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>You can try
	this yourself: Place an Image control on the form and load one of the <TT>Bitmap</TT>
	folder images into the Image control's <TT>Picture</TT> property. The Image control
	shrinks down to the size of a toolbar button to hold the small image. 
<HR>


</BLOCKQUOTE>

<P>Once you place an image on the form, you can resize the Image control just as
you can other controls by dragging its sizing handles out and in. Therefore, after
you load an image such as the <TT>Coins.wmf</TT> image, you can adjust the sizing
handles to make the Image control smaller.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="WARNING:"></A><FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>When you
	adjust an image's size after you load a graphic image into the Picture control, the
	image itself does not really shrink or grow, but the Image control shrinks and grows.
	If you make the Image control's borders smaller, the control will simply truncate
	or clip the image that does not fit in the Image control boundaries. Therefore, not
	all of the image may appear if the control is not large enough. If you expand the
	Image control again, however, the rest of the image reappears so the truncation occurs
	only visually, but parts of the image itself are not cut off when you shrink the
	edges. You can enlarge and shrink the image itself; however, you must use a different
	property, as you're about to see. 
<HR>


</BLOCKQUOTE>

<P>The Image control's resizing capability can also make the Image control a nuisance.
For example, other images and controls might be in place and an oversized image would
overwrite some of their form area. Therefore, you need a way to control the image's
size without clipping the image.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>To clip or to truncate means
to hide part of an image with a control's border.</P>
<P>The <TT>Stretch</TT> property controls the Image control's automatic sizing capabilities.
When <TT>Stretch</TT> is <TT>False</TT> (the default value), the Image control will
expand or shrink to display whatever image you load, but the image inside the Image
control does not change but is only clipped as just described. Instead, if you set
the <TT>Stretch</TT> property to <TT>True</TT>, the image does enlarge or shrink,
depending on the size of the Image control. Therefore, if you want to fit an image
into a small space, be sure to turn on <TT>Stretch</TT> before you adjust the Image
control's size.</P>
<P>Figure 18.3 shows a form with two Image controls. One is large and one is small,
but they both use the same <TT>Coins.wmf</TT> image you saw earlier. With both controls'
<TT>Stretch</TT> properties set to <TT>True</TT>, the images themselves grow and
shrink inside their boundaries.<BR>
<BR>
<A NAME="Heading8"></A><A HREF="../art/ch18/18cce03.jpg"><FONT COLOR="#000077">Figure
18.3.</FONT></A><FONT COLOR="#000077"> </FONT><I>The images themselves adjust to
the Image control borders.</I>
<CENTER>
<H4><A NAME="Heading9"></A><FONT COLOR="#000077">Loading Pictures at Runtime</FONT></H4>
</CENTER>
<P>When your application needs to change the image shown inside an Image control,
you cannot simply assign a filename to the Image control's <TT>Picture</TT> property
like this:</P>
<PRE><FONT COLOR="#0066FF">imgMyFace.Picture = &quot;C:\Handsome.wmf&quot;  ` Not allowed
</FONT></PRE>
<P>The <TT>Picture</TT> property needs more than a simple assignment. To store a
new image in the Image control's <TT>Picture</TT> property, you must use the <TT>LoadPicture()</TT>
built-in function. Here is the format of <TT>LoadPicture()</TT>:</P>
<PRE><FONT COLOR="#0066FF">
LoadPicture([strFile])
</FONT></PRE>
<P>strFile is a string literal, variable, or control that contains the complete filename
and pathname. The graphic image can reside on another computer your application computer
is networked to. When the application gets to the <TT>LoadPicture()</TT> function,
the graphic image loads and the picture displays.</P>
<P>Therefore, to load the <TT>Handsome.wmf</TT> graphic image, you could specify
the following line:</P>
<PRE><FONT COLOR="#0066FF">imgMyFace.Picture = LoadPicture(&quot;C:\Handsome.wmf&quot;)  ` Allowed
</FONT></PRE>
<P>If you want to change the image's size before the image appears, you can set the
image's <TT>Visible</TT> property to <TT>False</TT> before loading the picture and
adjusting the <TT>Height</TT> and <TT>Width</TT> properties. Remember to set the
<TT>Stretch</TT> property to <TT>True</TT> if you want the image to resize and not
be clipped. Once you adjust the size, you then can set <TT>Visible</TT> to <TT>True</TT>,
and the image will appear in the size you prefer.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>You can remove
	an image from an Image control by assigning the <TT>LoadPicture()</TT> function to
	an Image control's <TT>Picture</TT> property without specifying a filename argument.
	
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading10"></A><FONT COLOR="#000077">The Picture Box Control</FONT></H3>
</CENTER>
<P>If you applied everything you knew about the Image control to the Picture Box
control, you could use the Picture Box control. The Picture Box control works almost
exactly like the Image control, with these exceptions:

<UL>
	<LI>The Picture Box control supports more properties, events, and methods than the
	Image control.
	<P>
	<LI>The Picture Box control consumes more resources than the Image control and, therefore,
	is not as efficient.
</UL>

<P>The Picture Box control automatically clips the image if the image will not fit
within the Picture Box control's borders that you set when you placed the Picture
Box control.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>You use the Picture
	Box control to group option buttons into a set just as you can with the Frame control.
	You then can display a graphic image in the option button background. 
<HR>


</BLOCKQUOTE>

<P>Suppose that you placed a rather large Picture Box control on the form but then
loaded a graphic file image into the picture box that was much smaller, such as an
icon. The Picture Box control would not resize, so the image would appear inside
the Picture Box control, such as the one shown in Figure 18.4.<BR>
<BR>
<A NAME="Heading11"></A><A HREF="../art/ch18/18cce04.jpg"><FONT COLOR="#000077">Figure
18.4.</FONT></A><FONT COLOR="#000077"> </FONT><I>The Picture Box control does not
always shrink to fit. </I><BR>
<BR>
The <TT>AutoSize</TT> property, normally set to <TT>False</TT>, determines how the
Image control responds to a loaded image's size. If <TT>AutoSize</TT> is <TT>False</TT>,
the control does not resize to fit the image. If, however, you change <TT>AutoSize</TT>
to <TT>True</TT>, the image control does resize to the image's measurements. If you
set <TT>AutoSize</TT> to <TT>True</TT>, the image resizes and does not clip. Therefore,
the image will always shrink or expand as needed to fit the Image control's size
when you set <TT>AutoSize</TT> to <TT>True</TT>.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>Once you set <TT>AutoSize</TT>
	to <TT>True</TT>, you can manually adjust the Picture Box control or adjust the control's
	<TT>Height</TT> and <TT>Width</TT> properties in the code. The image will resize
	along with the picture box's measurements. 
<HR>


</BLOCKQUOTE>

<P>Use the <TT>Align</TT> property to determine where on the form the Picture Box
control appears. You can dock the control to any side of the Form window control
using the <TT>Align</TT> property values described in Table 18.2.</P>
<CENTER>
<P><B>Table 18.2. Possible Align property values. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Property Value</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>0-None</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The Picture Box control appears where you place it in the Form window.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>1-Align Top</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The Picture Box control appears at the top of the Form window.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>2-Align Bottom</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The Picture Box control appears at the bottom of the Form window.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>3-Align Left</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The Picture Box control appears at the left of the Form window.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>4-Align Right</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The Picture Box control appears at the right of the Form window.</TD>
	</TR>
</TABLE>

</CENTER>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>You can use the
	Picture Box control to create toolbar buttons, so the <TT>Align</TT> property lets
	you dock the toolbar buttons to the top of the form. By changing the <TT>Align</TT>
	property, your code can move the toolbar elsewhere. 
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading12"></A><FONT COLOR="#000077">Animating Pictures</FONT></H3>
</CENTER>
<P>You can create animated applications using the Picture Box control by duplicating
the same techniques used in the stop-animation techniques that movie-makers use for
space and monster battles. This section describes the development of a simple animated
Form window. Once you master these simple techniques, more extensive animation might
take more time to develop, but the techniques don't change.</P>
<P>Figure 18.5 shows the running animated application. The application simply floats
a changing image across the screen. You'll use an Image control and a Timer control
to perform the animation.</P>
<P>The Timer control lets your application time the animation. After every time interval
that passes (set in the timer's <TT>Interval</TT> property) the timer's <TT>Timer()</TT>
event procedure executes. The <TT>Timer()</TT> event procedure can adjust the image's
location (and picture if needed). If you adjust the location every half second or
so, the animation will appear to move across the form.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>Stop-animation techniques
are techniques you use to make an image appear on the screen for a fraction of a
second before you put a new image in its place or move the image to a different part
of the Form window.<BR>
<BR>
<A NAME="Heading13"></A><A HREF="../art/ch18/18cce05.jpg"><FONT COLOR="#000077">Figure
18.5.</FONT></A><FONT COLOR="#000077"> </FONT><I>The animation application sends
an image across the screen.</I></P>
<P>To build the application, perform these steps:

<DL>
	<DD><B>1. </B>Create a new project and expand the Form window to a <TT>Height</TT>
	property of <TT>6840</TT> and a <TT>Width</TT> property of <TT>5910</TT>.<BR>
	<B><BR>
	2.</B> Change the form's <TT>Caption</TT> property to <TT>Animated Cartoon</TT>.<BR>
	<B><BR>
	3. </B>Place an Image control on the form. Don't worry about the location or size
	because you'll adjust those values with code. You'll use an Image control for this
	application instead of a Picture Box control because the Image control is slightly
	more efficient and you have no need for the extra properties that come with the Picture
	Box control.<BR>
	<B><BR>
	4.</B> Select the <TT>Face02</TT> graphic image located in your <TT>VB\Graphics\Icons\Misc</TT>
	folder. Remember the full path to this file because you'll have to enter this same
	path a little later in the application's code.<BR>
	<B><BR>
	5.</B> Change the image's <TT>Height</TT> property to <TT>1685</TT> and the <TT>Width</TT>
	property to <TT>1815</TT>, and change the image's <TT>Name</TT> property to <TT>imgHappy</TT>.<BR>
	<B><BR>
	6.</B> Set the image's <TT>Stretch</TT> property to <TT>True</TT> so the happy face
	resizes like the one in Figure 18.6.<BR>
	<B><BR>
	7.</B> Add a Timer control to the form and name the timer <TT>tmrAni</TT>. Set the
	timer's <TT>Interval</TT> property to <TT>500</TT>.<BR>
	<B><BR>
	8. </B>You must now add the code. Double-click the Form window to open the <TT>Form_Load()</TT>
	event procedure. <TT>Form_Load()</TT> will initialize the image's location. Type
	the following for the <TT>Form_Load()</TT> event procedure:
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">Private Sub Form_Load()
  ` Adjust the image's location
  imgHappy.Left = 0   ` Number of twips from
                      ` left of Form window
                      
  imgHappy.Top = 3820 ` Number of twips from
                      ` top of Form window
    
End Sub</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>
<P><A NAME="Heading14"></A><A HREF="../art/ch18/18cce06.jpg"><FONT COLOR="#000077">Figure
18.6.</FONT></A><FONT COLOR="#000077"> </FONT><I>The happy face is ready for display.</I>

<DL>
	<DD><B>9.</B> Add a <TT>Timer()</TT> event procedure to the Code window. To add the
	event procedure, you can click the Code window's Object drop-down list to select
	the Timer control. The <TT>Timer()</TT> is the only event procedure possible for
	a Toolbar control, so Visual Basic opens the <TT>Timer()</TT> event procedure. You
	can add code to the event procedure so <TT>tmrAni_Timer()</TT> looks like this:
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">Private Sub tmrAni_Timer()
  ` Adjust the Left and Top properties
  ` as well as the happy face shown so
  ` that the face appears to float up
  ` and across the Form window.
  
  ` The first time you declare a Static Boolean
  ` variable, VB initializes it to False
  Static blnFace As Boolean
  
    ` Add to Left and Top only if room is left
  If (imgHappy.Left &lt; 4800) And _
     (imgHappy.Top &gt; 500) Then
       imgHappy.Left = imgHappy.Left + 100
       imgHappy.Top = imgHappy.Top - 50
  Else
    imgHappy.Left = 0    ` Restore image's first
    imgHappy.Top = 3820  ` position.
  End If
  
  ` Change the image displayed
  If blnFace = True Then
     imgHappy.Picture = LoadPicture(&quot;C:\Program Files\DevStudio\&quot; &amp; _
                                    &quot;VB\Graphics\Icons\Misc\Face03.ico&quot;)
     blnFace = False
  Else
     imgHappy.Picture = LoadPicture(&quot;C:\Program Files\DevStudio\&quot; &amp; _
                                    &quot;VB\Graphics\Icons\Misc\Face02.ico&quot;)
     blnFace = True
  End If
     
End Sub</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>

<DL>
	<DD>Be sure to put the complete pathname for your computer's <TT>Face02.ico</TT>
	and <TT>Face03.ico</TT> files in the <TT>Timer()</TT> event procedure's <TT>LoadPicture()</TT>
	function calls.<BR>
	<BR>
	<B>10.</B> Save your project and run your application to see the happy face move
	across and up the screen. The happy face smiles and grins all along the way.
</DL>

<P>This animation application is simple, but you now have all the tools you need
to produce animation effects. You can smooth the animation by displaying images that
don't change as rapidly between time intervals as the two happy faces shown here.
In addition, if you compile your application, the animation will run more smoothly
than if you run the application from within the development environment. (Compile
the program by selecting File | Make. Hour 23, &quot;Distributing Your Applications,&quot;
explains more about application compilation.)</P>
<P>In addition, you can make the image's movement appear slightly less jumpy if you
set the image's <TT>Visible</TT> property to <TT>False</TT> at the top of the <TT>Timer()</TT>
event procedure and then set the property back to <TT>True</TT> before leaving the
procedure. Hiding the control before adjusting its location properties seems to improve
the control's movement. You might not notice a difference, however, if you run the
application on a quick computer, especially if you compile the application.</P>
<P>This application uses the Image control for efficiency, but you would probably
see little efficiency decrease if you used the Picture Box control instead. Today's
computers are fast, and the difference between the controls is not as critical as
it once was.
<CENTER>
<H3><A NAME="Heading15"></A><FONT COLOR="#000077">Static Variables</FONT></H3>
</CENTER>
<P>This happy face animation application demonstrates a different variable declaration
from the ones you've seen so far. The <TT>Static</TT> statement declares static variables.
Although static variables are local to their procedure, they do not lose their values
between procedure calls as regular local variables do. Therefore, if <TT>blnFace</TT>
is <TT>True</TT> when the <TT>tmrAni_Timer()</TT> event procedure finishes, the next
time Visual Basic executes <TT>tmrAni_Timer()</TT>, the <TT>blnFace</TT> variable
will still be declared and still be <TT>True</TT>. Visual Basic only creates and
initializes a static variable once per program execution, and the static variable
retains its value between procedure calls. The animation application uses the static
variable to test which happy face image is showing. If <TT>blnFace</TT> is <TT>True</TT>,
the event procedure loads the <TT>Face03.ico</TT> picture into the image and changes
<TT>blnFace</TT> from <TT>True</TT> to <TT>False</TT>. On the next event procedure
execution, <TT>bmlFace</TT> will still be <TT>False</TT>, so the event procedure
loads the <TT>Face02.ico</TT> image and changes <TT>bmlFace</TT> to <TT>True</TT>
for the next cycle. The static <TT>blnFace</TT> variable ensures that a different
face shows every time interval.
<CENTER>
<H3><A NAME="Heading16"></A><FONT COLOR="#000077">Summary</FONT></H3>
</CENTER>
<P>You probably had some fun working with the graphic image tools shown in this lesson.
You now know how to display graphic file images with the Image control and the Picture
Box control. Both controls do basically the same task: Both controls display images
from graphics files. Their differences lie in the way they display the images when
image size becomes an issue; also, the Picture Box control is slightly less efficient
but offers more properties, events, and methods.</P>
<P>The next hour further improves your artistic skills. Instead of using prepackaged
graphic images, in the next hour you will use Visual Basic's drawing tools to draw
your own lines, circles, boxes, and other shapes.
<CENTER>
<H3><A NAME="Heading17"></A><FONT COLOR="#000077">Q&amp;A</FONT></H3>
</CENTER>

<DL>
	<DD><B>Q Can I use graphic images other than the ones that Visual Basic supplies?<BR>
	<BR>
	A </B>Certainly. Both the Image control and the Picture Box control load images from
	any file that uses one of Table 18.1's graphic file formats. As a matter of fact,
	Visual Basic's images are fairly limited, and most of them are useful for command
	button pictures and toolbars but very little else.<BR>
	<B><BR>
	Q Did you just say command button pictures? When I click the command button's Picture
	property, no picture appears on the command button, so what's wrong?<BR>
	<BR>
	A</B> This is as good a time as any to describe how to put pictures on command buttons.
	Once you set the command button's <TT>Picture</TT> property, you must also set the
	<TT>Style</TT> property to <TT>1-Graphical</TT>. Only a graphical command button
	can display pictures. The command button works just like before, but now a picture
	appears. (Erase the <TT>Caption</TT> property if the caption overwrites the picture's
	image.) You did not learn about command button pictures in earlier lessons because
	you were not yet familiar with the <TT>LoadPicture()</TT> function. You can use <TT>LoadPicture()</TT>
	to insert a picture on a command button at runtime if you need to do that. Often,
	programmers will display a slightly different picture on a command button after the
	user clicks the button, and you can use <TT>LoadPicture()</TT> to do the same.<BR>
	<B><BR>
	Q If speed is no longer an issue, why should I ever use the Image control?<BR>
	<BR>
	A</B> Although the Image control is slightly more efficient, you are correct in remembering
	that today's computers are generally fast enough to handle both the Picture Box control
	and the Image control for any application. If, however, you work in a networked environment
	or if you set up your Windows desktop to run several applications simultaneously,
	you will want to utilize all resources as efficiently as possible. Therefore, you
	might prefer to use the Image control to lessen your computer's load if you don't
	need the Picture Box control's extra properties, events, and methods.
</DL>

<CENTER>
<H3><A NAME="Heading18"></A><FONT COLOR="#000077">Workshop</FONT></H3>
</CENTER>
<P>The quiz questions and exercises are provided for your further understanding.
See Appendix C, &quot;Answers,&quot; for answers.
<CENTER>
<H4><A NAME="Heading19"></A><FONT COLOR="#000077">Quiz</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> Which two controls display graphic images?<BR>
	<B><BR>
	2.</B> Which control is more efficient?<BR>
	<B><BR>
	3. </B>What happens if you load a picture into an Image control and the Image control
	is too small to hold the entire picture (assume default property values)?<BR>
	<B><BR>
	4.</B> What happens if you load a picture into a Picture Box control and the Picture
	Box control is too small to hold the entire picture (assume default property values)?<BR>
	<B><BR>
	5.</B> What happens if you load a picture into an Image control and the Image control
	is larger than the picture (assume default property values)?<BR>
	<B><BR>
	6.</B> What happens if you load a picture into a Picture Box control and the Picture
	Box control is larger than the picture (assume default property values)?<BR>
	<B><BR>
	7.</B> What is wrong with this assignment (assume that the filename and pathname
	are correct)?
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">imgFace.Picture = &quot;C:\DataPics\Flower.Ico&quot;</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>

<DL>
	<DD><B>8.</B> Which control helps control animation effects?<BR>
	<B><BR>
	9.</B> True or false: A static variable is a global variable because its value does
	not change from a procedure's termination to the same procedure's next execution.<BR>
	<B><BR>
	10.</B> When does a static variable first get initialized?
</DL>

<CENTER>
<H4><A NAME="Heading20"></A><FONT COLOR="#000077">Exercises</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> Add a command button to the animation application so that the animation
	does not begin until you click the button. The solution to this exercise might not
	be obvious at first. (Hint: Consider activating the Timer control in the command
	button's event procedure.) Put a happy face on the command button and hide the command
	button so it disappears when the application starts animating the happy face.<BR>
	<B><BR>
	2.</B> Change the animation application so that the happy face bounces off all four
	sides of the Form window.
	<P ALIGN="CENTER"><BR>
	<A HREF="ch17.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
	BORDER="0"></A><A HREF="../index.html"><IMG SRC="../buttons/blantoc.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="ch19.htm"><IMG SRC="../buttons/blannext.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="#heading1"><IMG SRC="../buttons/blantop.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A>
</DL>



</BODY>

</HTML>
