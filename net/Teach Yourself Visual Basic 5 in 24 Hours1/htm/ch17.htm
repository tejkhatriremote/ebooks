<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">

	<TITLE>Without a title - Title</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><A HREF="ch16.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37"
HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A
HREF="../index.html"><IMG SRC="../buttons/blantoc.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
BORDER="0"></A><A HREF="ch18.htm"><IMG SRC="../buttons/blannext.gif" WIDTH="37" HEIGHT="37"
ALIGN="BOTTOM" BORDER="0"></A></H1>

<UL>
	<LI><A HREF="#Heading1">Hour 17</A>
	<UL>
		<LI><A HREF="#Heading2">Menus in VB Applications</A>
		<UL>
			<LI><A HREF="#Heading3">The Menu Editor</A>
			<UL>
				<LI><A HREF="#Heading4">Figure 17.1.</A>
				<LI><A HREF="#Heading5">Figure 17.2.</A>
			</UL>
			<LI><A HREF="#Heading6">Adding an Applications Menu Bar</A>
			<UL>
				<LI><A HREF="#Heading7">Figure 17.3.</A>
			</UL>
			<LI><A HREF="#Heading8">Naming Menu Options</A>
			<UL>
				<LI><A HREF="#Heading9">Figure 17.4.</A>
				<LI><A HREF="#Heading10">Figure 17.5.</A>
			</UL>
			<LI><A HREF="#Heading11">Adding Pull-Down Menu Options</A>
			<UL>
				<LI><A HREF="#Heading12">Figure 17.6.</A>
				<LI><A HREF="#Heading13">Figure 17.7.</A>
			</UL>
			<LI><A HREF="#Heading14">Menu Extras</A>
			<UL>
				<LI><A HREF="#Heading15">Figure 17.8.</A>
			</UL>
			<LI><A HREF="#Heading16">Connecting Menus to Event Procedures</A>
			<UL>
				<LI><A HREF="#Heading17">Figure 17.9.</A>
			</UL>
			<LI><A HREF="#Heading18">Copying Menus Between Projects</A>
			<LI><A HREF="#Heading19">Summary</A>
			<LI><A HREF="#Heading20">Q&amp;A</A>
			<LI><A HREF="#Heading21">Workshop</A>
			<UL>
				<LI><A HREF="#Heading22">Quiz</A>
				<LI><A HREF="#Heading23">Exercises</A>
			</UL>
		</UL>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H2 ALIGN="CENTER"><A NAME="Heading1"></A><FONT COLOR="#000077">Hour 17</FONT></H2>
<H2 ALIGN="CENTER"><A NAME="Heading2"></A><FONT COLOR="#000077">Menus in VB Applications</FONT></H2>
<P>When you go to a restaurant for the first time, you don't know what to order until
the menu arrives. When users use your application, they need a menu so they will
know what to order also. Just like a restaurant's customers, your application's new
users will not know what they can do. The menu gives them a guide. Once they become
more familiar with the application, they will also learn various shortcut keys you
supply on the menu bar.</P>
<P>Most Windows programs contain common menu commands. Visual Basic is one such program.
Many of the Visual Basic pull-down menus contain the same commands as Microsoft Word
and Microsoft Excel. You should follow this pattern as closely as you can. Group
your file-related commands on the menu bar's File option so your users will feel
right at home with your application. Your application will require some menu options
that no other application uses, and your application certainly may not be as complete
as VB's, but use as much overlap as you can so your users can adapt as quickly as
possible to your application's interface.</P>
<P>The highlights of this hour include

<UL>
	<LI>What the Menu Editor does
	<P>
	<LI>How to add a menu bar to applications
	<P>
	<LI>When to code submenus
	<P>
	<LI>How to name menu options
	<P>
	<LI>Where to code menu events
</UL>

<H3 ALIGN="CENTER"><A NAME="Heading3"></A><FONT COLOR="#000077">The Menu Editor</FONT></H3>
<P>Before looking at menu creation, take a moment to familiarize yourself with Figure
17.1's menu components. The rest of this lesson discusses the various components
that make up most Windows menus. In working with Visual Basic, you've already seen
these menu components.<BR>
<BR>
<A NAME="Heading4"></A><A HREF="../art/ch17/17cce01.jpg"><FONT COLOR="#000077">Figure
17.1.</FONT></A><FONT COLOR="#000077"> </FONT><I>The menu components.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Notice that
	Visual Basic displays toolbar icons next to menu options that appear on one of the
	toolbars. Most of Microsoft's newer products now show the toolbar icons on matching
	menu options. You'll more quickly learn which toolbar goes with which menu item because
	you'll more quickly associate toolbar button icons to their equivalent menu options.
	Unfortunately, you cannot add such icons to your own application menus because Visual
	Basic does not give you a way to add the icons. 
<HR>


</BLOCKQUOTE>

<P>Even Visual Basic programming gurus don't always know that a menu is another control
object just like a command button or a text box. Once you add a menu bar to an application,
the menu bar and its options are all controls that you can manage from the Properties
window. Even though the menu items are regular controls with properties you can set,
the programming gurus don't often know that because they use a better resource than
the Properties window for creating their menus. Whereas the Properties window is
great for setting normal toolbox control properties, the Menu Editor makes for a
better menu-creation tool.</P>
<P>The Menu Editor lets you quickly and easily place menu bar items into your application
by pushing command buttons and typing a few property values. The Menu Editor contains
menu description tools that let you create the application's menu bar, menu commands,
and shortcut access keys to all of your applications.</P>
<P>The Menu Editor is a dialog box that you access from the Form window by pressing
Ctrl+E or by selecting Tools | Menu Editor from Visual Basic's own menu bar. Figure
17.2 shows the Menu Editor dialog box.<BR>
<BR>
<A NAME="Heading5"></A><A HREF="../art/ch17/17cce02.jpg"><FONT COLOR="#000077">Figure
17.2.</FONT></A><FONT COLOR="#000077"> </FONT><I>Creating a menu with the Menu Editor.</I></P>
<P>The Menu Editor creates your menu, but you still need to write event procedures
that tie menu command selections to actions taken by your application. When the user
selects a menu command, Visual Basic generates an event, just as it generates an
event when the user clicks a command button. The only event that menu items support
is the <TT>Click()</TT> event. Therefore, whether the user selects a menu option
with a mouse or with a keyboard, that selection triggers a <TT>Click()</TT> event.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Learning to
	add menus to your programs involves a mastery of the Menu Editor, and you'll always
	re-open the Menu Editor if you want to modify an application's menu. After you use
	the Menu Editor to create the menu, the menu's event procedures work just like the
	other event procedures that you've been writing throughout this book. 
<HR>


</BLOCKQUOTE>

<P>As you'll see throughout the rest of this lesson, the Menu Editor lets you add
to applications a menu bar, pull-down menu commands, separator bars (bars that help
group menu options), submenus (menus that appear from other menu options), checked
items, and shortcut access keystrokes. After you create the menu, you'll write event
procedures for each menu option. When the user selects a menu command, that menu
command's event procedure will automatically execute.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Sometimes the
	options on the menu bar's pull-down list are called items or commands. This tutorial
	uses the more common term, option, throughout the text. 
<HR>


</BLOCKQUOTE>

<H3 ALIGN="CENTER"><A NAME="Heading6"></A><FONT COLOR="#000077">Adding an Applications
Menu Bar</FONT></H3>
<P>An application's menu bar is one of the easiest parts of the menu system to add.
This section walks you through the steps necessary to add a menu bar. Subsequent
sections show you how to add pull-down menu options to each of the menu bar commands.</P>
<P>The Menu Editor makes adding a menu bar to any application simple. Create a new
project so you can practice creating a menu. The menu bar you create will contain
the following options:

<UL>
	<LI>File
	<P>
	<LI>Edit
	<P>
	<LI>View
	<P>
	<LI>Help
</UL>

<P>This tutorial could go into a lot of detail, explaining all the nuances of the
Menu Editor. Luckily, you don't need all that preliminary detailed description. The
Menu Editor is most easily mastered by jumping in and building a menu from scratch.
You don't need a bunch of theory to use the Menu Editor.</P>
<P>Every option on a menu bar, as well as the menu options, submenus, and separator
bars that appear when you display a pull-down menu, has properties just as the other
controls do. The Menu Editor acts like a dialog box that helps you set menu property
values. The Properties window is perfect for the other controls, but as you'll see,
menus require a few extra kinds of property choices that the other controls don't
need. That's why using the customized Menu Editor is simpler than modifying an application's
menu through the Properties window.</P>
<P>Perform the following steps to add a menu bar to your new project:

<DL>
	<DD><B>1. </B>Press Ctrl+E to display the Menu Editor. Each menu bar command requires
	a caption (specified by the <TT>Caption</TT> property) and a name (specified by the
	<TT>Name</TT> property). The other Menu Editor items are optional.<BR>
	<BR>
	The additional Menu Editor properties, such as the <TT>Enabled</TT> property that
	determines whether the menu item is grayed out and unavailable for certain procedures,
	as well as a <TT>Visible</TT> property, which determines when the user can see the
	menu bar command, are not needed for every option. You'll rarely change these extra
	property values from their default values for menu bar commands.<BR>
	<B><BR>
	2.</B> At the Caption prompt, type <TT>&amp;File</TT>. The ampersand, as with the
	other controls' <TT>Caption</TT> properties, indicates an accelerator keystroke of
	Alt+F for the File menu item. As you type the <TT>Caption</TT> value, notice that
	Visual Basic adds the caption in the Menu Editor's lower section. The Menu Editor's
	lower half displays the menu bar and the pull-down options as you add them to the
	menu. The Menu Editor's top half contains a description of individual items in the
	menu.<BR>
	<B><BR>
	3.</B> Press Tab to move the focus to the Name text box, and type <TT>mnuFile</TT>.
	The application will refer to the File menu bar item by the name <TT>mnuFile</TT>
	as needed. In other words, just as a command button might be named <TT>cmdPressMe</TT>,
	the menu bar option can be named <TT>mnuFile</TT>. The three-letter prefix indicates
	that the <TT>mnuFile</TT> object is a menu item and not some other kind of control.
	Your Menu Editor's window should look something like the one in Figure 17.3.<BR>
	<BR>
	The only accelerator keystroke available for menu bar options is the underlined Alt+keystroke
	that occurs as the result of the <TT>Caption</TT> property's underlined letter. Don't
	attempt to select Ctrl+keystroke from the Shortcut drop-down list box for the menu
	bar options. Ctrl+keystroke shortcut combinations are available only for pull-down
	menu options.<BR>
	Don't press Enter or click the OK button to close the Menu Editor just yet, because
	you've got to add the additional menu bar options before closing the Menu Editor's
	window.
</DL>

<P><A NAME="Heading7"></A><A HREF="../art/ch17/17cce03.jpg"><FONT COLOR="#000077">Figure
17.3.</FONT></A><FONT COLOR="#000077"> </FONT><I>The menu bar now has a defined File
option.</I>
<H3 ALIGN="CENTER"><A NAME="Heading8"></A><FONT COLOR="#000077">Naming Menu Options</FONT></H3>
<P>You should follow a standard naming convention when naming menu options.</P>
<P>The event procedures within any Visual Basic application reference menu options
by their menu option names. Preface all menu items, both menu bar and pull-down menu
items, with the <TT>mnu</TT> prefix so that you can easily distinguish menu commands
from variables and from the other controls as you work within the application's code.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Generally, Visual
	Basic programmers follow the standard of naming menu bar options with the prefix
	<TT>mnu</TT> followed by the name of the item. Therefore, the File option is named
	<TT>mnuFile</TT>, Edit is named <TT>mnuEdit</TT>, and so on. 
<HR>


</BLOCKQUOTE>

<P>As you add pull-down options to the menu bar items, preface each of those options
with the <TT>mnu</TT> prefix as well as the name of the menu bar command, and then
append the name of the pull-down menu's item. Therefore, the File | Exit item would
be named <TT>mnuFileExit</TT>, View | Normal would be named <TT>mnuViewNormal</TT>,
and so on. The names then clearly describe the menu items that they represent. If
a submenu appears, append its item name to the parent's name (for example, <TT>mnuViewNormalFull</TT>).</P>
<P>Follow these steps to complete the creation of a menu bar:

<DL>
	<DD><B>1.</B> Click the Menu Editor's Next command button to inform Visual Basic
	that you want to add the next item. The lower window's highlight bar drops down to
	the next line in preparation for the next menu item. The buttons right above the
	lower window control the addition, insertion, and deletion of menu items from the
	menu you are building.<BR>
	<B><BR>
	2.</B> Type <TT>&amp;Edit</TT> at the Caption text box and press Tab. Name this second
	menu bar item <TT>mnuEdit</TT>. Click the Next command button to prepare the Menu
	Editor for the next menu bar item.<BR>
	<B><BR>
	3</B>. Type <TT>&amp;View</TT> and press Tab to move the focus to the Name text box.
	Type <TT>mnuView</TT> and select Next to prepare for the final menu item.<BR>
	<B><BR>
	4.</B> Type <TT>&amp;Help</TT> and press Tab to move the focus to the Name text box.
	Type <TT>mnuHelp</TT>. Your screen should look like the one in Figure 17.4.
</DL>

<P><A NAME="Heading9"></A><A HREF="../art/ch17/17cce04.jpg"><FONT COLOR="#000077">Figure
17.4.</FONT></A><FONT COLOR="#000077"> </FONT><I>The menu bar is now complete, with
four options. </I><BR>
<BR>
Close the Menu Editor by pressing Enter or clicking the OK command button. Immediately,
Visual Basic displays the new menu bar across the top of the application's Form window,
as shown in Figure 17.5. The menu bar is the result of your efforts with the Menu
Editor.</P>
<P>Obviously, the menu is incomplete. The menu bar exists, but no options pull down
from the menu bar. You're now ready to add the individual pull-down options to the
menu. The next section explains how to complete the File pull-down menu.<BR>
<BR>
<A NAME="Heading10"></A><A HREF="../art/ch17/17cce05.jpg"><FONT COLOR="#000077">Figure
17.5.</FONT></A><FONT COLOR="#000077"> </FONT><I>The Form window's new menu bar.</I>
<H3 ALIGN="CENTER"><A NAME="Heading11"></A><FONT COLOR="#000077">Adding Pull-Down
Menu Options</FONT></H3>
<P>Each menu bar command opens a pull-down menu that consists of a series of options,
separator bars, access keystrokes, and submenus. The Menu Editor's four arrow command
buttons let you indent the pull-down menu commands from their matching menu bar commands
to show which items go with which menu bar commands.</P>
<P>Now that you've added the menu bar, you can add the individual options to the
pull-down menus. You didn't have to complete the menu bar before completing each
pull-down menu. You could have added the File option to the menu bar and then completed
the File option's pull-down menu before adding the View option to the menu bar. The
order in which you add menu items doesn't matter at all. It is where you place them
and how you indent them that determines the order in which the menu items appear.</P>
<P>The File pull-down menu will contain the following items:

<UL>
	<LI>The New command
	<P>
	<LI>The Open command with a shortcut access keystroke of Ctrl+O
	<P>
	<LI>The Close command
	<P>
	<LI>A separator bar
	<P>
	<LI>The Exit command
</UL>

<P>After you add these submenu items, you can hook up the menu commands to <TT>Click()</TT>
event procedures that you write, as explained in the next section.</P>
<P>Adding pull-down items requires that you follow the same steps you followed when
you added the menu bar items in the previous section. The difference is that the
Menu Editor options that the previous section ignored, such as the Shortcut option,
become more important because you'll apply some of these options to the pull-down
menu items. Table 17.1 explains the remaining Menu Editor properties.</P>
<CENTER>
<P><B>Table 17.1. The Menu Editor's remaining properties. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Checked</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Indicates whether a menu item has a checkmark next to it. Generally, you'll add checkmarks
			to menu options that perform on or off actions, such as a View menu that contains
			a Highlighted command. The checkmark appears when you, at design time or through
			code, set the menu item's <TT>Checked</TT> property to <TT>True</TT>. The checkmark
			goes away (indicating that the item is no longer active or selected) when you set
			the <TT>Checked</TT> property to <TT>False</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>HelpContextID</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">This is a code that matches a help file description if and when you add help files
			to your application.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Index</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">If you create a menu control array rather than name individual menu items separately,
			this <TT>Index</TT> property specifies the menu item's subscript within the control
			array.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Shortcut</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">This is a drop-down list of Ctrl+keystroke access keys that you can add to any pull-down
			menu item.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Window List</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies whether the menu item applies to an advanced application's MDI (multiple-document
			interface) document. The menus that you create for this book don't require the use
			of MDI features.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>Perhaps the most important command keys on the Menu Editor, when you add pull-down
menu items, are the four arrow command buttons. The left and right arrow command
buttons indicate which items go with which menu bar option. In other words, if four
items in the lower window are indented to the right and appear directly beneath the
File menu bar item, those four indented items will appear on File's pull-down menu.
The left arrow removes an indentation level and the right arrow adds an indentation
level. The up- and down-arrow keys move menu items up and down the list of menu items,
rearranging the order if you need to do so.</P>
<P>The arrow keys make a lot of sense when you see them used. Follow these steps
to create the File pull-down menu bar's submenu:

<DL>
	<DD><B>1.</B> Move the lower window's highlight line to the <TT>&amp;Edit</TT> menu
	bar item. Click the Insert command button. You always insert before an item, so to
	add items to the File menu, you must insert before the Edit menu bar item in the
	lower window.<BR>
	<B><BR>
	2.</B> Click the right-arrow command button. Visual Basic adds four dots (similar
	to an ellipsis), showing that the newly inserted item will be indented under the
	File option.<BR>
	<B><BR>
	3.</B> Move the focus to the caption prompt and type <TT>&amp;New</TT>.<BR>
	<B><BR>
	4.</B> Press Tab to move the focus to the name prompt and type <TT>mnuFileNew</TT>.<BR>
	<B><BR>
	5.</B> Click Next and then Insert, and press the right arrow command button to insert
	another item beneath the New item. Your Menu Editor should look like the one in Figure
	17.6. Notice that the File menu bar option now has a pull-down menu; you know this
	because of the indentation of the New option right below <TT>&amp;File</TT>.
</DL>

<P><A NAME="Heading12"></A><A HREF="../art/ch17/17cce06.jpg"><FONT COLOR="#000077">Figure
17.6.</FONT></A><FONT COLOR="#000077"> </FONT><I>The File pull-down menu is gaining
additional options.</I>

<DL>
	<DD><BR>
	<B>6. </B>Move the focus to the caption prompt and type <TT>&amp;Open</TT>. Press
	Tab and enter the <TT>Name</TT> property value <TT>mnuFileOpen</TT>. Rather than
	add the next item, click the Shortcut drop-down list and select Ctrl+O from the list.
	When the user now displays the File pull-down menu, Ctrl+O will appear as the shortcut
	key next to the File | Open menu item.<BR>
	<BR>
	<B>7.</B> Click Next, Insert, and then the right arrow command button to make room
	for the next item. Add the Exit caption with the <TT>Name</TT> property <TT>mnuFileExit</TT>.
	Click Next again and then Insert to insert another item beneath the Close item. You
	can now add a separator bar.
</DL>

<P>Separator bars help you break individual pull-down menus into separate sections.
Although several options appear on most Windows applications' File pull-down menus,
these options don't all perform the same kind of tasks. Some options relate to files,
some relate to printing, and the Exit command always appears on the File menu as
well. The separator bars help distinguish groups of different items from each other
on the pull-down menus.</P>
<P>All separator bars have the same <TT>Caption</TT> property, which is nothing more
than a hyphen (<TT>-</TT>). You must give every separator bar a different name. Usually,
the name of the separator bars on the File menu are <TT>mnuFileBar1</TT>, <TT>mnuFileBar2</TT>,
and so on. Some programmers prefer to name the first separator bar <TT>Sep1</TT>,
the second <TT>Sep2</TT>, and so on, no matter which menu the separator bar appears
on.</P>
<P>You must add the separator bars on an indented menu level so that they indent
properly beneath their pull-down menus. Follow these steps to add the single separator
bar for this lesson's File pull-down menu:

<DL>
	<DD><B>1. </B>Type - (a hyphen) for the <TT>Caption</TT> property and press Tab.<BR>
	<B><BR>
	2.</B> Type <TT>mnuFileBar1</TT> for the <TT>Name</TT> property.
</DL>

<P>There's one more item to add: the Exit item. You know enough to add the Exit option
to the File menu. After adding Exit, your Menu Editor should look like the one shown
in Figure 17.7.<BR>
<BR>
<A NAME="Heading13"></A><A HREF="../art/ch17/17cce07.jpg"><FONT COLOR="#000077">Figure
17.7.</FONT></A><FONT COLOR="#000077"> </FONT><I>The File menu is now complete.</I>
<CENTER>
<H3><A NAME="Heading14"></A><FONT COLOR="#000077">Menu Extras</FONT></H3>
</CENTER>
<P>You don't need to complete all the menu bar options. You already know how to add
routine options. If you need to add additional menu elements, however, such as a
submenu or a checked item, the mechanics of those additions are about as simple as
the items that you added in the previous sections.</P>
<P>To practice adding a checked object, add one checked item to the View pull-down
menu bar item. Add an indented option that uses <TT>Highlighted</TT> for the Caption
item and <TT>mnuViewHighlighted</TT> for the Name. Click the Checked check box. The
View | Highlighted option will initially be checked when the user displays the View
pull-down menu. Your code can check and uncheck the item by changing the <TT>mnuViewHighlighted</TT>
object's <TT>Checked</TT> property to <TT>True</TT> and <TT>False</TT>.</P>
<P>If you want to add a submenu from a pull-down menu item, add an additional level
of indentation. For example, to add a two-option submenu off the File | Open option
that gave the user an additional choice of Binary or Text (binary and text are two
possible kinds of files), insert a place for the first item right beneath Open and
click the right-arrow command button to add a second ellipsis. Type <TT>&amp;Binary</TT>
for the <TT>Caption</TT> property and <TT>mnuFileOpenBinary</TT> for the <TT>Name</TT>
property. Insert an additional item beneath that, indented at the same level, and
type <TT>&amp;Text</TT> for the <TT>Caption</TT> property and <TT>mnuFileOpenText</TT>
for the <TT>Name</TT> property.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Your menu has
	a slight bug now! Go back to the <TT>&amp;Open</TT> menu option and set the shortcut
	keystroke back to <TT>None</TT>. You cannot add a shortcut keystroke to a submenu's
	parent option. 
<HR>


</BLOCKQUOTE>

<P>Now that you've completed the menu (as far as we're taking it here), click the
OK command button. When the Menu Editor disappears, you'll see the application's
Form window with the menu bar across the top of the screen. Open the File menu and
then select Open to see the submenu like the one shown in Figure 17.8. Notice the
right arrow next to Open, which indicates that an additional submenu will appear
for that option.<BR>
<BR>
<A NAME="Heading15"></A><A HREF="../art/ch17/17cce08.jpg"><FONT COLOR="#000077">Figure
17.8.</FONT></A><FONT COLOR="#000077"> </FONT>The File menu is now complete.
<CENTER>
<H3><A NAME="Heading16"></A><FONT COLOR="#000077">Connecting Menus to Event Procedures</FONT></H3>
</CENTER>
<P>Once you've built your menu, you need to tie each menu command to your application.
To respond to menu selections, you need to write <TT>Click()</TT> event procedures
that you want Visual Basic to execute when the user selects a menu command.</P>
<P>Visual Basic generates a <TT>Click</TT> event when the user selects a menu command.
The name of the menu command, combined with <TT>Click()</TT>, provides the name of
the event procedure. Therefore, the File | Exit menu item named <TT>mnuFileExit</TT>
will generate the execution of the event procedure named <TT>mnuFileExit_Click()</TT>.</P>
<P>Adding the <TT>mnuFileExit_Click()</TT> event procedure requires only that you
select that menu command during the program's development. At the Form window, click
the File menu bar command. Visual Basic displays the Form window's File pull-down
menu. Even though you're not running the program but are working on the program from
the Form window, the File menu shows you what happens when the user selects File
at runtime.</P>
<P>Click the Exit item on the File pull-down menu. As soon as you click Exit, Visual
Basic opens the Code window to a new event procedure named <TT>mnuFileExit_Click()</TT>,
as shown in Figure 17.9.<BR>
<BR>
<A NAME="Heading17"></A><A HREF="../art/ch17/17cce09.jpg"><FONT COLOR="#000077">Figure
17.9.</FONT></A><FONT COLOR="#000077"> </FONT><I>The menu option's <TT>Click()</TT>
event procedure.</I></P>
<P>This event procedure is simple to code. When the user selects File | Exit, you
want the application to terminate. Therefore, insert an <TT>Unload Me</TT> and an
<TT>End</TT> statement to the body of the <TT>mnuFileExit_Click()</TT> procedure
and close the procedure by double-clicking its control button. As you can see, adding
event procedures requires little more than clicking the menu item and adding the
body of the procedure that appears.</P>
<P>Although the application is far from complete, you can run the application to
see how the menu looks and to test the File | Exit option.</P>
<P>After building your menu, you must tie code to the various menu items by writing
<TT>Click()</TT> event procedures that will execute when the user runs the application
and selects from the menu. If any menu command duplicates the functionality of other
controls, such as command buttons, don't copy the command button's code into the
body of the menu event procedure. Instead, simply execute that command button's event
procedure from the menu item's event procedure.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>The Menu Editor
	creates a working menu shell. As you've seen, the Menu Editor will not do more than
	produce a working menu that responds the way other Windows menus respond. You must
	write all the code behind all the menu options. If you want a checkmark to disappear
	from a checked menu item (such as this application's View | Highlighted option),
	your code will have to hide the checkmark. The mark will not disappear on its own
	when the user selects the option. 
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading18"></A><FONT COLOR="#000077">Copying Menus Between Projects</FONT></H3>
</CENTER>
<P>Here's a tip that you should file away for the day when you want to copy a menu
from one form to another project's form file. Although several methods exist, one
way that you can accomplish this copy is to perform these steps:

<DL>
	<DD><B>1.</B> Make a backup of the target form where you want to copy the menu.<BR>
	<B><BR>
	2.</B> Start the Windows Notepad Editor.<BR>
	<B><BR>
	3. </B>Load the form with the menu into the editor. Visual Basic saves form files
	in a text format that you can load into an editor.<BR>
	<B><BR>
	4.</B> Copy all the text that describes that form's menu to the Windows Clipboard.
	Here is a form's text that describes the previous section's menu:
</DL>

<PRE></PRE>


<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">Begin VB.Menu mnuFile
   Caption         =   &quot;&amp;File&quot;
   Begin VB.Menu mnuFileNew
      Caption         =   &quot;&amp;New&quot;
   End
   Begin VB.Menu mnuFileOpen
      Caption         =   &quot;&amp;Open&quot;
      Begin VB.Menu mnuFileOpenBinary
         Caption         =   &quot;&amp;Binary&quot;
      End
      Begin VB.Menu mnuFileOpenText
         Caption         =   &quot;&amp;Text&quot;
      End
   End
   Begin VB.Menu mnuFileClose
      Caption         =   &quot;&amp;Close&quot;
   End
   Begin VB.Menu mnuFileBar1
      Caption         =   &quot;-&quot;
   End
   Begin VB.Menu mnuFileExit
      Caption         =   &quot;E&amp;xit&quot;
   End
End
Begin VB.Menu mnuEdit
   Caption         =   &quot;&amp;Edit&quot;
End
Begin VB.Menu mnuView
   Caption         =   &quot;&amp;View&quot;
   Begin VB.Menu mnuViewHighlighted
      Caption         =   &quot;Highlighted&quot;
      Checked         =   -1  `True
   End
End
Begin VB.Menu mnuHelp
   Caption         =   &quot;&amp;Help&quot;
End</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>

<DL>
	<DD><B>5. </B>Open the target application's form file. Each <TT>Begin-End</TT> block
	defines an object on the form. Locate an <TT>End</TT> statement that completes an
	object's definition and paste the Clipboard's form description there. When you save
	the file and load the form, the menu will be working as it does in the other. You
	now can write the event procedures for the menu options.
</DL>

<CENTER>
<H3><A NAME="Heading19"></A><FONT COLOR="#000077">Summary</FONT></H3>
</CENTER>
<P>Adding menus to your applications requires only that you master the Menu Editor.
Menus are nothing more than advanced controls with property values that you set using
the Menu Editor. Most menu items require that you specify a <TT>Caption</TT> and
<TT>Name</TT> property as well as indent the item properly under its menu bar command.
Optionally, a menu item might contain a shortcut access keystroke or a checkmark
next to the item.</P>
<P>The next hour will be really fun--you'll learn how to add colorful graphic images
to your applications.
<CENTER>
<H3><A NAME="Heading20"></A><FONT COLOR="#000077">Q&amp;A</FONT></H3>
</CENTER>

<DL>
	<DD><B>Q My application is simple, so do I now need a menu?<BR>
	<BR>
	A</B> Most applications require a menu, even if the only menu option is File | Exit.
	The simple applications you've seen throughout this tutorial have rarely had an Exit
	command button. To close them you've had to click the application's window close
	button. You offer users a much more graceful exit if you give them the familiar File
	| Exit command.<BR>
	<B><BR>
	Q How many levels can I use for submenus?<BR>
	<BR>
	A</B> The Menu Editor supports numerous submenu levels, but menus become much less
	manageable if you go past two levels of submenus. In other words, a submenu such
	as File | Open | Text is about as deep as you should go. Your users will find the
	menu structure too cumbersome to traverse if you add additional submenus. A better
	option is to create a dialog box if a menu option requires several settings. The
	dialog box can be a second form with buttons and controls. You can display that form
	(by assigning <TT>True</TT> to its <TT>Visible</TT> property) when the user clicks
	the menu option for that dialog box.
</DL>

<CENTER>
<H3><A NAME="Heading21"></A><FONT COLOR="#000077">Workshop</FONT></H3>
</CENTER>
<P>The quiz questions and exercises are provided for your further understanding.
See Appendix C, &quot;Answers,&quot; for answers.
<CENTER>
<H4><A NAME="Heading22"></A><FONT COLOR="#000077">Quiz</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> True or false: Menu items are controls that have properties.<BR>
	<B><BR>
	2.</B> True or false: More than one form can have a menu within a single application.<BR>
	<B><BR>
	3.</B> What is the most common menu-naming prefix?<BR>
	<B><BR>
	4. </B>What would be a good name for an Edit | Select | All menu option?<BR>
	<B><BR>
	5.</B> How does the Menu Editor know that a submenu option is part of a menu bar
	option?<BR>
	<B><BR>
	6.</B> True or false: You can add a menu shortcut keystroke to a menu option that
	produces a submenu.<BR>
	<B><BR>
	7. </B>What menu option should all applications use?<BR>
	<B><BR>
	8. </B>Why should programmers shy away from using unconventional menu options such
	as File | Quit?<BR>
	<B><BR>
	9. </B>What is the event property used in menu processing?<BR>
	<B><BR>
	10. </B>Which property must your application change in order to change the checkmark
	setting on a menu option?
</DL>

<CENTER>
<H4><A NAME="Heading23"></A><FONT COLOR="#000077">Exercises</FONT></H4>
</CENTER>

<DL>
	<DD><B>1. </B>Create a new project with the following menu bar items: Write, Read,
	and Listen. Create a Write submenu with these options: Keyboard, Pencil, and Pen.
	Create a Read submenu with these options: Screen, Book, and Magazine. Create a Listen
	submenu with these options: Radio and Television.<BR>
	<B><BR>
	2.</B> Add menus to the <TT>Atm.vbp</TT> project that appears in VB's <TT>Samples\PGuide\Atm</TT>
	folder. On the opening form add a File | Exit option as well as a Language menu bar
	option with these pull-down checked choices: English, Italiano, Espanol, Francais,
	and Deutsch. Don't use special foreign characters unless you can access them easily
	from your keyboard and you are used to using them. When the user first starts the
	application, put the checkmark next to the English option but move the checkmark
	(or let the user select a different option) when the user selects an option or clicks
	the corresponding command button. Add one more menu to the Welcome form that includes
	a File | Exit option. Unlike the Welcome form's OK button, make sure the menu's File
	| Exit command on that form completely terminates the application.
	<P ALIGN="CENTER"><BR>
	<BR>
	<A HREF="ch16.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
	BORDER="0"></A><A HREF="../index.html"><IMG SRC="../buttons/blantoc.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="ch18.htm"><IMG SRC="../buttons/blannext.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="#heading1"><IMG SRC="../buttons/blantop.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A>
</DL>



</BODY>

</HTML>
