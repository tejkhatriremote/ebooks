<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">

	<TITLE>Without a title - Title</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><A HREF="ch06.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37"
HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A
HREF="../index.html"><IMG SRC="../buttons/blantoc.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
BORDER="0"></A><A HREF="ch08.htm"><IMG SRC="../buttons/blannext.gif" WIDTH="37" HEIGHT="37"
ALIGN="BOTTOM" BORDER="0"></A></H1>

<UL>
	<LI><A HREF="#Heading1">Hour 7</A>
	<UL>
		<LI><A HREF="#Heading2">Making Decisions</A>
		<UL>
			<LI><A HREF="#Heading3">Comparison Operators</A>
			<UL>
				<LI><A HREF="#Heading4">The Comparisons Nature</A>
				<LI><A HREF="#Heading5">Keep Each Sides Data Type Consistent</A>
			</UL>
			<LI><A HREF="#Heading6">The If Statement</A>
			<LI><A HREF="#Heading7">The If Statements Else Branch</A>
			<LI><A HREF="#Heading8">Listing 7.1. Checking an input boxs return value.</A>
			<LI><A HREF="#Heading9">Compound Comparisons with the Logical Operators</A>
			<LI><A HREF="#Heading10">Listing 7.2. Calculating sales figures for a companys divisions.</A>
			<LI><A HREF="#Heading11">Multiple Choice with Select Case</A>
			<LI><A HREF="#Heading12">Listing 7.3. Nested If-Else statements get complex quickly.</A>
			<LI><A HREF="#Heading13">Listing 7.4. Using Select Case to simplify complex nested
			If-Else statements.</A>
			<LI><A HREF="#Heading14">Two Additional Select Case Formats</A>
			<LI><A HREF="#Heading15">Listing 7.5. Using Select Case to simplify complex nested
			If-Else statements.</A>
			<LI><A HREF="#Heading16">Summary</A>
			<LI><A HREF="#Heading17">Q&amp;A</A>
			<LI><A HREF="#Heading18">Workshop</A>
			<UL>
				<LI><A HREF="#Heading19">Quiz</A>
				<LI><A HREF="#Heading20">Exercises</A>
			</UL>
		</UL>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H2 ALIGN="CENTER"><A NAME="Heading1"></A><FONT COLOR="#000077">Hour 7</FONT></H2>
<H2 ALIGN="CENTER"><A NAME="Heading2"></A><FONT COLOR="#000077">Making Decisions</FONT></H2>
<P>You learned VB's mathematical operators in Hour 5, &quot;Putting Code into Visual
Basic&quot;; but Visual Basic supports several more operators, as you'll learn in
this lesson. The operators described here are called the comparison operators because
they compare data and determine the results of the comparison. By using comparison
operators, you can write your programs so that they make certain runtime decisions
based on the comparison results.</P>
<P>The highlights of this hour include

<UL>
	<LI>Which comparison operators to use
	<P>
	<LI>How to form <TT>If</TT> statements
	<P>
	<LI>When to use an <TT>Else</TT> branch
	<P>
	<LI>How <TT>Select Case</TT> statements streamline <TT>If-Else</TT>
</UL>

<H3 ALIGN="CENTER"><A NAME="Heading3"></A><FONT COLOR="#000077">Comparison Operators</FONT></H3>
<P>All the comparison operators produce true or false results. In other words, the
comparison is either true or the comparison is false. The mathematical operators
produce numeric values, whereas the comparison operators produce true or false values.
A comparison operator can produce nothing more than a true or false result. The rest
of the program can use the true or false comparison operator result to make decisions.
For example, if a comparison operator returns <TT>False</TT> when comparing whether
an employee worked the last pay period, the rest of the program knows not to print
a paycheck for that employee.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>Comparison operators are
operators that compare data values against each other and produce true or false results.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>This section
	describes just the operators; subsequent sections in this hour's lesson describe
	new programming statements that can make use of the comparison operators. 
<HR>


</BLOCKQUOTE>

<P>Table 7.1 describes VB's six comparison operators. The comparison operators always
compare data, and that comparison is either true or false because data either compares
as expected or does not.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>Two values can
	be equal to one another or one can be greater than the other. Keep these possibilities
	in mind as you read through Table 7.1. 
<HR>


</BLOCKQUOTE>

<CENTER>
<P><B>Table 7.1. The comparison operators determine how data compares. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Operator</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Usage</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&gt;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>lblSales.Caption &gt; Goal</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The greater than operator returns <TT>True</TT> if the value on the left side of
			<TT>&gt;</TT> is numerically or alphabetically greater than the value on the right.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&lt;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Pay &lt; 2000.00</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The less than operator returns <TT>True</TT> if the value on the left side of <TT>&lt;</TT>
			is numerically or alphabetically less than the value on the right.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>=</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Age = Limit</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The equal to operator (sometimes called the equal operator) returns <TT>True</TT>
			if the values on both sides of <TT>=</TT> are equal to each other.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&gt;=</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>FirstName &gt;= &quot;Mike&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The greater than or equal to operator returns <TT>True</TT> if the value on the left
			side of <TT>&gt;=</TT> is numerically or alphabetically greater than or equal to
			the value on the right.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&lt;=</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Num &lt;= lblAmt.Caption</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The less than or equal to operator returns <TT>True</TT> if the value on the left
			side of <TT>&lt;=</TT> is numerically or alphabetically less than or equal to the
			value on the right.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&lt;&gt;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>txtAns.Text &lt;&gt; &quot;Yes&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">The not equal to operator returns <TT>True</TT> if the value on the left side of
			<TT>&lt;&gt;</TT> is numerically or alphabetically unequal to the value on the right.</TD>
	</TR>
</TABLE>

</CENTER>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Remember that
	if a comparison operator does not produce a true result, the result must be false.
	
<HR>


</BLOCKQUOTE>

<P>As you can see from Table 7.1, the comparison operators compare either variables,
literals, control values, or combinations of all those data sources. The comparison
operators work on both numeric and alphabetic values. You can compare any kind of
number against another number, or any kind of string against another string.
<CENTER>
<H4><A NAME="Heading4"></A><FONT COLOR="#000077">The Comparisons Nature</FONT></H4>
</CENTER>
<P>When you compare strings, Visual Basic uses the ASCII table, included in Appendix
B, &quot;ASCII Table,&quot; to determine how to compare the characters. For example,
the ASCII table says that the uppercase letter A--whose ASCII numeric value is 65--is
less than the uppercase letter B--whose ASCII numeric value is 66. Notice that all
uppercase letters are less than lowercase letters. Therefore, the abbreviation ST
is less than St.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>An ASCII table contains a
list of characters with corresponding unique numeric representations.</P>
<P>To understand how comparison operators work, you must understand how to use their
true or false results. The <TT>If</TT> statement, introduced in the next section,
explains how you can use true and false results to make decisions in your program.
Before you read the next section, make sure that you understand how these operators
compare values. Make sure that you understand the Result column of Table 7.2 before
you go any further.</P>
<CENTER>
<P><B>Table 7.2. Relationship results. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Relation</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Result</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>4 &gt; 2</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>4 &lt; 1</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>False</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>4 &lt; 8</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;Apple&quot; &lt;= &quot;Orange&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;Macmillan&quot; &lt; &quot;Mc millan&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>0 &gt;= 0</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>0 &lt;= 0</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>1 &lt;&gt; 2</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>True</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>2 &gt;= 3</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>False</TT></TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>
<CENTER>
<H4><A NAME="Heading5"></A><FONT COLOR="#000077">Keep Each Sides Data Type Consistent</FONT></H4>
</CENTER>
<P>Take extra care that the expressions on both sides of a comparison operator conform
to the same data type or at least compatible data types. In other words, you cannot
compare a string to a numeric data type. If you try, you will get a type mismatch
error because the data types don't match. You can compare any numeric data type against
any other numeric data type most of the time. In other words, you can test whether
a single-precision value is less than or greater than an integer value.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="WARNING:"></A><FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>Be careful
	when you compare non-integers for equality. Precision numbers are difficult to represent
	internally. For example, if you assigned <TT>8.3221</TT> to a single-precision variable
	and assigned <TT>8.3221</TT> to another single-precision variable, Visual Basic might
	return a false result if you compare the values for equality. Internally, one of
	the variables might actually hold <TT>8.322100001</TT> because of rounding errors
	that occur in insignificant decimal places. You can safely compare two currency values
	for equality, however, because Visual Basic maintains and compares their accuracy
	to two decimal places. 
<HR>
<BR>
	
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>The comparison
	operators are sometimes called the conditional operators because they test conditions
	that are either true or false. 
<HR>


</BLOCKQUOTE>

<P>The comparison operators compare values against one another. You can compare for
equality, inequality, and size differences. The comparison operators work for both
string data and numeric data. By themselves, the comparison operators would not be
worth much. However, you can use them to compare data by using the <TT>If</TT> statement,
which you'll learn about in the next section.
<CENTER>
<H3><A NAME="Heading6"></A><FONT COLOR="#000077">The If Statement</FONT></H3>
</CENTER>
<P>Perhaps the most important statement in a program is the <TT>If</TT> statement
and its cousin statements. With logic that <TT>If</TT> provides, your application
can begin to analyze data and make decisions based on that analysis. For example,
your program can display a three-button message box and determine, with the <TT>If</TT>
statement, which command button the user clicked to close the message box.</P>
<P><TT>If</TT> uses the comparison operators you learned earlier in this lesson to
test data values. <TT>If</TT> performs one of two possible code actions, depending
on the result of the comparison. Visual Basic can test whether to execute complete
blocks of code. In other words, <TT>If</TT> uses comparison operator results to test
data. <TT>If</TT> might execute one or more lines of subsequent code, depending on
the results of the comparison's test.</P>
<P>Before <TT>If</TT>, the code you wrote executed sequentially, one statement after
another. <TT>If</TT> lets your program be more decisive and execute only parts of
the program if the data warrants partial execution. For example, suppose you were
writing an invoicing system. In such a system, no sales tax should be computed for
tax-exempt organizations, so your program would skip over the tax computation code
when processing such organizations.</P>
<P><TT>If</TT> makes decisions. If a comparison test is true, the body of the <TT>If</TT>
statement executes. (In fact, the previous sentence is almost identical to Visual
Basic's <TT>If</TT> statement!) Here is one format of <TT>If</TT>:</P>
<PRE><FONT COLOR="#0066FF">If comparisonTest Then
  One or more Visual Basic statements
End If
</FONT></PRE>
<P><TT>End If</TT> lets Visual Basic know where the body of the <TT>If</TT> statement
ends. Suppose that the user enters a sales figure into a Text Box control named <TT>txtSales</TT>.
The following <TT>If</TT> computes a bonus amount based on the sales:</P>
<PRE><FONT COLOR="#0066FF">If (txtSales.Text &gt; 5000.00) Then
  sngBonus = txtSales.Text * .12
End If
</FONT></PRE>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Data enters
	a control such as a text box as a <TT>Variant</TT> data type. When you perform arithmetic
	with a <TT>Variant</TT> and the <TT>Variant</TT> data type holds a numeric value,
	Visual Basic converts the <TT>Variant</TT> to a number for the calculation. 
<HR>


</BLOCKQUOTE>

<P>Remember that Visual Basic stores <TT>0</TT> in all numeric variables that you
don't first initialize. Therefore, <TT>sngBonus</TT> has a <TT>0</TT> before the
<TT>If</TT> executes. Once the <TT>If</TT> executes, the code changes the <TT>sngBonus</TT>
variable only if the value of the <TT>txtSales.Text</TT> property is more than <TT>5000.00</TT>.
In a way, the <TT>If</TT> reads like this:


<BLOCKQUOTE>
	<P>If the sales are more than $5,000.00, then compute a bonus based on that sales
	value.

</BLOCKQUOTE>

<P>Visual Basic stores a null zero in string variables that you have not yet initialized.
If you use an uninitialized <TT>Variant</TT> data type variable, the variable holds
a null value that becomes zero if you assign the variable to a numeric variable.</P>
<P>The body of an <TT>If</TT> can have more than one statement. The body is often
called a block. The following <TT>If</TT> calculates a bonus, the cost of sales,
and a reorder amount based on the value of the <TT>txtSales</TT> text box entry:</P>
<PRE><FONT COLOR="#0066FF">If (txtSales.Text &gt; 5000.00) Then
   sngBonus = txtSales.Text * .12
   curCostOfSales = txtSales.Text * .41
   curReorderCost = txtSales.Text * .24
End If
</FONT></PRE>
<P>The three statements that make up the body of the <TT>If</TT> execute only if
the condition <TT>txtSales.Text &gt; 5000.00</TT> is true. Suppose that this code
contains another assignment statement immediately after <TT>End If</TT>. That assignment
statement is outside the body of the <TT>If</TT>, so the true or false result of
the condition affects only the body of the <TT>If</TT>. Therefore, the tax computation
in the following routine executes regardless of whether the sales are more than or
less than $5,000.00:</P>
<PRE><FONT COLOR="#0066FF">If (txtSales.Text &gt; 5000.00) Then
   sngBonus = txtSales.Text * .12
   curCostOfSales = txtSales.Text * .41
   curReorderCost = txtSales.Text * .24
End If
sngTax = .12 * txtSales.Text
</FONT></PRE>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>The parentheses
	are not required around the comparison test in an <TT>If</TT>, but they help separate
	the test from the rest of the code. In addition, the indentation helps illustrate
	the code that appears inside the <TT>If</TT> statement's body. 
<HR>


</BLOCKQUOTE>

<P>Can you see how the program makes decisions using <TT>If</TT>? The body of the
<TT>If</TT> executes only if the comparison test is true. Otherwise, the rest of
the program continues as usual.</P>
<P>There is a shortcut form of <TT>If</TT> that you might run across. The single-line
<TT>If</TT> statement has a format that looks like this:</P>
<PRE><FONT COLOR="#0066FF">If comparisonTest Then VBStatement
</FONT></PRE>
<P>The single-line <TT>If</TT> does not require an <TT>End If</TT> statement because
the comparison test and the body of the <TT>If</TT> reside on the same line. Single-line
<TT>If</TT> statements do not provide for easy program maintenance. If you decide
that you want to add to the body of the <TT>If</TT>, you must convert the single-line
<TT>If</TT> to a multiple-line <TT>If</TT>, and you might forget to then add <TT>End
If</TT>. Therefore, even if the body of an <TT>If</TT> statement takes only one line,
code the <TT>If</TT> as a multiple-line <TT>If-End If</TT> statement to make the
program more maintainable.
<CENTER>
<H3><A NAME="Heading7"></A><FONT COLOR="#000077">The If Statements Else Branch</FONT></H3>
</CENTER>
<P>Whereas <TT>If</TT> executes code based on the comparison test's true condition,
the <TT>Else</TT> statement executes code based on the comparison test's false condition.
<TT>Else</TT> is an optional part of the <TT>If</TT> statement. <TT>Else</TT> specifies
the code that executes if the comparison test is false. Here is the complete format
of the <TT>If</TT> statement with <TT>Else</TT>:</P>
<PRE><FONT COLOR="#0066FF">If comparisonTest Then
   One or more Visual Basic statements
Else
   One or more Visual Basic statements
End If
</FONT></PRE>
<P>Typically, programmers call this full-blown <TT>If</TT> statement the <TT>If-Else</TT>
statement. The <TT>If-Else</TT> statement is sometimes called a mutually exclusive
statement. The term mutually exclusive simply means that one set of code or the other
executes, but not both. The <TT>If-Else</TT> statement contains two sets of code--that
is, two bodies of one or more Visual Basic statements--and only one set executes,
depending on the result of the <TT>If</TT>. An <TT>If</TT> statement is either true
or false because the <TT>If</TT>'s comparison produces either a true or false result.
Therefore, either the first or the second body of code in an <TT>If-Else</TT> executes.</P>
<P>Suppose that a salesperson receives a bonus if sales are high (over $5,000.00)
or suffers a pay cut if sales are low (below $5,000.00). The <TT>If-Else</TT> shown
next contains the code necessary to reward or punish the salesperson. The code body
of the <TT>If</TT> computes the bonus as done in the previous section. The code body
of the <TT>Else</TT> subtracts $25 from the salesperson's pay, which is stored in
the variable named <TT>curPayAmt</TT>, if the sales quota is not met. The following
code computes such a payment amount based on the quota:</P>
<PRE><FONT COLOR="#0066FF">If (txtSales.Text &gt; 5000.00) Then
   sngBonus = .05 * txtSales.Text
Else
   curPayAmt = curPayAmt - 25.00
End If
curTaxes = curPayAmt * .42
</FONT></PRE>
<P>The fourth line in these code lines may surprise you at first. The assignment
appears to make the statement that the pay is equal to the pay minus 25. You know
that nothing can be equal to itself minus 25. In math, the equal sign acts as a balance
for the two sides of the equation. In Visual Basic, however, when the equal sign
is not used inside an <TT>If</TT>'s comparison test, it is an assignment that takes
everything to the right of the equal sign and stores that value in the variable to
the left of the equal sign. Therefore, the fourth line subtracts the 25 from the
value stored in <TT>curPayAmt</TT> and then assigns that result back to <TT>curPayAmt</TT>.
In effect, it lowers the value of <TT>curPayAmt</TT> by 25.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>When a variable
	appears on both sides of an assignment's equal sign, the variable is being updated
	in some way. 
<HR>


</BLOCKQUOTE>

<P>To further your understanding of the <TT>If-Else</TT> statement and to demonstrate
testing for an input box's return value, study how Listing 7.1 uses <TT>If-Else</TT>
to respond to an input box. The code asks the user for a company name and then accepts
the name or recognizes that the user clicked Cancel to get rid of the input box without
answering it. (When a user clicks Cancel in response to an input box, the input box
returns a null string, <TT>&quot;&quot;</TT>.)
<CENTER>
<H3><A NAME="Heading8"></A><FONT COLOR="#000077">Listing 7.1. Checking an input boxs
return value.</FONT></H3>
</CENTER>
<PRE><FONT COLOR="#0066FF">
Dim strCompName As String
Dim intPress As Integer   ` MsgBox return value
` Ask the user for a name
` Use XYZ, Inc. for the default name
strCompName = InputBox(&quot;What is the company name?&quot;, _
   &quot;Company Request&quot;, &quot;XYZ, Inc.&quot;)
` Check the return value
If (strCompName = &quot;&quot;) Then
   ` The user pressed Cancel
   intPress = MsgBox(&quot;Thanks anyway&quot;)
Else
   ` The user entered a company name
   intPress = MsgBox(&quot;You entered &quot; &amp; strCompName)
<TT>End If</TT></FONT></PRE>
<CENTER>
<H3><A NAME="Heading9"></A><FONT COLOR="#000077">Compound Comparisons with the Logical
Operators</FONT></H3>
</CENTER>
<P>Visual Basic supports three additional operators--<TT>And</TT>, <TT>Or</TT>, and
<TT>Not</TT>--that look more like commands than operators. <TT>And</TT>, <TT>Or</TT>,
and <TT>Not</TT> are called logical operators. Logical operators let you combine
two or more comparison tests into a single compound comparison.</P>
<P>Table 7.3 describes the logical operators, which work just like their spoken counterparts.</P>
<CENTER>
<P><B>Table 7.3. The logical operators. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><B><I>Operator</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Usage</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>And</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>If (A &gt; B) And (C &lt; D)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Produces <TT>True</TT> if both sides of the <TT>And</TT> are true. Therefore, A must
			be greater than B and C must be less than D. Otherwise, the expression produces a
			false result.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Or</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>If (A &gt; B) Or (C &lt; D)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Produces <TT>True</TT> if either side of the <TT>Or</TT> is true. Therefore, A must
			be greater than B or C must be less than D. If both sides of the <TT>Or</TT> are
			false, the entire expression produces a false result.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Not</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>If Not(strAns = &quot;Yes&quot;)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Produces the opposite true or false result. Therefore, if <TT>strAns</TT> holds <TT>&quot;Yes&quot;</TT>,
			the <TT>Not</TT> turns the true result to false.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>As you can see from Table 7.3, the <TT>And</TT> and <TT>Or</TT> logical operators
let you combine more than one comparison test in a single <TT>If</TT> statement.
The <TT>Not</TT> negates a comparison test. You can often turn a <TT>Not</TT> condition
around. <TT>Not</TT> can produce difficult comparison tests, and you should use it
cautiously. The last <TT>If</TT> in Table 7.3, for instance, could easily be changed
to <TT>If (strAns &lt;&gt; &quot;Yes&quot;)</TT> to eliminate the <TT>Not</TT>.</P>
<P>Your code often must perform an assignment, print a message, or display a label
if two or more conditions are true. The logical operators make the combined condition
easy to code. Suppose that you want to reward the salesperson if sales total more
than $5,000 and if the salesperson sells more than 10,000 units of a particular product.
Without <TT>And</TT>, you have to embed an <TT>If</TT> statement in the body of another
<TT>If</TT> statement like this:</P>
<PRE><FONT COLOR="#0066FF">If (sngSales &gt; 5000.00) Then
   If (intUnitsSold &gt; 10000) Then
      sngBonus = 50.00
   End I
End If
</FONT></PRE>
<P>Here is the same code rewritten as a single <TT>If</TT>. It is easier to read
and to change later if you need to update the program:</P>
<PRE><FONT COLOR="#0066FF">If (sngSales &gt; 5000.00) And (intUnitsSold &gt; 10000) Then
   sngBonus = 50.00
End If
</FONT></PRE>
<P>How can you rewrite this <TT>If</TT> to pay the bonus if the salesperson sells
either more than $5,000 in sales or if the salesperson sells more than 10,000 units?
Here is the code:</P>
<PRE><FONT COLOR="#0066FF">If (sngSales &gt; 5000.00) Or (intUnitsSold &gt; 10000) Then
   sngBonus = 50.00
End If
</FONT></PRE>
<P>Listing 7.2 contains an <TT>If-Else</TT> that tests data from two divisions of
a company and calculates values from the data.
<CENTER>
<H3><A NAME="Heading10"></A><FONT COLOR="#000077">Listing 7.2. Calculating sales
figures for a companys divisions.</FONT></H3>
</CENTER>
<PRE><FONT COLOR="#0066FF">
If (intDivNum = 3) Or (intDivNum = 4) Then
   curDivTotal = curDivSales3 + curDivSales4
   curGrandDivCosts = (curDivCost3 * 1.2) + (curDivCost4 * 1.4)
Else
   curDivTotal = curDivSales1 + curDivSales2
   curGrandDivCosts = (curDivCost1 * 1.1) + (curDivCost5 * 1.9)
<TT>End If</TT> </FONT></PRE>
<P><BR>
If <TT>intDivNum</TT> contains either a <TT>3</TT> or a <TT>4</TT>, the user is requesting
figures for the East Coast, and the code in the first <TT>If</TT> branch executes
to produce an East Coast pair of values. If <TT>intDivNum</TT> does not contain a
<TT>3</TT> or a <TT>4</TT>, the program assumes that <TT>intDivNum</TT> contains
a <TT>1</TT> or a <TT>2</TT>, and the West Coast pair of values is calculated in
the <TT>Else</TT> portion.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>Notice how easy
	it is to spot the variable's data type in code that names variables with a data type
	prefix such as <TT>cur</TT> (for currency) and <TT>sng</TT> (for single-precision).
	Use data type prefixes in all your variable names. Although you must type a little
	extra, your program code will be much clearer. 
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading11"></A><FONT COLOR="#000077">Multiple Choice with Select Case</FONT></H3>
</CENTER>
<P><TT>If</TT> is great for data comparisons in cases where one or two comparison
tests must be made. When you must test against more than two conditions, however,
<TT>If</TT> becomes difficult to maintain. The logical operators help in only certain
kinds of conditions. At other times, you must nest several <TT>If-Else</TT> statements
inside one other.</P>
<P>Consider the <TT>If</TT> statement shown in Listing 7.3. Although the logic of
the <TT>If</TT> statement is simple, the coding is extremely difficult to follow.
<CENTER>
<H3><A NAME="Heading12"></A><FONT COLOR="#000077">Listing 7.3. Nested If-Else statements
get complex quickly.</FONT></H3>
</CENTER>
<PRE><FONT COLOR="#0066FF">
If (intAge = 5) Then
   lblTitle.Caption = &quot;Kindergarten&quot;
Else
   If (intAge = 6) Then
      lblTitle.Caption = &quot;1st Grade&quot;
   Else
      If (intAge = 7) Then
         lblTitle.Caption = &quot;2nd Grade&quot;
      Else
         If (intAge = 8) Then
            lblTitle.Caption = &quot;3rd Grade&quot;
         Else
            If (intAge = 9) Then
               lblTitle.Caption = &quot;4th Grade&quot;
            Else
               If (intAge = 10) Then
                  lblTitle.Caption = &quot;5th Grade&quot;
               Else
                  If (intAge = 11) Then
                     lblTitle.Caption = &quot;6th Grade&quot;
                  Else
                     lblTitle.Caption = &quot;Advanced&quot;
                  End If
               End If
            End If
         End If
      End If
   End If
<TT>End If</TT> </FONT></PRE>
<P><BR>
Visual Basic supports a statement, called <TT>Select Case</TT>, that handles such
multiple-choice conditions better than <TT>If-Else</TT>. Here is the format of the
<TT>Select Case</TT> statement:</P>
<PRE><FONT COLOR="#0066FF">Select Case Expression
   Case value
      One or more Visual Basic statements
   Case value
      One or more Visual Basic statements
   [Case value
      One or more Visual Basic statements]
   [Case Else
      One or more Visual Basic statements]
End Select
</FONT></PRE>
<P><TT>Select Case</TT> is a good substitute for long, nested <TT>If-Else</TT> conditions
when several choices are possible. You set up your Visual Basic program to execute
one set of Visual Basic statements from a list of statements inside <TT>Select Case</TT>.</P>
<P>The format of <TT>Select Case</TT> makes the statement look as difficult as a
complex nested <TT>If-Else</TT>, but you will soon see that <TT>Select Case</TT>
statements are actually easier to code and to maintain than their <TT>If-Else</TT>
counterparts.</P>
<P>Expression can be any Visual Basic expression--such as a calculation, a string
value, or a numeric value--provided that it results in an integer or a string value.
Each value must be an integer or a string value that matches Expression's data type.</P>
<P>The <TT>Select Case</TT> statement is useful when you must make several choices
based on data values. <TT>Select Case</TT> can have two or more <TT>Case </TT>value
sections. The code that executes depends on which value matches Expression. If none
of the values matches Expression, the <TT>Case Else</TT> body of code executes if
you code the <TT>Case Else</TT>. Otherwise, nothing happens and control continues
with the statement that follows <TT>End Select</TT>.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="WARNING:"></A><FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>Don't
	use <TT>Select Case</TT> when a simple <TT>If</TT> or <TT>If-Else</TT> will suffice.
	Test logic is often so straightforward that a <TT>Select Case</TT> would be overkill
	and even less clear than an <TT>If</TT>. Unless you need to compare against more
	than a couple values, stick with the <TT>If</TT> and <TT>If-Else</TT> statements
	because of their simplicity. 
<HR>


</BLOCKQUOTE>

<P>The fastest way to learn <TT>Select Case</TT> is to see an example of it. Listing
7.4 contains a <TT>Select Case</TT> version of the child grade assignments shown
in Listing 7.3. <TT>Select Case</TT> organizes the multiple-choice selections into
a more manageable format.
<CENTER>
<H3><A NAME="Heading13"></A><FONT COLOR="#000077">Listing 7.4. Using Select Case
to simplify complex nested If-Else statements.</FONT></H3>
</CENTER>
<PRE><FONT COLOR="#0066FF">
Select Case intAge
   Case 5:  lblTitle.Caption = &quot;Kindergarten&quot;
   Case 6:  lblTitle.Caption = &quot;1st Grade&quot;
   Case 7:  lblTitle.Caption = &quot;2nd Grade&quot;
   Case 8:  lblTitle.Caption = &quot;3rd Grade&quot;
   Case 9:  lblTitle.Caption = &quot;4th Grade&quot;
   Case 10: lblTitle.Caption = &quot;5th Grade&quot;
   Case 11: lblTitle.Caption = &quot;6th Grade&quot;
   Case Else:  lblTitle.Caption = &quot;Advanced&quot;
<TT>End Select</TT></FONT></PRE>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>Use <TT>Select
	Case</TT> instead of embedded <TT>If-Else</TT> because, as you can see, <TT>Select
	Case</TT> keeps the code much simpler and easier to maintain. 
<HR>


</BLOCKQUOTE>

<P>Here's how the <TT>Select Case</TT> works: If the <TT>intAge</TT> variable holds
the value <TT>5</TT>, the label is assigned <TT>&quot;Kindergarten&quot;</TT> in
the second line. If the <TT>intAge</TT> variable holds the value <TT>6</TT>, the
label is assigned <TT>&quot;1st Grade&quot;</TT> in the third line. The logic continues
through the <TT>Case 11:</TT> statement. If <TT>intAge</TT> holds a value that does
not fall within the range of <TT>5</TT> through <TT>11</TT>, the final <TT>Case Else</TT>
assigns <TT>&quot;Advanced&quot;</TT> to the label.</P>
<P>The body of each <TT>Case</TT> can consist of more than one statement, just as
the body of an <TT>If</TT> or <TT>If-Else</TT> can consist of more than one statement.
Visual Basic executes all the statements for any given <TT>Case</TT> match until
the next <TT>Case</TT> is reached. Once Visual Basic executes a matching <TT>Case</TT>
value, it skips the remaining <TT>Case</TT> statements and continues with the code
that follows the <TT>End Select</TT> statement.</P>
<P>Notice the colons after each <TT>Case </TT>value statement in Listing 7.4. The
colons are optional, but they do help separate the case being tested from its code
that executes.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Programmers
	often trigger the execution of complete procedures, such as event procedures, from
	within a <TT>Case</TT> statement. As you will learn in Hour 13, &quot;Modular Programming,&quot;
	instead of putting several statements in the body of an <TT>If-Else</TT> or a <TT>Case</TT>,
	you can execute a procedure that contains all the statements that execute when a
	given condition is true. 
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading14"></A><FONT COLOR="#000077">Two Additional Select Case Formats</FONT></H3>
</CENTER>
<P>The two additional formats differ only slightly from the standard <TT>Select Case</TT>
that you learned about in the previous section. They enable you to extend the power
of <TT>Select Case</TT> so that Visual Basic can make <TT>Case</TT> matches on both
comparison tests and on ranges of values. Here is the first additional format:</P>
<PRE><FONT COLOR="#0066FF">Select Case Expression
   Case Is Relation:
     One or more Visual Basic statements
   Case Is Relation:
     One or more Visual Basic statements
   [Case Is Relation:
     One or more Visual Basic statements]
   [Case Else:
     One or more Visual Basic statements]
End Select
</FONT></PRE>
<P>Relation can be whatever comparison test you want to perform against Expression
at the top of the <TT>Select Case</TT>. The standard <TT>Select Case</TT> statement,
discussed in the previous section, compared the <TT>Expression</TT> value against
an exact <TT>Case</TT> match. When you use the comparison <TT>Is</TT> <TT>Select
Case</TT> option, each <TT>Case</TT> can be matched on a comparison test.</P>
<P>Here is the format of the second extra <TT>Select Case</TT> format:</P>
<PRE><FONT COLOR="#0066FF">Select Case Expression
   Case expr1 To expr2:
      One or more Visual Basic statements
   Case expr1 To expr2:
      One or more Visual Basic statements
   [Case expr1 To expr2:
      One or more Visual Basic statements]
   [Case Else:
      One or more Visual Basic statements]
End Select
</FONT></PRE>
<P>The <TT>Case</TT> lines require a range, such as <TT>4 To 6</TT>. The <TT>To Select
Case</TT> option enables you to match against a range instead of a relation or an
exact match.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>You can combine
	the extended formats of <TT>Select Case</TT> with the standard <TT>Select Case</TT>
	so that two or more kinds of <TT>Case</TT> formats appear within the same <TT>Select
	Case</TT> statement. 
<HR>


</BLOCKQUOTE>

<P>Study Listing 7.5 to learn how to combine different <TT>Select Case</TT> statements
to test for various values.
<CENTER>
<H3><A NAME="Heading15"></A><FONT COLOR="#000077">Listing 7.5. Using Select Case
to simplify complex nested If-Else statements.</FONT></H3>
</CENTER>
<PRE><FONT COLOR="#0066FF">
Rem The following Select Case to End Select code
Rem   assigns a student's grade and school name
Rem   to the label on the form. The code checks
Rem   to make sure that the student is not too
Rem   young to be going to school.
Select Case intAge
   ` Check for too young...
   Case Is &lt;5:  lblTitle.Text = &quot;Too young&quot;

   ` Five-year olds are next assigned
   Case 5: lblTitle.Text = &quot;Kindergarten&quot;

   ` Six to eleven...
   Case 6 To 11:  lblTitle.Text = &quot;Elementary&quot;
                  lblSchool.Text = &quot;Lincoln&quot;

   ` Twelve to fifteen...
   Case 12 To 15: lblTitle.Text = &quot;Intermediate&quot;
                  lblSchool.Text = &quot;Washington&quot;

   ` Sixteen to eighteen
   Case 16 To 18: lblTitle.Text = &quot;High School&quot;
                  lblSchool.Text = &quot;Betsy Ross&quot;

   ` Everyone else must go to college
   Case Else: lblTitle.Text = &quot;College&quot;
              lblSchool.Text = &quot;University&quot;
<TT>End Select</TT> </FONT></PRE>
<P><BR>
If the age is less than 5, the title label becomes <TT>Too young</TT>, and the school
name remains blank. If the age is exactly 5 (<TT>intAge</TT> is obviously an integer
value), the title gets <TT>Kindergarten</TT>, and the school name still remains blank.
Only if the child is 5 or older do both the title and school name get initialized.</P>
<P>If you were to rewrite this code using embedded <TT>If-Else</TT> logic, the code
would become a nightmare. The <TT>Select Case</TT>'s range testing, such as <TT>Case
16 to 18</TT>, saves a tremendous amount of <TT>If-Else</TT> logic.
<CENTER>
<H3><A NAME="Heading16"></A><FONT COLOR="#000077">Summary</FONT></H3>
</CENTER>
<P>In this hour you have learned how to write Visual Basic programs that make decisions.
Once your programs are able to test data values against certain conditions, your
programs can begin to make execution decisions and perform smarter calculations.
Visual Basic offers several forms of the <TT>If</TT> and the <TT>Select Case</TT>
statements to make comparisons. The comparison operators, especially when combined
with the logical operators, produce advanced compound conditions.</P>
<P>The next hour explains how to write looping statements so that your programs can
repeat logic as often as needed.
<CENTER>
<H3><A NAME="Heading17"></A><FONT COLOR="#000077">Q&amp;A</FONT></H3>
</CENTER>

<DL>
	<DD><B>Q Which testing statement is better: If, If-Else, or Select Case?<BR>
	<BR>
	A</B> No testing statement is better than another in all situations. The <TT>If</TT>
	statement is the fundamental building block for testing data, and <TT>If</TT> is
	extremely common in most applications. When you need the application to execute one
	block of code or another, depending on the result of an <TT>If</TT> test, use <TT>If-Else</TT>.
	If you need to embed several <TT>If-Else</TT> statements together because you've
	got to test for multiple comparisons, the <TT>Select Case</TT> almost always makes
	a better comparison statement than <TT>If-Else</TT>. You would not, however, save
	effort or program clarity if you used <TT>Select Case</TT> when a simple <TT>If-Else</TT>
	would do. The bottom line is that your application determines the best statement
	to use at any one time.<BR>
	<BR>
	<B>Q Why is the Not operator considered so bad?<BR>
	<BR>
	A</B> <TT>Not</TT> is not considered bad, really, but the negative logic that <TT>Not</TT>
	produces often makes for confusing logic. Some logic is best performed with <TT>Not</TT>,
	but you can almost always turn the <TT>Not</TT> logic into positive and simpler logic
	by reversing the comparison being done.
</DL>

<CENTER>
<H3><A NAME="Heading18"></A><FONT COLOR="#000077">Workshop</FONT></H3>
</CENTER>
<P>The quiz questions and exercises are provided for your further understanding.
See Appendix C, &quot;Answers,&quot; for answers.
<CENTER>
<H4><A NAME="Heading19"></A><FONT COLOR="#000077">Quiz</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> How do comparison operators differ from mathematical operators?<BR>
	<BR>
	<B>2.</B> What role does the ASCII table play in comparison logic?<BR>
	<BR>
	<B>3.</B> Which of the following produce true and which produce false results?
	<DL>
		<DD><B><BR>
		a.</B> <TT>25 &lt;= 25</TT><BR>
		<BR>
		<B>b. </B><TT>&quot;a&quot; &gt;= &quot;B&quot;</TT><BR>
		<BR>
		<B>c. </B><TT>0 &lt; -1</TT><BR>
		<BR>
		<B>d.</B> <TT>234.32 &gt; 234.321</TT>
	</DL>
	<DD><BR>
	<B>4.</B> When do you code the <TT>Else</TT> portion of an <TT>If</TT> statement?<BR>
	<BR>
	<B>5.</B> True or false: The <TT>End If</TT> statement is not needed for one-line
	<TT>If</TT> statements.<BR>
	<BR>
	<B>6.</B> Which statement replaces nested <TT>If-Else</TT> logic?<BR>
	<BR>
	<B>7.</B> Which <TT>Case</TT> option checks for a range of values?<BR>
	<BR>
	<B>8. </B>What happens if every <TT>Case</TT> fails and there is no <TT>Case Else</TT>
	option?<BR>
	<BR>
	<B>9.</B> What role do code blocks play in <TT>Select Case</TT> statements?<BR>
	<BR>
	<B>10.</B> What is wrong with this <TT>If</TT> statement?
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">If (intA &lt; 1) And (intC &gt;= 8) Then
   lblDraft.Caption = &quot;Overdrawn&quot;
Else
   lblDraft.Caption = &quot;Underdrawn&quot;
End Else</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>
<CENTER>
<H4><A NAME="Heading20"></A><FONT COLOR="#000077">Exercises</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> Rewrite the following nested <TT>If</TT> statement using a single <TT>If</TT>
	with a logical operator:
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">If (A &gt; 3) Then
   If (B &gt; 10) Then
      lblAns.Caption = &quot;Yes&quot;
   End If
End If</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>

<DL>
	<DD><B>2.</B> Rewrite the following <TT>If</TT> to eliminate the <TT>Not</TT> and
	to clarify the code:
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">If Not(X &lt; 10) Or Not(Y &gt;= 20) Then
</FONT></PRE>
	<CENTER>
	<P><FONT COLOR="#0066FF"><BR>
	<A HREF="ch06.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
	BORDER="0"></A><A HREF="../index.html"><IMG SRC="../buttons/blantoc.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="ch08.htm"><IMG SRC="../buttons/blannext.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="#heading1"><IMG SRC="../buttons/blantop.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></FONT></A>
</CENTER>
	</BLOCKQUOTE>


</BODY>

</HTML>
