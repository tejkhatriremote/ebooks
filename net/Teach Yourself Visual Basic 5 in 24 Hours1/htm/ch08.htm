<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">

	<TITLE>Without a title - Title</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><A HREF="ch07.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37"
HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A
HREF="../index.html"><IMG SRC="../buttons/blantoc.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
BORDER="0"></A><A HREF="ch09.htm"><IMG SRC="../buttons/blannext.gif" WIDTH="37" HEIGHT="37"
ALIGN="BOTTOM" BORDER="0"></A></H1>

<UL>
	<LI><A HREF="#Heading1">Hour 8</A>
	<UL>
		<LI><A HREF="#Heading2">Visual Basic Looping</A>
		<UL>
			<LI><A HREF="#Heading3">The Do While Loops</A>
			<LI><A HREF="#Heading4">The Loops Termination</A>
			<LI><A HREF="#Heading5">Listing 8.1. The Do While loop executes as long as comparison
			test is true.</A>
			<UL>
				<LI><A HREF="#Heading6">Figure 8.1.</A>
			</UL>
			<LI><A HREF="#Heading7">The Do Until Loop</A>
			<LI><A HREF="#Heading8">Which Loop Is Best?</A>
			<LI><A HREF="#Heading9">Listing 8.2. The Do Until loops</A>
			<LI><A HREF="#Heading10">until comparison test becomes true.</A>
			<LI><A HREF="#Heading11">The Other Do Loops</A>
			<LI><A HREF="#Heading12">Listing 8.3. Using the Do-Loop While to</A>
			<LI><A HREF="#Heading13">check the comparison at the bottom of the loop.</A>
			<LI><A HREF="#Heading14">The For Loop</A>
			<LI><A HREF="#Heading15">Listing 8.4. Add the numbers from 1 to 10.</A>
			<LI><A HREF="#Heading16">Listing 8.5. Add the numbers from 1 to 100.</A>
			<LI><A HREF="#Heading17">Listing 8.6. Using a For loop to calculate</A>
			<LI><A HREF="#Heading18">compound interest.</A>
			<LI><A HREF="#Heading19">You Can Terminate Loops Early</A>
			<LI><A HREF="#Heading20">Summary</A>
			<LI><A HREF="#Heading21">Q&amp;A</A>
			<LI><A HREF="#Heading22">Workshop</A>
			<UL>
				<LI><A HREF="#Heading23">Quiz</A>
				<LI><A HREF="#Heading24">Exercises</A>
			</UL>
		</UL>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H2 ALIGN="CENTER"><A NAME="Heading1"></A><FONT COLOR="#000077">Hour 8</FONT></H2>
<H2 ALIGN="CENTER"><A NAME="Heading2"></A><FONT COLOR="#000077">Visual Basic Looping</FONT></H2>
<P>You've now mastered sequential logic and decision-making logic. This hour's lesson
explains how to write programs that contain looping logic. A loop is a set of program
instructions that execute repeatedly. Your programming preferences and application
dictate how many times the loop must repeat.</P>
<P>Loops play important roles in programs because you'll need to repeat sections
of a program to process multiple data values. For example, you may need to calculate
a total of past due charges for all past due customers. A loop can read each customer's
past-due charge and add that amount to the running total. As you learn more about
Visual Basic in subsequent lessons, you will see additional uses for loops.</P>
<P>The highlights of this hour include

<UL>
	<LI>What a loop is
	<P>
	<LI>How you code a <TT>Do</TT> loop
	<P>
	<LI>Why several <TT>Do</TT> loop formats exist
	<P>
	<LI>When to use <TT>For</TT>
	<P>
	<LI><BR>
	How the<TT>Exit</TT> statements interrupt execution
</UL>

<H3 ALIGN="CENTER"><A NAME="Heading3"></A><FONT COLOR="#000077">The Do While Loops</FONT></H3>
<P>Visual Basic supports several versions of the <TT>Do</TT> statement. The <TT>Do
While</TT> loop is perhaps the most common looping statement that you'll put in Visual
Basic programs. <TT>Do While</TT> works with comparison expressions just as the <TT>If</TT>
statement does. Therefore, the six comparison operators that you learned about in
the previous lesson work as expected here. Rather than control the one-time execution
of a single block of code, however, the comparison expression controls the looping
statements.</P>
<P>Like the <TT>If</TT> statement that ends with an <TT>End If</TT> statement, a
loop will always be a multiline statement that includes an obvious beginning and
ending of the loop. Here is the format of the <TT>Do While</TT> loop:</P>
<PRE><FONT COLOR="#0066FF">Do While (comparison test)
   Block of one or more Visual Basic statements
Loop
</FONT></PRE>
<P>The block of code continues looping as long as comparison test is true. Whether
you insert one or several lines of code for the block doesn't matter. It's vital,
however, that the block of code somehow change a variable used in comparison test.
The block of code keeps repeating as long as the <TT>Do While</TT> loop's comparison
test continues to stay true. Eventually, comparison test must become false or your
program will enter an infinite loop and the user will have to break the program's
execution through an inelegant means, such as pressing the Ctrl+Break key combination.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>An infinite loop is a loop
that never terminates.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="WARNING:37"></A><FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>Guard
	against infinite loops and always make sure your loops can terminate properly. Even
	if you provide an Exit command button or a File|Exit menu option in your application,
	the program will often ignore the user's exit command if the program enters an infinite
	loop. 
<HR>


</BLOCKQUOTE>

<P>The <TT>Do While</TT> loop continues executing a block of Visual Basic statements
as long as comparison test is true. As soon as comparison test becomes false, the
loop terminates.
<H3 ALIGN="CENTER"><A NAME="Heading4"></A><FONT COLOR="#000077">The Loops Termination</FONT></H3>
<P>As long as comparison test is true, the block of code in the body of the loop
continues executing. When comparison test becomes false, the loop terminates. After
the loop terminates, Visual Basic begins program execution at the statement following
the <TT>Loop</TT> statement because <TT>Loop</TT> signals the end of the loop. As
soon as <TT>Do While</TT>'s comparison test becomes false, the loop terminates and
doesn't execute even one more time. The <TT>Do While</TT>'s comparison test appears
at the top of the loop. Therefore, if comparison test is false the first time the
loop begins, the body of the loop will never execute.<BR>
<BR>
Listing 8.1 contains a section of an event procedure that contains a <TT>Do While</TT>
loop that asks the user for an age. If the user enters an age less than 10 or more
than 99, the program beeps at the error and displays another input box asking for
the age. The program continues looping, asking for the age, as long as the user enters
an age that's out of range.
<H3 ALIGN="CENTER"><A NAME="Heading5"></A><FONT COLOR="#000077">Listing 8.1. The
Do While loop executes as long as comparison test is true.</FONT></H3>
<PRE><FONT COLOR="#0066FF">
Dim strAge As String
Dim intAge As Integer
Dim intPress As Integer

` Get the age in a string variable
strAge = InputBox(&quot;How old are you?&quot;, &quot;Age Ask&quot;)
` Check for the Cancel command button
If (strAge = &quot;&quot;) Then
  End   ` Terminates the application
End If

` Cancel was not pressed, so convert Age to integer
` The Val() function converts strings to integers 
intAge = Val(strAge)

` Loop if the age is not in the correct range
Do While ((intAge &lt; 10) Or (intAge &gt; 99))
   ` The user's age is out of range
   intPress = MsgBox(&quot;Your age must be between &quot; &amp; _
       &quot;10 and 99&quot;, vbExclamation, &quot;Error!&quot;)
   strAge = InputBox(&quot;How old are you?&quot;, &quot;Age Ask&quot;)

   ` Check for the Cancel command button
   If (strAge = &quot;&quot;) Then
      End  ` Terminate the program
   End If
   intAge = Val(strAge
<TT>Loop</TT></FONT> </PRE>
<P><BR>
Figure 8.1 shows the message box error Listing 8.1 displays if the user enters an
age value that's less than 10 or more than 99. Listing 8.1 does nothing with <TT>MsgBox()</TT>'s
return value stored in <TT>intPress</TT>. The user simply presses Enter to close
the message box so a check for <TT>intPress</TT>'s value would not help this particular
section of code.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:47"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Listing 8.1
	uses the built-in <TT>Val()</TT> function. <TT>Val()</TT> accepts a string argument
	and converts that string to a number (assuming that the string holds the correct
	digits for a number). The <TT>InputBox()</TT> function returns a string so the value
	the user enters into the input box must convert to an integer before you store the
	value in the integer variable named <TT>intAge</TT>. 
<HR>


</BLOCKQUOTE>

<P><A NAME="Heading6"></A><A HREF="../art/ch08/08cce01.jpg"><FONT COLOR="#000077">Figure
8.1.</FONT></A><FONT COLOR="#000077"> </FONT><I>The user sees this message box as
long as the age is out of range. </I><BR>
<BR>
The code contains some redundancy. For example, two lines contain almost the same
<TT>InputBox()</TT> function, and the same check for a Cancel command button press
appears twice in the program. There are other looping statements that you'll learn
about later in this lesson; those statements can help simplify this code by removing
some of the redundancy.</P>
<P>Perhaps the most important thing to note about the <TT>Do While</TT> loop in Listing
8.1 is that the body of the loop provides a way for comparison test to terminate.
The code contains an <TT>intAge</TT> variable that the body of the loop reassigns
each time the loop's block of code executes. Therefore, assuming that the user enters
a different value for the age, the loop will test against a different set of comparison
values, the comparison test will fail (which would mean that the age is inside the
range), and the program will stop looping. If the loop body did nothing with the
comparison test variable, the loop would continue forever.
<H3 ALIGN="CENTER"><A NAME="Heading7"></A><FONT COLOR="#000077">The Do Until Loop</FONT></H3>
<P>Visual Basic supports several kinds of loops, and you can use the one that best
matches your application's requirements. Whereas the <TT>Do While</TT> loop continues
executing the body of the loop as long as the comparison test is true, the <TT>Do
Until</TT> loop executes the body of the loop as long as the comparison test is false.
The program's logic at the time of the loop determines which kind of loop works best
in a given situation.</P>
<P><TT>Do Until</TT> works almost exactly like the <TT>Do While</TT> loop except
that the <TT>Do Until</TT> loop continues executing the body of the loop until the
comparison test is true. Like the <TT>Do While</TT>, the <TT>Do Until</TT> is a multiline
looping statement that can execute a block of code that's one or more lines long.</P>
<P>Here is the format of the <TT>Do Until</TT>:</P>
<PRE><FONT COLOR="#0066FF">Do Until (comparison test)
   Block of one or more Visual Basic statements
Loop
</FONT></PRE>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>Remember that
	the comparison test must be false for the loop to continue. 
<HR>


</BLOCKQUOTE>

<P>You can use the <TT>Do While</TT> or the <TT>Do Until</TT> for almost any loop.
Listing 8.2 contains the age-checking event procedure that contains a <TT>Do Until</TT>
loop. The loop ensures that the age falls between two values. As you can see, comparison
test for the <TT>Do Until</TT> is the opposite of that used in Listing 8.1's <TT>Do
While</TT> loop.
<H3 ALIGN="CENTER"><A NAME="Heading8"></A><FONT COLOR="#000077">Which Loop Is Best?</FONT></H3>
<P>Use the loop that makes for the cleanest and clearest comparison test. Sometimes,
the logic makes the <TT>Do While</TT> clearer, whereas other loops seem to work better
when you set them up with <TT>Do Until</TT>. <TT>Do Until</TT> continues executing
a block of Visual Basic statements as long as comparison test is false. As soon as
comparison test becomes true (the loop is said to <TT>Do</TT> a loop until the condition
becomes false), the loop terminates and the program continues on the line that follows
the closing loop statement.
<H3 ALIGN="CENTER"><A NAME="Heading9"></A><FONT COLOR="#000077">Listing 8.2. The
Do Until loops until comparison test becomes true.</FONT></H3>
<PRE><FONT COLOR="#0066FF">
Dim strAge As String
Dim intAge As Integer
Dim intPress As Integer

` Get the age in a string variable
strAge = InputBox(&quot;How old are you?&quot;, &quot;Age Ask&quot;)

` Check for the Cancel command button
If (strAge = &quot;&quot;) Then
   End   ` Terminate the program
End If

` Cancel was not pressed, so convert Age to integer
intAge = Val(strAge)
` Loop if the age is not in the correct range
Do Until ((intAge &gt;= 10) And (intAge &lt;= 99))
   ` The user's age is out of range
   intPress = MsgBox(&quot;Your age must be &quot; &amp; _
      &quot;between 10 and 99&quot;, vbExclamation, &quot;Error!&quot;)
   strAge = InputBox(&quot;How old are you?&quot;, &quot;Age Ask&quot;)
   ` Check for the Cancel command button
   If (strAge = &quot;&quot;) Then
      End   ` Terminate the program
   End If
   intAge = Val(strAge)
<TT>Loop</TT> </FONT></PRE>
<P><BR>
The 16th line is the only line that marks the difference between Listing 8.1 and
Listing 8.2. The age must now fall within the valid range for the loop to terminate.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:47"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>There is really
	no technical advantage to using <TT>Do While</TT> or <TT>Do Until</TT>. Use whichever
	one seems to flow the best for any given application. 
<HR>


</BLOCKQUOTE>

<H3 ALIGN="CENTER"><A NAME="Heading11"></A><FONT COLOR="#000077">The Other Do Loops</FONT></H3>
<P>Another pair of <TT>Do</TT> loops works almost exactly like the two previous loops.
<TT>Do-Loop While</TT> and <TT>Do-Loop Until</TT> look very much like their counterparts
that you learned earlier. But these new loop formats check their comparison tests
at the bottom of the loop rather than at the top.</P>
<P>If a loop begins with a single <TT>Do</TT> statement, the loop ends with either
<TT>Loop While</TT> or <TT>Loop Until</TT>. Here is the format of <TT>Do-Loop While</TT>:</P>
<PRE><FONT COLOR="#0066FF">Do
   Block of one or more Visual Basic statements
Loop Until (comparison test)
</FONT></PRE>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>The hyphen in
	<TT>Do-Loop While</TT> serves to remind you that the body of the loop comes before
	the <TT>Loop While</TT> statement. The hyphen in the <TT>Do-Loop Until</TT> performs
	the same purpose. Some books use ellipses in place of the hyphen, so you may see
	the statement written as <TT>Do...Loop Until</TT>. 
<HR>


</BLOCKQUOTE>

<P>That <TT>Do</TT> looks lonely by itself, doesn't it? The purpose of the <TT>Do</TT>
is to signal the beginning of the loop. The loop continues until the <TT>Loop Until</TT>
statement. The comparison test appears at the bottom of the loop if you use the <TT>Do-Loop
While</TT> loop statement. The body of the loop always executes at least once. The
body of the loop executes more than once as long as the comparison test stays true.
There is a corresponding <TT>Do-Loop Until</TT> statement that checks for a false
condition at the bottom of the loop's body.</P>
<P>Notice that the <TT>Do-Loop While</TT> loop's comparison test appears at the bottom
of the loop instead of at the top of the loop. You'll use the <TT>Do-Loop While</TT>
loop when you want the body of the loop to execute at least one time. Often, by placing
comparison test at the bottom of the loop, you can eliminate redundant code that
otherwise might be required if you used <TT>Do While</TT>.</P>
<P>To complete the loop statements, Visual Basic also supports a <TT>Do-Loop Until</TT>
statement. Like the <TT>Do-Loop While</TT>, the <TT>Do-Loop Until</TT> statement
tests comparison test at the bottom of the loop. Therefore, the body of the loop
executes at least once no matter what comparison test turns out to be. The loop continues
as long as the comparison test result stays false.</P>
<P>Listing 8.3 contains the age-checking event procedure that's much shorter than
the previous versions. comparison test appears at the bottom of the loop, so the
extra <TT>InputBox()</TT> function call is not needed.
<H3 ALIGN="CENTER"><A NAME="Heading12"></A><FONT COLOR="#000077">Listing 8.3. Using
the Do-Loop While to check the comparison at the bottom of the loop.</FONT></H3>
<PRE><FONT COLOR="#0066FF">
Dim strAge As String
Dim intAge As Integer
Dim intPress As Integer

Do
   strAge = InputBox(&quot;How old are you?&quot;, &quot;Age Ask&quot;)
   ` Check for the Cancel command button
   If (strAge = &quot;&quot;) Then
      End   ` Terminate program
   End If
   intAge = Val(strAge)

   If ((intAge &lt; 10) Or (intAge &gt; 99)) Then
      ` The user's age is out of range
      intPress = MsgBox(&quot;Your age must be between &quot; &amp; _
          &quot;10 and 99&quot;, vbExclamation, &quot;Error!&quot;)
   End If
<TT>Loop While ((intAge &lt; 10) Or (intAge &gt; 99))</TT> </FONT></PRE>
<P><BR>
The loop begins almost immediately. The loop's body will always execute at least
once, so <TT>InputBox()</TT> appears right inside the loop. By placing the <TT>InputBox()</TT>
function inside the loop, you eliminate the need to put this function in the code
twice (once before the loop and once inside the loop, as was necessary using the
previous looping statements in Listings 8.1 and 8.2).


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:35"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>In this simple
	application of the looping statements that you've seen here, the <TT>Do-Loop While</TT>
	loop required less code than the <TT>Do While</TT> and <TT>Do Until</TT> loops. By
	changing the <TT>Do-Loop While</TT>'s comparison test, a <TT>Do Until</TT> would
	also work. These last two loops will not, in every case, produce less code as they
	do here. The logic of the application determines which loop works best. 
<HR>


</BLOCKQUOTE>

<H3 ALIGN="CENTER"><A NAME="Heading14"></A><FONT COLOR="#000077">The For Loop</FONT></H3>
<P>The <TT>For</TT> loop (sometimes called the <TT>For-Next</TT> loop) also creates
a loop. Unlike the <TT>Do</TT> loops, however, the <TT>For</TT> loop repeats for
a specified number of times. The format of the <TT>For</TT> loop looks a little more
daunting than that of the <TT>Do</TT> loops, but after you master the format, you'll
have little trouble implementing <TT>For</TT> loops when your code needs to repeat
a section of code for a specified number of times.</P>
<P>There isn't one correct loop to use in all situations. The <TT>For</TT> statement
provides the mechanism for the fifth Visual Basic loop block that you'll learn. A
<TT>For</TT> loop always begins with the <TT>For</TT> statement and ends with the
<TT>Next</TT> statement. Here is the format of the <TT>For</TT> loop:</P>
<PRE><FONT COLOR="#0066FF">For CounterVar = StartVal To EndVal [Step IncrementVal]
   Block of one or more
   Visual Basic statements
Next CounterVar
</FONT></PRE>
<P>A simple example will help demonstrate how the <TT>For</TT> loop works. The loop
in Listing 8.4 computes the total of the numbers from 1 to 10.
<H3 ALIGN="CENTER"><A NAME="Heading15"></A><FONT COLOR="#000077">Listing 8.4. Add
the numbers from 1 to 10.</FONT></H3>
<PRE><FONT COLOR="#0066FF">
intSum = 0
For intNumber = 1 To 10
   intSum = intSum + intNumber
</FONT></PRE>
<P><TT>Next intNumber</TT> <TT>intNumber</TT> is the CounterVar in the <TT>For</TT>'s
format. The CounterVar must be a variable and not a control or a literal. <TT>1</TT>
is the <TT>For</TT> loop's StartVal. The StartVal can be either a number, an expression,
or a variable. <TT>10</TT> is the EndVal. EndVal can be either a number, an expression,
or a variable. There is no <TT>Step</TT> specified here. In the <TT>For</TT> statement's
format, the <TT>Step </TT>IncrementVal is optional (as you can tell from the format's
square brackets). If you don't specify a <TT>Step</TT> value, Visual Basic assumes
a <TT>Step</TT> value of <TT>1</TT>. Therefore, both of the following <TT>For</TT>
statements do exactly the same thing:</P>
<PRE><FONT COLOR="#0066FF">For intNumber = 1 To 10

For intNumber = 1 To 10 Step 1
</FONT></PRE>
<P>Listing 8.4's summing <TT>For</TT> loop initially assigns to the CounterVar the
StartVal in the second line. Therefore, <TT>intNumber</TT> is assigned <TT>1</TT>
at the top of the loop. Visual Basic then executes the body of the loop using the
value <TT>1</TT> for <TT>intNumber</TT>. With <TT>intNumber</TT> being equal to <TT>1</TT>,
the third line works as follows the first time through the loop:</P>
<PRE><FONT COLOR="#0066FF">intSum = intSum + 1
</FONT></PRE>
<P>When Visual Basic executes the <TT>Next intNumber</TT> statement, Visual Basic
returns to the top of the loop (the <TT>For</TT> statement), adds the <TT>Step</TT>
value <TT>1</TT> to <TT>intNumber</TT>, and continues the loop again using <TT>2</TT>
as <TT>intNumber</TT> in the loop's body. Therefore, the second time through the
loop, the third line becomes this:</P>
<PRE><FONT COLOR="#0066FF">intSum = intSum + 2
</FONT></PRE>
<P>The loop continues, adding the default <TT>Step</TT> value <TT>1</TT> to <TT>intNumber</TT>
each time the loop executes. When <TT>intNumber</TT> becomes <TT>10</TT> (the format's
EndVal), the loop finishes and the statement following the <TT>Next</TT> statement
continues.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>Remember, the
	<TT>For</TT> loop terminates when the CounterVar becomes larger than the EndVal.
	There's an exception to this: If you code a negative <TT>Step</TT> value, the loop
	terminates when the CounterVar becomes smaller than the EndVal, as you'll see a little
	later in this section. 
<HR>


</BLOCKQUOTE>

<P>You don't need a <TT>For</TT> statement to sum the values 1 through 10. You could
code one long assignment statement like this:</P>
<PRE><FONT COLOR="#0066FF">intSum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10
</FONT></PRE>
<P>You could also code back-to-back assignment statements like this:</P>
<PRE><FONT COLOR="#0066FF">IntSum = IntSum + 1
IntSum = IntSum + 2
IntSum = IntSum + 3
IntSum = IntSum + 4
IntSum = IntSum + 5
IntSum = IntSum + 6
IntSum = IntSum + 7
IntSum = IntSum + 8
IntSum = IntSum + 9
IntSum = IntSum + 10
</FONT></PRE>
<P>Neither of these approaches is extremely difficult, but what if you needed to
add together the first 100 integer numbers? The previous assignments could become
tedious indeed, but for the <TT>For</TT> loop to add the first 100 integers is just
as easy to code as for the first 10 integers, as Listing 8.5 demonstrates.
<H3 ALIGN="CENTER"><A NAME="Heading16"></A><FONT COLOR="#000077">Listing 8.5. Add
the numbers from 1 to 100.</FONT></H3>
<PRE><FONT COLOR="#0066FF">IntSum = 0
For intNumber = 1 To 100   ` Only this line changes
  IntSum = IntSum + Number
<TT>Next intNumber</TT> </FONT></PRE>
<P><BR>
The following loop displays five message boxes:</P>
<PRE><FONT COLOR="#0066FF">For intCtr = 1 To 20 Step 4
   intPress = MsgBox(&quot;This is a message box&quot;)
Next intCtr
</FONT></PRE>
<P>The loop counts up from <TT>1</TT> to <TT>20</TT> by <TT>4</TT>s, putting each
count into the counter variable named <TT>intCtr</TT> and printing a message box
each time. The <TT>Step</TT> value changes how Visual Basic updates the CounterVar
each time the loop iterates.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>An iteration is one complete
cycle through a loop.</P>
<P>If you specify a negative <TT>Step</TT> value, Visual Basic counts down. The following
loop rings the PC's speaker five times:</P>
<PRE><FONT COLOR="#0066FF">For intCtr = 5 To 1 Step -1
   Beep
Next intCtr
</FONT></PRE>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>The <TT>Beep</TT>
	statement simply buzzes the speaker on your computer. 
<HR>
</P>
	<P>
<HR>
<A NAME="WARNING:"></A><FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>If you
	specify a negative <TT>Step</TT> value, EndVal must be less than StartVal or Visual
	Basic will execute the loop only once. 
<HR>


</BLOCKQUOTE>

<P>Listing 8.6 contains a fairly comprehensive <TT>For</TT> loop that computes compound
interest for an initial investment of $1,000.00. The code appears inside the <TT>Click</TT>
event procedure for a command button named <TT>cmdIntr</TT>. With compound interest,
each year the amount of money invested, including interest earned so far, compounds
to build more money. Each time period, normally a year, means that another year's
interest must be added to the value of the investment. A <TT>For</TT> loop is perfect
for calculating interest. Listing 8.6 uses five compound cycles.
<H3 ALIGN="CENTER"><A NAME="Heading17"></A><FONT COLOR="#000077">Listing 8.6. Using
a For loop to calculate compound interest.</FONT></H3>
<PRE><FONT COLOR="#0066FF">Sub cmdIntr_Click ()
` Use a For loop to calculate a final total
` investment using compound interest.
`
` intNum is a loop control variable
` sngIRate is the annual interest rate
` intTerm is the Number of years in the investment
` curInitInv is the investor's initial investment
` sngInterest is the total interest paid
   Dim sngIRate As Single, sngInterest As Single
   Dim intTerm As Integer, intNum As Integer
   Dim curInitInv As Currency

   sngIRate = .08
   intTerm = 5
   ` Watch out... The Code window might convert the
   ` following literals, 1000.00 and 1.0, to double-
   ` precision literals with the suffix # to ensure
   ` accuracy.
   curInitInv = 1000.00
   sngInterest = 1.0  ` Begin at one for first compound

   ` Use loop to calculate total compound amount
   For intNum = 1 To intTerm
      sngInterest = sngInterest * (1 + sngIRate)
   Next intNum

   ` Now we have total interest,
   ` calculate the total investment
   ` at the end of N years
   lblFinalInv.Caption = curInitInv * sngInterest
<TT>End Sub</TT> </FONT></PRE>
<P><BR>
This analysis focuses on the loop and not the interest calculation. The most important
thing that you can do at this point is to master the <TT>For</TT> looping statement.
The code's remarks contain variable descriptions so that anyone looking at the code
or changing the code later will know what the variables are for.</P>
<P>After the program defines all the variables, the variables are initialized with
start-up values. If you use this event procedure, be sure to add a label named <TT>lblFinalInv</TT>
to a form and add a command button named <TT>cmdInt</TT> to the form. The middle
lines will seem to give you trouble as you type them unless you remember the description
you got in Hour 5, &quot;Putting Code into Visual Basic,&quot; of data suffix characters.
Visual Basic uses the pound sign (<TT>#</TT>), to indicate double-precision values,
and Visual Basic will assume that <TT>1000.00</TT> is a double-precision value (I
don't know why) and will convert the <TT>1000.00</TT> to <TT>1000#</TT> right after
you press Enter at the end of the line! In addition, Visual Basic converts the <TT>1.0</TT>
to <TT>1#</TT> on the next line. Don't worry about Visual Basic's pickiness here.</P>
<P>The most important part of this program is the <TT>For</TT> loop that iterates
through each interest rate period (five of them) and compounds the interest on top
of the investment to date. Again, don't let the financial part worry you. The calculation
is less important than understanding the looping process. After the loop finishes,
the event procedure places the compounded investment in the label's <TT>Caption</TT>
property.
<H3 ALIGN="CENTER"><A NAME="Heading19"></A><FONT COLOR="#000077">You Can Terminate
Loops Early</FONT></H3>
<P>Sometimes, you'll be processing user input or several data values using looping
statements, and an exception occurs in the data that requires an immediate termination
of the loop. For example, you may be collecting sales values for a company's 10 divisions
inside a <TT>For</TT> loop that iterates 10 times. However, the user can enter <TT>0</TT>
for a division's sales value, indicating that there is no sales data for that division.
Rather than complete the loop, your program might need to quit the loop at that point
because the full divisional report information can't be gathered at the time. The
<TT>Exit Do</TT> and the <TT>Exit For</TT> statements automatically terminate loops.
No matter what the <TT>Do</TT> loop's comparison test results in, or no matter how
many more iterations are left in a <TT>For</TT> loop, when Visual Basic encounters
an <TT>Exit Do</TT> or <TT>Exit For</TT> statement, Visual Basic immediately quits
the loop and sends execution down to the statement following the loop. Typically,
an <TT>If</TT> statement triggers one of the <TT>Exit</TT> statements like this:</P>
<PRE><FONT COLOR="#0066FF">For intDivisions = 1 To 10    ` Code to get a sales value    If (cngSales &lt;= 0.0) Then       Exit For      ` Quit the loop early    End If   ` Process the rest of the code Next intDivisions
</FONT></PRE>
<P>The <TT>If</TT> ensures that the <TT>Exit For</TT> executes only under one specific
condition (a missing sales value). Without that specific condition triggering the
<TT>Exit For</TT>, the loop cycles normally. Visual Basic also supports the <TT>Exit
Sub</TT> statement that terminates a procedure early.
<H3 ALIGN="CENTER"><A NAME="Heading20"></A><FONT COLOR="#000077">Summary</FONT></H3>
<P>In this hour you have learned how you can add loops to your programs. Computers
do not get bored. Your program will execute the same series of instructions over
and over until you terminate the loop. Visual Basic supports several forms of looping
statements. The <TT>Do</TT> and <TT>For</TT> loops provide you with the power to
write any kind of looping section your program needs. The choice of loop you use
is up to your style and coding preference more than anything else.</P>
<P>The next hour moves away from the theory you've been getting in the last few lessons
to get you back to the keyboard and freshen up your application design and construction
skills.
<H3 ALIGN="CENTER"><A NAME="Heading21"></A><FONT COLOR="#000077">Q&amp;A</FONT></H3>

<DL>
	<DD><B>Q How can I guard against infinite loops?<BR>
	<BR>
	A</B> All loops continue as long as a condition is true or as long as a condition
	is false. Therefore, somewhere inside the loop's body your code must modify the condition
	used for the loop. The <TT>For</TT> loop's control variable must reach its ending
	value or something inside the <TT>Do</TT> loop's condition must change inside the
	loop's body. If the body of a loop does not change the controlling condition, the
	loop will execute forever.<BR>
	<B><BR>
	Q How do I terminate an infinite loop?<BR>
	<BR>
	A</B> As the lesson states, you must press Ctrl+Break to terminate an infinite loop.
	Until this lesson, you had not heard of Ctrl+Break, but the keystroke has been the
	program-stopping keystroke for many versions of the BASIC language through the years.
	In addition, you can click on VB's End toolbar button or select Run | End from the
	menu.
</DL>

<H3 ALIGN="CENTER"><A NAME="Heading22"></A><FONT COLOR="#000077">Workshop</FONT></H3>
<P>The quiz questions and exercises are provided for your further understanding.
See Appendix C, &quot;Answers,&quot; for answers.
<H4 ALIGN="CENTER"><A NAME="Heading23"></A><FONT COLOR="#000077">Quiz</FONT></H4>

<DL>
	<DD><B>1.</B> Why might your program need a loop?<BR>
	<B><BR>
	2.</B> How many forms of <TT>Do</TT> are there?<BR>
	<B><BR>
	3.</B> True or false: The <TT>Do-Loop While</TT> and the <TT>Do While</TT> are identical
	in every respect.<BR>
	<B><BR>
	4.</B> What is the difference between <TT>Do-Loop While</TT> and <TT>Do-Loop Until</TT>?<BR>
	<B><BR>
	5.</B> Which loop checks its condition at the top of the loop: <TT>Do Until</TT>
	or <TT>Do-Loop Until</TT>?<BR>
	<B><BR>
	6.</B> Why do programmers often use the <TT>Val()</TT> function on control values
	and <TT>InputBox()</TT> returns?<BR>
	<B><BR>
	7. </B>True or false: A <TT>For</TT> loop can count down.<BR>
	<BR>
	<B>8.</B> How many times does the following loop iterate?
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">intI = 10
do While intI &gt;= 1
  intI = intI - 1
Loop</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>

<DL>
	<DD><B>9. </B>What default <TT>Step</TT> value does Visual Basic use if you don't
	supply a <TT>Step</TT> value?<BR>
	<B><BR>
	10.</B> True or false: The <TT>Exit</TT> statement exits the current application.
</DL>

<H4 ALIGN="CENTER"><A NAME="Heading24"></A><FONT COLOR="#000077">Exercises</FONT></H4>

<DL>
	<DD><B>1.</B> Write a program that contains a text box and a command button. Put
	a label above the text box that tells the user to type a number from 1 to 10 inside
	the text box. When the user clicks the command button, check the text box for a valid
	number and issue an error message box if the number is not inside the expected range.
	If the user entered a valid number, beep the computer's speaker the number of times
	entered in the text box using a <TT>For</TT> loop.<BR>
	<BR>
	<B>2.</B> Rewrite Listing 8.3 so that the error message box that you display tells
	the user that the age entered is too low if the age is below 10 or that the age entered
	is too high if the age is more than 99.
	<P ALIGN="CENTER"><BR>
	<A HREF="ch07.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
	BORDER="0"></A><A HREF="../index.html"><IMG SRC="../buttons/blantoc.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="ch09.htm"><IMG SRC="../buttons/blannext.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="#heading1"><IMG SRC="../buttons/blantop.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A>
</DL>



</BODY>

</HTML>
