<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">

	<TITLE>Without a title - Title</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><A HREF="ch10.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37"
HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A
HREF="../index.html"><IMG SRC="../buttons/blantoc.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
BORDER="0"></A><A HREF="ch12.htm"><IMG SRC="../buttons/blannext.gif" WIDTH="37" HEIGHT="37"
ALIGN="BOTTOM" BORDER="0"></A></H1>

<UL>
	<LI><A HREF="#Heading1">Hour 11</A>
	<UL>
		<LI><A HREF="#Heading2">Additional Controls</A>
		<UL>
			<LI><A HREF="#Heading3">Option Buttons</A>
			<UL>
				<LI><A HREF="#Heading4">Figure 11.1.</A>
				<LI><A HREF="#Heading5">Figure 11.2.</A>
			</UL>
			<LI><A HREF="#Heading6">Frames and Option Buttons</A>
			<UL>
				<LI><A HREF="#Heading7">Figure 11.3.</A>
				<LI><A HREF="#Heading8">Figure 11.4.</A>
			</UL>
			<LI><A HREF="#Heading9">Listing 11.1. The framed</A>
			<LI><A HREF="#Heading10">option button code.</A>
			<LI><A HREF="#Heading11">Color Named Literals</A>
			<LI><A HREF="#Heading12">Check Boxes</A>
			<UL>
				<LI><A HREF="#Heading13">Figure 11.5.</A>
				<LI><A HREF="#Heading14">Figure 11.6.</A>
			</UL>
			<LI><A HREF="#Heading15">Scrollbars</A>
			<UL>
				<LI><A HREF="#Heading16">Figure 11.7.</A>
			</UL>
			<LI><A HREF="#Heading17">Listing 11.2. The code behind the</A>
			<LI><A HREF="#Heading18">scrollbar application.</A>
			<LI><A HREF="#Heading19">VBs Clock: The Timer Control</A>
			<UL>
				<LI><A HREF="#Heading20">Figure 11.8.</A>
				<LI><A HREF="#Heading21">Figure 11.9.</A>
				<LI><A HREF="#Heading22">Figure 11.10.</A>
			</UL>
			<LI><A HREF="#Heading23">Summary</A>
			<LI><A HREF="#Heading24">Q&amp;A</A>
			<LI><A HREF="#Heading25">Workshop</A>
			<UL>
				<LI><A HREF="#Heading26">Quiz</A>
				<LI><A HREF="#Heading27">Exercises</A>
			</UL>
		</UL>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H2 ALIGN="CENTER"><A NAME="Heading1"></A><FONT COLOR="#000077">Hour 11</FONT></H2>
<H2 ALIGN="CENTER"><A NAME="Heading2"></A><FONT COLOR="#000077">Additional Controls</FONT></H2>
<P>Now that you've added several programming statements to your Visual Basic language
repertoire, you can learn about additional controls to add new features to your applications
and to take advantage of some of the more powerful commands you now know. As you
learn about new controls, your programming ability grows by leaps and bounds because
your programs become richer in functionality and user interaction.</P>
<P>You'll learn about the selection controls, how to program scrollbars, and how
to set the Timer control to let your application know when a predetermined amount
of time has passed.</P>
<P>The highlights of this hour include

<UL>
	<LI>How option buttons differ from check boxes
	<P>
	<LI>When to change the check box's style
	<P>
	<LI>Why scrollbars contain unusual properties
	<P>
	<LI>How to set the Timer control to record time passing as an application executes
</UL>

<H3 ALIGN="CENTER"><A NAME="Heading3"></A><FONT COLOR="#000077">Option Buttons</FONT></H3>
<P>Figure 11.1 shows an application with four option buttons. An option button gives
your user a choice. By clicking the option button or by sending the focus to the
option button and pressing the Spacebar to choose the option, the user selects or
deselects an option button. The option button has a black center inside its option
button circle when selected.<BR>
<BR>
<A NAME="Heading4"></A><A HREF="../art/ch11/11cce01.jpg"><FONT COLOR="#000077">Figure
11.1.</FONT></A><FONT COLOR="#000077"> </FONT><I>A form with four option buttons.</I></P>
<P>Option buttons act in a mutually exclusive fashion. Only one option button can
be selected at any one time. Therefore, in Figure 11.1, the user could not select
two or more of the options. If the user were to click Texas, the California option
would no longer be selected. You don't have to do anything special to ensure that
only one option button is selected at any one time; Visual Basic takes care of removing
the former option's selection when the user selects a subsequent option button.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Option buttons
	are sometimes called radio buttons. Many car radios used to have five or six buttons
	that selected preset stations. The listener could only select one station; as soon
	as the listener pushed a button, the previous station's button popped out. 
<HR>


</BLOCKQUOTE>

<P>The option button supports several of the properties you're already familiar with,
such as the <TT>Appearance</TT> and <TT>Alignment</TT> properties. The <TT>Alignment</TT>
property determines whether the option button text resides to the left or right of
the option button. Figure 11.2 shows the option buttons with their <TT>Alignment</TT>
property set to <TT>2-Right Justify</TT>. The alignment you set depends on where
the option buttons are to fall in relation to other controls.<BR>
<BR>
<A NAME="Heading5"></A><A HREF="../art/ch11/11cce02.jpg"><FONT COLOR="#000077">Figure
11.2.</FONT></A><FONT COLOR="#000077"> </FONT><I>These option buttons have a right-justified
<TT>Alignment</TT> property.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>An option button
	control array makes setting option button properties, such as the <TT>Alignment</TT>
	property, simple. Several option buttons almost always appear together and the control
	array lets you set only one's property and the others will receive the same property
	settings. If you do not create an option button control array, you can change all
	the option button properties at once, even without a control array, by first selecting
	all the option button controls and then setting the properties for all of them at
	once. 
<HR>


</BLOCKQUOTE>

<P>The <TT>Value</TT> property is perhaps the most important option button property
because the <TT>Value</TT> property changes at runtime and determines whether the
option button is currently selected. By the way, the user can select only one option
button at a time, but the application may start up without any option buttons being
set if you don't set any in the Properties window or in code.
<H3 ALIGN="CENTER"><A NAME="Heading6"></A><FONT COLOR="#000077">Frames and Option
Buttons</FONT></H3>
<P>Figure 11.3 shows an application called Controls that comes in the VB <TT>Samples</TT>
folder. (Load the <TT>Controls.VBP</TT> project and run the application to select
the Option Buttons command button and display Figure 11.3's window.) This option
button application lets you select a computer type and operating system. Figure 11.3
seems to violate the option button's primary rule: More than one option button is
selected at the same time (the Pentium option button and the Windows 95 option).</P>
<P>Sometimes a form will need several sets of option buttons, just like the form
in Figure 11.3. In each set the user should be allowed to select only one option
button, but one option button should be set from each set at the same time. Therefore,
you must revise the previous rule, which states that only one option button can be
set at one time. The truth is that only one option button inside a frame can be set
at one time.<BR>
<BR>
<A NAME="Heading7"></A><A HREF="../art/ch11/11cce03.jpg"><FONT COLOR="#000077">Figure
11.3.</FONT></A><FONT COLOR="#000077"> </FONT><I>Two option buttons are set.</I></P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>A frame is a rectangular
region on a form that holds other controls and groups the controls into a single
set.</P>
<P>A frame is a control that holds other controls. The frame is a rectangular outline
with an optional title. When you want to place multiple sets of option buttons on
a form, first place the frame or frames onto the form. (You can place any control
on a frame, but the frame especially helps group option buttons so you can offer
multiple option button sets.)


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>The form acts
	as a default frame. Therefore, two sets of option buttons reside on Figure 11.3's
	form: One set resides in a frame and the other set resides on the form itself so
	you consider them framed as well, even though no specific frame control surrounds
	them. 
<HR>


</BLOCKQUOTE>

<P>The frame control does support properties that determine the frame's look and
caption and a frame does support a few events, but most programmers use the frame
as a holding place to group other controls. Once you place controls in a frame, you
can move the frame and all the frame's controls move with it. Therefore, adjusting
framed controls is relatively easy to do.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="WARNING:"></A><FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>Always
	place a frame on the form before putting controls in the frame. If you simply move
	controls from elsewhere on the form to the frame, the controls will not be in the
	frame but will exist simply on top of the frame. Visual Basic will not consider them
	framed together. To add additional controls to a frame with controls, click one of
	the framed controls before adding the new control. 
<HR>


</BLOCKQUOTE>

<P>Figure 11.4 shows an application that contains three frames that determine how
text appears inside a label. The user can select only one option button inside each
frame. As soon as the user changes one of the options, the option button's <TT>Click()</TT>
event responds to the change and sets the <TT>Label</TT> property accordingly. Listing
11.1 contains the complete form module code that takes care of the user's action.
The label is initialized in the <TT>Form_Load()</TT> event procedure (the procedure
that executes right before the user sees the form) and the remaining event procedures
are the responses to various user clicks on the form's controls. The controls are
named well enough so that you will know where the controls appear in Figure 11.4.<BR>
<BR>
<A NAME="Heading8"></A><A HREF="../art/ch11/11cce04.jpg"><FONT COLOR="#000077">Figure
11.4.</FONT></A><FONT COLOR="#000077"> </FONT><I>A form with three frames.</I>
<H3 ALIGN="CENTER"><A NAME="Heading9"></A><FONT COLOR="#000077">Listing 11.1. The
framed option button code.</FONT></H3>
<PRE><FONT COLOR="#0066FF">
Private Sub Form_Load()
  ` Initialize the label's text
  Dim strLabel1 As String
  Dim strLabel2 As String
  Dim strLabel3 As String
  Dim strLabel4 As String
  
  strLabel1 = &quot;Use frames if you want &quot;
  strLabel2 = &quot;to group options together. &quot;
  strLabel3 = &quot;Each frame forms one set &quot;
  strLabel4 = &quot;of option buttons.&quot;
  
  lblFrames.Caption = strLabel1 &amp; strLabel2 &amp; _
                      strLabel3 &amp; strLabel4
  
  ` Set the label's properties
  lblFrames.FontItalic = True
  optItalicTrue.Value = True
  
  lblFrames.FontUnderline = True
  optUnderTrue.Value = True
  
  lblFrames.ForeColor = vbBlue
  optBlue.Value = True
End Sub

Private Sub optItalicTrue_Click()
  lblFrames.FontUnderline = True
End Sub

Private Sub optItalicFalse_Click()
  lblFrames.FontUnderline = False
End Sub

Private Sub optRed_Click()
  lblFrames.ForeColor = vbRed
End Sub

Private Sub optBlue_Click()
  lblFrames.ForeColor = vbBlue
End Sub

Private Sub optGreen_Click()
  lblFrames.ForeColor = vbGreen
End Sub

Private Sub optUnderTrue_Click()
  lblFrames.FontItalic = True
End Sub

Private Sub optUnderFalse_Click()
  lblFrames.FontItalic = False
End Sub

Private Sub cmdExit_Click()
   Unload Me
   End
<TT>End Sub</TT></FONT></PRE>
<P>
<H3 ALIGN="CENTER"><A NAME="Heading11"></A><FONT COLOR="#000077">Color Named Literals</FONT></H3>
<P>Listing 11.1 demonstrates the use of named literals. The background colors assigned
to the label are named literals that come with Visual Basic. Table 11.1 lists the
named literal colors that you can use and assign to any property that uses color
values such as the background and foreground colors of several controls. Given that
Windows supports millions of possible colors, the eight colors that Table 11.1 lists
represent a small number of colors you can possibly set. (Named literals do not exist
for other color values.) Visual Basic supplies several ways to specify colors so
that you can set a color from among the millions possible. For most situations, however,
and for simplicity, Table 11.1's named literals work for most applications.</P>
<CENTER>
<P><B>Table 11.1. The color named literals. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Literal</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Color</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbBlack</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Black</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbRed</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Red</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbGreen</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Green</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbYellow</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Yellow</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbBlue</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Blue</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbMagenta</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Magenta</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbCyan</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Cyan</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbWhite</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">White</TD>
	</TR>
</TABLE>

</CENTER>
<CENTER>
<H3><A NAME="Heading12"></A><FONT COLOR="#000077">Check Boxes</FONT></H3>
</CENTER>
<P>Figure 11.5 shows a form with check boxes. The Check Box control works just like
the option button, with two differences: A selected check box shows the selection
with a checkmark, and check boxes are never mutually exclusive. Therefore, the user
can select one or more check boxes even if those check boxes reside in the same frame
or on the same form.<BR>
<BR>
<A NAME="Heading13"></A><A HREF="../art/ch11/11cce05.jpg"><FONT COLOR="#000077">Figure
11.5.</FONT></A><FONT COLOR="#000077"> </FONT><I>A form with two check boxes.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Figure 11.5's
	application is from the <TT>Controls.VBP</TT> project included in VB's <TT>Samples</TT>
	folder. 
<HR>


</BLOCKQUOTE>

<P>The Check Box control supports the same fundamental properties as the option button
except that the <TT>Value</TT> property determines not only if the box is checked
(if <TT>1</TT>) or unchecked (if <TT>0</TT>), but a check box can also be grayed
(if the <TT>Value</TT> property contains <TT>2</TT>). Users sometimes use a grayed
check box to determine whether part of a selected option is true. In addition, the
programmer may gray out a box to show that the selection is unavailable under the
current conditions.</P>
<P>Visual Basic version 5 added a new <TT>Style</TT> value to the Check Box control's
property list. The available <TT>Style</TT> property values are <TT>0-Standard</TT>
and <TT>1-Graphical</TT>. The graphical style value makes the check box look a lot
like a command button that stays pressed (when selected) or unpressed (when not selected).</P>
<P>Figure 11.6 shows a form that illustrates the various check box property options
available to you.<BR>
<BR>
<A NAME="Heading14"></A><A HREF="../art/ch11/11cce06.jpg"><FONT COLOR="#000077">Figure
11.6.</FONT></A><FONT COLOR="#000077"> </FONT><I>Some Check Box control property
options.</I>
<CENTER>
<H3><A NAME="Heading15"></A><FONT COLOR="#000077">Scrollbars</FONT></H3>
</CENTER>
<P>Scrollbars let users control value changes. Rather than type specific values,
the user can move the scrollbars with the mouse to specify relative positions within
a range of values. The toolbox includes both a Horizontal Scrollbar and a Vertical
Scrollbar control.</P>
<P>Table 11.2 contains a list of important scrollbar properties that determine the
behavior of the scrollbar.</P>
<CENTER>
<P><B>Table 11.2. Fundamental scrollbar properties. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><B><I>Property</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>LargeChange</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies the amount that the scrollbar changes when the user clicks within the scrollbar's
			shaft area.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Max</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Indicates the maximum number of units that the scrollbar value represents at its
			highest setting. The range is from <TT>1</TT> to <TT>32767</TT> (the default <TT>Max</TT>
			value).</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Min</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Indicates the minimum number of units the scrollbar value represents at its lowest
			setting. The range is from <TT>1</TT> (the default <TT>Min</TT> value) to <TT>32767</TT>.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>SmallChange</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Specifies the amount that the scrollbar changes when the user clicks an arrow at
			either end of the scrollbar.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Value</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Contains the unit of measurement currently represented by the position of the scrollbar.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>When you place a scrollbar on a form, you must decide at that time what range
of values the scrollbar is to represent. The scrollbar's full range can extend from
<TT>1</TT> to <TT>32767</TT>. Set the <TT>Min</TT> property to the lowest value you
want represented by the scrollbar. Set the <TT>Max</TT> property to the highest value
you want represented by the scrollbar.</P>
<P>When the user eventually uses the scrollbar, the scrollbar arrows control small
movements in the scrollbar's value determined by the <TT>SmallChange</TT> property.
Clicking the empty part of the shaft on either side of the scrollbox produces a positive
or negative change in the value represented by the <TT>LargeChange</TT> property.
The user can drag the scrollbox itself to any position within the scrollbar shaft
to jump to a specific location instead of changing the value gradually.</P>
<P>Suppose, for example, that a horizontal scrollbar represented a range of whole
dollar amounts from $5 to $100. When the user clicks the scroll arrows, the scrollbar's
value changes by $1. When the user clicks the empty shaft on either side of the scrollbox,
the scrollbar's value changes by $5. Here are the property values that you would
set that determine how VB interprets each click of the scrollbar: <TT>Min</TT>: <TT>5</TT>,
<TT>Max</TT>: <TT>100</TT>, <TT>SmallChange</TT>: <TT>1</TT>, and <TT>LargeChange</TT>:
<TT>5</TT>.</P>
<P>The physical size of the scrollbar has no bearing on the scrollbar's returned
values when the user selects from the scrollbar. Adjust the scrollbars on your form
so that the scrollbars are wide enough or tall enough to be appropriately sized for
the items that they represent.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>A thumb is the scrollbar's
moving scrollbox (the elevator-like box).</P>
<P>Figure 11.7 shows an application that uses a vertical scrollbar to change the
size of a label's font size. As the user clicks the top scrollbar arrow, the font
size shrinks by the <TT>SmallChange</TT> value. As the user clicks the bottom scrollbar
arrow, the font size increases by the <TT>SmallChange</TT> value. (The application's
<TT>SmallChange</TT> property value is <TT>1</TT>.) If the user clicks in the scrollbar's
shaft on either side of the scrollbar's thumb, the <TT>LargeChange</TT> property
value of <TT>5</TT> is either added to or subtracted from the font size.<BR>
<BR>
<A NAME="Heading16"></A><A HREF="../art/ch11/11cce07.jpg"><FONT COLOR="#000077">Figure
11.7.</FONT></A><FONT COLOR="#000077"> </FONT><I>The vertical scrollbar determines
the label's font size. </I><BR>
<BR>
Listing 11.2 shows the code behind Figure 11.7. The code is not lengthy because the
scrollbar's <TT>Click()</TT> event procedure must change only the label's text font
size and the label that displays the current font size. Any time the user changes
the scrollbar, the scrollbar's <TT>Click()</TT> event procedure executes.
<CENTER>
<H3><A NAME="Heading17"></A><FONT COLOR="#000077">Listing 11.2. The code behind the
scrollbar application.</FONT></H3>
</CENTER>
<PRE><FONT COLOR="#0066FF">
Private Sub vsbHeight_Change()
  lblScroll.FontSize = vsbHeight.Value
  lblFontHeight.Caption = vsbHeight.Value
<TT>End Sub</TT></FONT></PRE>
<CENTER>
<H3><A NAME="Heading19"></A><FONT COLOR="#000077">VBs Clock: The Timer Control</FONT></H3>
</CENTER>
<P>The Timer control acts unlike any other control you've seen so far. The Timer
control always works in the background and the user never sees the timer on the form.
You will see the Timer control during design time because you need to be able to
select the control and change its properties. Nevertheless, the timer's purpose is
to work in the background, triggering an event every once in a while according to
the clock ticks.</P>
<P>Your computer has an internal clock to keep things running smoothly. The hardware
requires an accurate clock for memory refreshes and CPU cycle coordination efforts.
Software, such as Visual Basic, can tap into the internal clock and utilize its timing
to control certain time-based events that your application may need to perform.</P>
<P>Figure 11.8 shows the Timer control as it appears when you place the control on
a form. The Timer control supports only seven properties because the Timer control
never appears on the form at runtime. Therefore, the control has no need for many
of the style and size properties used for other controls the user sees.<BR>
<BR>
<A NAME="Heading20"></A><A HREF="../art/ch11/11cce08.jpg"><FONT COLOR="#000077">Figure
11.8.</FONT></A><FONT COLOR="#000077"> </FONT><I>The Timer control appears on the
form only at design time.</I></P>
<P>You can place the timer out of the way of your form's other controls since its
physical location is trivial. Once you place the timer on the form, you should set
its <TT>Interval</TT> property because <TT>Interval</TT> is the most important timer
property. The <TT>Interval</TT> property contains a value that must range from <TT>1</TT>
to <TT>65535</TT>. The value is in milliseconds (or thousandths of a second), so
an <TT>Interval</TT> value of <TT>500</TT> would equate to half a second. The Timer
control generates only one event: the <TT>Timer</TT> event. The Timer control triggers
a <TT>Timer</TT> event after each interval of time goes by. Therefore, if you named
a Timer control <TT>tmrClock</TT>, and if you set the control's <TT>Interval</TT>
property to <TT>1000</TT>, Visual Basic would execute the <TT>tmrClock_Timer()</TT>
event procedure approximately every second.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>A millisecond is one-thousandth
of a second.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="WARNING:"></A><FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>The Timer
	control is not a perfect timer, just a good timer. Other processes occurring inside
	your computer can cause the Timer control to be off by a few milliseconds. The smaller
	the <TT>Interval</TT> value, the more likely the <TT>Timer</TT> event will be off.
	Fortunately, the Timer control works without much of a timing hitch, especially given
	today's faster computers. 
<HR>


</BLOCKQUOTE>

<P>Figure 11.9 shows the Alarm sample application that comes with Visual Basic in
the <TT>Samples\PGuide</TT> folder. The Timer's <TT>Interval</TT> property value
is set to <TT>500</TT> and the time of day updates every half-second (the time is
shown in full seconds; the half-second update helps correct timing problems that
might occur every few half-seconds). Therefore, if you run the Alarm application,
a <TT>Timer</TT> event will occur every one-half second.<BR>
<BR>
<A NAME="Heading21"></A><A HREF="../art/ch11/11cce09.jpg"><FONT COLOR="#000077">Figure
11.9.</FONT></A><FONT COLOR="#000077"> </FONT><I>The Timer control generates an event
every few milliseconds.</I></P>
<P>Clicking on the Alarm application's small Form window produces an input box that
asks you for an alarm time. The <TT>Timer()</TT> click procedure from then on compares
the current time with the time that the user enters and, if the alarm time has been
reached, the alarm goes off. The alarm displays Figure 11.10's dialog box, which
informs the user that the alarm time is reached.<BR>
<BR>
<A NAME="Heading22"></A><A HREF="../art/ch11/11cce10.jpg"><FONT COLOR="#000077">Figure
11.10.</FONT></A><FONT COLOR="#000077"> </FONT><I>The <TT>Timer()</TT> event procedure
determined that the alarm time was reached.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="WARNING:"></A><FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>Feel free
	to study the sample Alarm application's code, but be warned that the application
	uses a few built-in functions that you will not master until Hour 14, &quot;Built-in
	Functions Save Time.&quot; 
<HR>


</BLOCKQUOTE>

<P>If you need an interval that's larger than the <TT>65535</TT> <TT>Interval</TT>
value allows (this maximum <TT>Interval</TT> value provides only about a 10-second
interval), insert some <TT>If</TT> logic at the top of the <TT>Timer()</TT> event
procedure that checks to see if the required amount of time has passed since the
last interval. (To do this, you will need some of the time functions described in
Hour 14.)
<CENTER>
<H3><A NAME="Heading23"></A><FONT COLOR="#000077">Summary</FONT></H3>
</CENTER>
<P>In this hour you have learned about several new controls so you can begin adding
more user interactivity to your applications. The option buttons and check boxes
work almost exactly alike except that the option buttons are mutually exclusive and
provide your users with single options from a selection. The scrollbars let your
users select values based on a range using either a horizontal or vertical scrollbar.
Finally, the Timer control keeps track of time passing during your application's
execution and triggers a <TT>Timer</TT> event every time the <TT>Interval</TT> value
of time has passed.</P>
<P>Hour 12, &quot;Dialog Box Basics,&quot; builds further on your I/O skills by demonstrating
how to create common dialog boxes. Your users will be able to use the dialog boxes
to enter and select multiple values.
<CENTER>
<H3><A NAME="Heading24"></A><FONT COLOR="#000077">Q&amp;A</FONT></H3>
</CENTER>

<DL>
	<DD><B>Q Can I program check boxes to be mutually exclusive or do I have to use option
	buttons?<BR>
	<BR>
	A </B>Check boxes are not mutually exclusive by design. Option buttons are. Therefore,
	a Visual Basic application's user can only select one option button at a time within
	any one frame or on the form. If you want to change the behavior of check boxes and
	make them act like option buttons, be warned that you are giving your users mixed
	signals. Your users are used to being able to select as many check boxes as they
	wish and your application can keep them from doing the usual, which, in many cases,
	makes the user dislike your application. Users feel comfortable when an application
	follows de facto standards. Nevertheless, you can make the check boxes act like option
	buttons, but you will have to put code in the check boxes' <TT>Click()</TT> event
	procedures to remove the check from the current check box when the user clicks another
	check box. The code is fairly trivial, but again, your users will adapt more easily
	to your application if you use option buttons in mutually exclusive cases.<BR>
	<B><BR>
	Q How can I trust the Timer control if it is not accurate?<BR>
	<BR>
	A </B>The Timer control is accurate, but your computer cannot always let Windows
	respond to events exactly when needed. A multitasking operating system such as Windows
	does a lot of things at once. If a <TT>Timer()</TT> event occurs, the operating system
	cannot always, at that exact millisecond, go back to the running application and
	signal that the event occurred. Therefore, your applications sometimes take a back
	seat to system operations. Today's fast computers have much less of a time-accuracy
	problem than in the past, so you should not worry too much about the potential millisecond
	miss now and then.
</DL>

<CENTER>
<H3><A NAME="Heading25"></A><FONT COLOR="#000077">Workshop</FONT></H3>
</CENTER>
<P>The quiz questions and exercises are provided for your further understanding.
See Appendix C, &quot;Answers,&quot; for answers.
<CENTER>
<H4><A NAME="Heading26"></A><FONT COLOR="#000077">Quiz</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> True or false: Option button captions always appear to the right of
	the buttons.<BR>
	<B><BR>
	2. </B>What happens if the user clicks an option button that is not currently selected?<BR>
	<B><BR>
	3.</B> Why would you gray out a Check Box control?<BR>
	<B><BR>
	4. </B>What happens if the user clicks a check box that is not currently selected?<BR>
	<B><BR>
	5.</B> True or false: An application can begin with none of its option buttons or
	check boxes selected.<BR>
	<B><BR>
	6. </B>What kind of control can you place on a frame?<BR>
	<B><BR>
	7. </B>What is the difference between a scrollbar's <TT>Small Change</TT> property
	and a scrollbar's <TT>Large Change</TT> property?<BR>
	<B><BR>
	8. </B>Which property changes when the user clicks one of the scrollbar's arrows?<BR>
	<B><BR>
	9.</B> True or false: The Timer control works like an alarm clock ready to go off
	at a preset time of day.<BR>
	<B><BR>
	10. </B>True or false: If you need a timer interval greater than approximately 10
	seconds, you must use multiple Timer controls.
</DL>

<CENTER>
<H4><A NAME="Heading27"></A><FONT COLOR="#000077">Exercises</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> Create an application that mimics the frame application used with Listing
	11.1. Instead of using separate option buttons, use an option button array for each
	frame's option button, making a total of three option button arrays. Change Listing
	11.1 to reduce the number of event procedures in the application. Use a <TT>Select
	Case</TT> statement based on the event procedure <TT>Index</TT> argument to set the
	appropriate label property.<BR>
	<B><BR>
	2.</B> Change the application you wrote in exercise 1 so that no frames appear on
	the form. Remove the Underline and Italic option buttons (keep the Framed Color option
	buttons) and add these check box controls in their place: Underline and Italic. Change
	the code so that the text will appear underlined if the user clicks the Underline
	check box and so that the text will be italicized if the user clicks the Italic check
	box. Both or only one might be checked at any one time.<BR>
	<B><BR>
	3.</B> Duplicate this lesson's scrollbar application that lets the user set the label's
	text size with the scrollbar. Completely remove the scrollbar, however, and add a
	<TT>Timer</TT> property. Every second, add 5 to the label's font size. When the font
	size grows to 70 or more points, send the size back down to 8 and start increasing
	the size once again.
	<P ALIGN="CENTER"><BR>
	<A HREF="ch10.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
	BORDER="0"></A><A HREF="../index.html"><IMG SRC="../buttons/blantoc.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="ch12.htm"><IMG SRC="../buttons/blannext.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="#heading1"><IMG SRC="../buttons/blantop.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A>
</DL>



</BODY>

</HTML>
