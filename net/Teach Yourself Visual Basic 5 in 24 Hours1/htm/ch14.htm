<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">

	<TITLE>Without a title - Title</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><A HREF="ch13.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37"
HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A
HREF="../index.html"><IMG SRC="../buttons/blantoc.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
BORDER="0"></A><A HREF="ch15.htm"><IMG SRC="../buttons/blannext.gif" WIDTH="37" HEIGHT="37"
ALIGN="BOTTOM" BORDER="0"></A></H1>

<UL>
	<LI><A HREF="#Heading1">Hour 14</A>
	<UL>
		<LI><A HREF="#Heading2">Built-in Functions Save Time</A>
		<LI>
		<UL>
			<LI><A HREF="#Heading4">Lots of Functions</A>
			<LI><A HREF="#Heading5">Numeric Functions</A>
			<UL>
				<LI><A HREF="#Heading6">Figure 14.1.</A>
			</UL>
			<LI><A HREF="#Heading7">String Functions</A>
			<LI><A HREF="#Heading8">A Mid Statement?</A>
			<LI><A HREF="#Heading9">Date and Time Functions</A>
			<LI><A HREF="#Heading10">Listing 14.1. Using Timer to</A>
			<LI><A HREF="#Heading11">time the users math skills.</A>
			<LI><A HREF="#Heading12">Data-Testing Functions</A>
			<LI><A HREF="#Heading13">Data Conversion Functions</A>
			<LI><A HREF="#Heading14">Format Function</A>
			<LI><A HREF="#Heading15">Youll Rarely Need Format Codes</A>
			<LI><A HREF="#Heading16">Listing 14.2. Formatting</A>
			<LI><A HREF="#Heading17">numeric and logical values.</A>
			<LI><A HREF="#Heading18">Summary</A>
			<LI><A HREF="#Heading19">Q&amp;A</A>
			<LI><A HREF="#Heading20">Workshop</A>
			<UL>
				<LI><A HREF="#Heading21">Quiz</A>
				<LI><A HREF="#Heading22">Exercises</A>
			</UL>
		</UL>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H2 ALIGN="CENTER"><A NAME="Heading1"></A><FONT COLOR="#000077">Hour 14</FONT></H2>
<H2 ALIGN="CENTER"><A NAME="Heading2"></A><FONT COLOR="#000077">Built-in Functions
Save Time</FONT></H2>
<P>This lesson gives you a reference for many of the most common built-in functions.
You will learn about the numeric, string, time, date, and formatting functions that
Visual Basic supplies. By using the built-in functions Visual Basic gives you, you
won't have to spend a lot of time writing your own code for common routines. For
example, you never need to write code that extracts a square root because Visual
Basic supplies a built-in square root function for you.</P>
<P>As with all functions, the built-in functions return values and, optionally, accept
arguments that you pass to the functions when you call the functions. Some built-in
functions don't accept arguments; although the style is inconsistent, you don't specify
the parentheses after the built-in function names that do not accept arguments. Without
the parentheses, it is easy to confuse the function with a regular Visual Basic statement.
Fortunately, only a few don't take arguments.</P>
<P>The highlights of this hour include

<UL>
	<LI>Which numeric functions exist
	<P>
	<LI>How to use string functions to manipulate strings
	<P>
	<LI>Which date and time functions let you modify date and time values
	<P>
	<LI>How the data-testing functions inspect data
	<P>
	<LI>When to convert data from one type to another with the data-conversion functions
	<P>
	<LI>How to format your data to look the way you want it to look
</UL>

<H3 ALIGN="CENTER"><A NAME="Heading4"></A><FONT COLOR="#000077">Lots of Functions</FONT></H3>
<P>Many built-in mathematical functions exist, including data conversion functions,
common math functions, trigonometric and logarithmic functions, and formatting functions.
The next few sections explain how to use many of the more common kinds of numeric
functions you might need to use in your own applications.
<H3 ALIGN="CENTER"><A NAME="Heading5"></A><FONT COLOR="#000077">Numeric Functions</FONT></H3>
<P>Visual Basic includes several numeric functions you can use to help calculate
expressions. To start with, you might as well learn the square root function described
in the previous section. Here is the format of Visual Basic's built-in square root
function:</P>
<PRE><FONT COLOR="#0066FF">Sqr(argument)
</FONT></PRE>
<P>Remember that a function accepts one or more arguments and returns a value based
on the argument list. Figure 14.1 illustrates the <TT>Sqr()</TT> function. The function
accepts a single argument and returns the square root of that argument.<BR>
<BR>
<A NAME="Heading6"></A><A HREF="../art/ch14/14cce01.jpg"><FONT COLOR="#000077">Figure
14.1. </FONT></A><I>The <TT>Sqr()</TT> function returns the square of the argument
you pass to it.</I></P>
<P>Suppose you wanted to store the square root of a builder's measurement in a control
named <TT>txtSqrMeas</TT>. You could do so like this:</P>
<PRE><FONT COLOR="#0066FF">txtSqrMeas.Text = Sqr(sngMeas)
</FONT></PRE>
<P>Table 14.1 lists several additional mathematic functions you can use.</P>
<CENTER>
<P><B>Table 14.1. Common built-in numeric functions. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><B><I>Function</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Abs()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the argument's absolute value. The absolute value is the positive equivalent
			of the argument, so the absolute value of both <TT>-87</TT> and <TT>87</TT> is <TT>87</TT>.
			Use absolute values for distance calculations and weight differences because such
			values must always be positive.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Atn()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the argument's arc tangent, expressed in radians. To compute the arc tangent
			in degrees (or any other trigonometric function), multiply the argument by pi (approximately
			3.14159) and then divide by 180.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Cos()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the argument's cosine value, expressed in radians.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Exp()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the argument's natural logarithm base.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Len()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the number of memory characters required to hold the argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Log()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the argument's natural logarithm.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Sin()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the argument's sine value, expressed in radians.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Tan()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the argument's tangent value, expressed in radians.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>Pi is a mathematical value
that approximates 3.14159 and is used in many area calculations.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Don't need scientific
	logarithmic or trigonometric functions? That's fine, but many financial calculations
	use such functions, so these routines are not just for highly scientific calculations.
	Visual Basic will keep them ready in case you do need them. 
<HR>
</P>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>Search Visual
	Basic's online help for <TT>Derived Math Functions</TT> for an exhaustive list of
	built-in numeric functions Visual Basic offers. If you write a lot of scientific
	and engineering applications, you'll be surprised at how well the language supports
	advanced functions. From its early roots, the BASIC language and its predecessors
	have offered surprisingly advanced functions for such a simplified language. 
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading7"></A><FONT COLOR="#000077">String Functions</FONT></H3>
</CENTER>
<P>Unlike the numeric functions, Visual Basic's string functions return a string
and often work with one or more string arguments. Table 14.2 lists several of the
more common string functions you'll work with. The string functions accept controls
as well as variables and literals and expressions so you can manipulate controls
with the string functions.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Table 14.2 includes
	the argument format because some string functions require multiple arguments. 
<HR>


</BLOCKQUOTE>

<CENTER>
<P><B>Table 14.2. Common built-in string functions. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Function</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Chr(</TT>int<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the ASCII character that matches the numeric argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>LCase(</TT>str<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the argument in all lowercase letters. If any character in the argument is
			already lowercase, no change takes place for that character.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Left(</TT>str<TT>, </TT>int<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the leftmost int characters from the string argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Len(</TT>str<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the number of characters in the string. (Notice that <TT>Len()</TT> works
			on numeric arguments as well.) Also, <TT>Len()</TT> does not return a string even
			though <TT>Len()</TT> works with string arguments.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>LTrim(</TT>str<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the string argument, with any leading spaces trimmed off.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Mid(</TT>str, intStart <TT>[, </TT>intLen<TT>])</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns a substring of the string argument, starting with the character at intStart
			and continuing until the entire rest of the string is extracted or until the optional
			intLen characters have been extracted. <TT>Mid()</TT> is called the midstring function
			because it can return the middle portion of a string.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Right(</TT>str<TT>, </TT>int<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the rightmost int characters from the string argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>RTrim(</TT>str<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the string argument, with any trailing spaces trimmed off.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Str()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Converts its numeric argument to a string with the numeric digits in the string.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>UCase(</TT>str<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the argument in all uppercase letters. If any character in the argument is
			already uppercase, no change takes place for that character.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>A substring is part of a
string.</P>
<P>Suppose you want to determine whether a string variable's value will fit inside
a text box before you attempt to assign the string to the Text Box control (assume
that the text box does not have <TT>AutoSize</TT> set to <TT>True</TT>). If the text
box is large enough to hold 20 characters, the following <TT>If</TT> statement fragment
will be <TT>True</TT> if the string fits in the text box:</P>
<PRE><FONT COLOR="#0066FF">If (Len(strVar) &lt;= 20) Then    ` String fits
</FONT></PRE>
<P>Suppose you need to compare two password string values. Given that the user may
have entered the password in all uppercase or a case mixture, the following code
tests the stored password against one entered in a string variable, and the code
uses <TT>UCase()</TT> to ensure that they compare with the same case matches:</P>
<PRE><FONT COLOR="#0066FF">If UCase(strUser) = UCase(strPassword) Then
   ` This If leg is true if the passwords match
</FONT></PRE>
<P>The <TT>LTrim()</TT> function is often useful for trimming the leading blank from
strings you make from numbers. For example, <TT>Str(123)</TT> returns the string
literal <TT>&quot; 123&quot;</TT> (notice the leading blank). Sometimes, when writing
certain kinds of files, you need to write strings of data instead of numbers and
<TT>Str()</TT> comes in handy. If, however, you need to strip off the leading blank,
you can embed <TT>Str()</TT> within <TT>LTrim()</TT> to return the string digits
without the leading blank, like this: <TT>LTrim(Str(123))</TT>.</P>
<P><TT>Left()</TT> returns the left part of a string or control value that Visual
Basic converts to a string. Therefore, the following stores only the first five characters
from the string argument into <TT>strAns</TT>:</P>
<PRE><FONT COLOR="#0066FF">strAns = Left(txtUser.Text, 5)
</FONT></PRE>
<P>Whereas <TT>Left()</TT> returns the left part, <TT>Right()</TT> returns the right
part of a string. <TT>Mid()</TT> can return the middle part of a string. Therefore,
the following expression becomes <TT>&quot;der&quot;</TT> when <TT>Mid()</TT> returns
the middle three letters: <TT>Mid(&quot;Federal&quot;, 3, 3)</TT>. Due to the optional
third argument, <TT>Mid()</TT> works like the <TT>Right()</TT> function if you omit
the third argument because <TT>Mid()</TT> returns all characters from the starting
position to the end of the string if you don't put the third argument inside <TT>Mid()</TT>'s
argument list.
<CENTER>
<H3><A NAME="Heading8"></A><FONT COLOR="#000077">A Mid Statement?</FONT></H3>
</CENTER>
<P>Visual Basic includes both a <TT>Mid()</TT> function and a <TT>Mid</TT> statement.
The difference is subtle, so you should understand how the <TT>Mid()</TT>s compare.
<TT>Mid</TT> is a statement if <TT>Mid</TT> appears on the left side of an assignment.
The <TT>Mid()</TT> statement replaces part of a string with another value. If the
string variable named <TT>strSentence</TT> holds <TT>&quot;I flew home&quot;</TT>,
you can replace the verb <TT>flew</TT> with <TT>rode</TT>, like this: <TT>Mid(strSentence,
3, 4) = &quot;rode&quot;</TT>. If you omit the third argument from this <TT>Mid</TT>
statement, Visual Basic will use as many characters as possible to fill the string.
In this example, the third argument does nothing but clarify the programmer's intent
because the replacement string is four characters long. If you were to specify a
third argument value less than <TT>4</TT>, <TT>Mid()</TT> replaces fewer characters.
<CENTER>
<H3><A NAME="Heading9"></A><FONT COLOR="#000077">Date and Time Functions</FONT></H3>
</CENTER>
<P>Applications today need to be able to access and work with date and time values.
Many applications are written for business and scientific purposes, where recording
the date and time of the program run is vital to the success of the project. Visual
Basic includes the date and time functions described in Table 14.3.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="WARNING:"></A><FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>The date-
	and time-returning functions <TT>Date</TT>, <TT>Now</TT>, and <TT>Time</TT> do not
	require arguments, so they do not use parentheses. 
<HR>


</BLOCKQUOTE>

<CENTER>
<P><B>Table 14.3. Date and time functions. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Function</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Date</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the current date.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>DateSerial(</TT>intYr<TT>, </TT>intMo<TT>, </TT>intDay<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns an internal date value for the three arguments.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>DateAdd(</TT>strIntrvl<TT>, </TT>intN<TT>, </TT>dteDate<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Adds the intN value to the date specified by dtrDate for the given strIntrvl.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>DateDiff(</TT>strIntrvl<TT>, </TT>dte1<TT>, </TT>dte2<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the number of time intervals (specified by strIntrvl) between the two dates.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>DatePart(</TT>strIntrvl<TT>, </TT>dteDate<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the strIntrvl portion of the dtrDate.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Now</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the current date and time in the date format.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Time</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the current time.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Timer</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the number of seconds since midnight.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>TimeSerial(</TT>hour<TT>, </TT>min<TT>, </TT>sec<TT>)</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Returns the current date and time in the internal date format for the time specified.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>You may think that Table 14.3 is ambiguous in places, but Visual Basic gives you
many ways to manipulate and test date and time values. You'll probably use a limited
set, depending on your data needs. Most of the time your application simply needs
to know the current date or time to display the date or time on a form or report.
Assign <TT>Date</TT>, <TT>Time</TT>, or <TT>Now</TT> (for both) to return the current
date, time, or both.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE:"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>The returned
	value is the internal <TT>Date</TT> data type format Visual Basic uses for variables
	declared as <TT>Date</TT> data type variables. You can assign and work with dates
	returned from <TT>Date</TT>, <TT>Time</TT>, and <TT>Now</TT> by assigning them to
	and from variables declared as <TT>Date</TT> data type variables. When you print
	the value, Visual Basic respects your computer's International Windows settings and
	prints the date or time in your country's format. You can use the <TT>Format()</TT>
	function described in this lesson's final section to format the date into a form
	you need. 
<HR>


</BLOCKQUOTE>

<P>The serial date and time functions let you convert a three-part date into a date
that matches the internal <TT>Date</TT> data type so you can work with variables
that hold dates you specify. For example, if you want to store the value July 18,
1998, in a <TT>Date</TT> data type variable named <TT>dteDue</TT>, you can do so
like this:</P>
<PRE><FONT COLOR="#0066FF">dteDue = DateSerial(1998, 7, 18)
</FONT></PRE>
<P>If the year falls within the 20th century, you can omit the <TT>19</TT> before
the year. If you ever try to store a value that does not correspond to a proper date
or time value, the <TT>IsDate()</TT> function (described in the next section) will
return <TT>False</TT> to let you know that a bad date or time appears in the <TT>Date</TT>
data type variable.</P>
<P>In a similar manner, <TT>TimeSerial()</TT> returns an internal <TT>Date</TT> data
type when you specify the three time parts, like this:</P>
<PRE><FONT COLOR="#0066FF">dteTimePaid = TimeSerial(14, 32, 25)  ` Stores 2:32:25 P.M.
</FONT></PRE>
<P>The time works on a 24-hour clock, so <TT>14</TT> represents 2:00 in the afternoon.
The <TT>Date</TT> data type holds dates, times, and date and time values, so your
<TT>Date</TT> variable will hold whatever date or time combination you send.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>The <TT>DateSerial()</TT>
	and <TT>TimeSerial()</TT> functions let you specify expressions inside their argument
	lists to manipulate specific date and time portion values. For example, the expression
	<TT>DateSerial(1998, 7, 18-31)</TT> returns the date 31 days before July 18, 1998.
	Therefore, you don't have to worry about the number of days in a month or anything
	else. Such calculations are useful for aging accounts receivable balances. Use an
	expression inside <TT>TimeSerial()</TT> to eliminate worry with going past midnight,
	as in this example: <TT>TimeSerial(14-20, 30, 16)</TT>. Such an expression represents
	20 hours before 2:30:16 p.m. 
<HR>


</BLOCKQUOTE>

<P><TT>DateAdd()</TT>, <TT>DateDiff()</TT>, and <TT>DatePart()</TT> require a special
string interval value that comes from Table 14.4. The interval tells these date functions
how to change the date argument.</P>
<CENTER>
<P><B>Table 14.4. Date and time interval string values. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Interval</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>h</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Hour</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>d</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Day</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>m</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Month</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>n</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Minute</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>q</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Quarter</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>s</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Second</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>y</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Day of year</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>w</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Weekday</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>ww</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Week</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>yyyy</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Year</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>Suppose the user entered a date value into a control or variable and you needed
to work with a date 30 days after that date to remind the user after 30 days that
a project is due. You can add 30 days to a date value without worrying about days
in each month or year changes (as would happen if the date fell in late December)
by specifying the following expression that adds 20 days to the date to return another
date 20 days in the future: <TT>DateAdd(&quot;d&quot;, 20, dteUserDate)</TT>. You
can subtract 20 days using a negative interval. Suppose you want the date one year
from the user's date? Code this expression anywhere you need the future date in a
year and you don't have to worry about leap year: <TT>DateAdd(&quot;yyyy&quot;, 1,
dteUserDate)</TT>.</P>
<P>The <TT>DateDiff()</TT> function uses Table 14.4's interval string value to return
the number of intervals between two dates. For example, the following expression
returns the number of weeks between two date values: <TT>dateDiff(&quot;ww&quot;,
dteUser1, dteUser2)</TT>.</P>
<P>Use Table 14.4's interval value and the <TT>DatePart()</TT> function to obtain
the integer number that represents the specified value. You can determine the day
of the week (assuming that the week starts with Sunday being <TT>1</TT>) that you
were born by coding this expression: <TT>DatePart(&quot;d&quot;, dteUserBDay)</TT>.</P>
<P>Visual Basic includes three additional functions that strip off the day, month,
and year values from a <TT>Date</TT> data type variable: <TT>Day()</TT>, <TT>Month()</TT>,
and <TT>Year()</TT>. If you want to work with the current year, you can strip off
the year from the current date like this:</P>
<PRE><FONT COLOR="#0066FF">intYear = Year(Date)   ` Get this year
</FONT></PRE>
<P>The <TT>Timer</TT> function is useful for determining the amount of time that
has passed between two time values. <TT>Timer</TT> requires no arguments or parentheses.
To use <TT>Timer</TT>, save the value of <TT>Timer</TT> in a variable and when you
are ready to know how much time has elapsed since the first time, you can compare
or save the current value of <TT>Timer</TT> again. Listing 14.1 demonstrates the
<TT>Timer</TT> function that tests your arithmetic speed.
<CENTER>
<H3><A NAME="Heading10"></A><FONT COLOR="#000077">Listing 14.1. Using Timer to time
the users math skills.</FONT></H3>
</CENTER>
<PRE><FONT COLOR="#0066FF">
Dim lngBefore As Long
Dim lngAfter As Long
Dim lngTimeDiff As Long
Dim strAns As String

lngBefore = Timer   ` Save seconds since midnight
Do
   strAns = InputBox(&quot;What is 150 + 235?&quot;, &quot;Hurry&quot;)
Loop Until Val(strAns) = 385

lngAfter = Timer    ` Save seconds since midnight now

` The difference between the stored time values
` is how many seconds the user took to answer
lngTimeDiff = lngAfter - lngBefore
MsgBox (&quot;The took you only &quot; &amp; Str(lngTimeDiff) &amp; _<TT>&quot; seconds!&quot;)</TT> </FONT></PRE>
<P><BR>
The code uses the two saved <TT>Timer</TT> values to determine how long the user
took to answer. If the user does not answer correctly, the time keeps ticking. If
the user happens to run this right before midnight, the results will not be accurate
because of the day change.
<CENTER>
<H3><A NAME="Heading12"></A><FONT COLOR="#000077">Data-Testing Functions</FONT></H3>
</CENTER>
<P>The <TT>Is...()</TT> functions are called the data inspection functions. When
you store a value in a variable declared as a <TT>Variant</TT> data type variable,
the data inspection functions can test that variable to see what kind of data type
the variable can be. The data inspection functions are especially useful for working
with user entries in controls and variables.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>Data inspection functions
are functions that inspect data and return information about the data type.</P>
<P>Table 14.5 describes the data inspection functions.</P>
<CENTER>
<P><B>Table 14.5. Data inspection functions for testing data types. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><B><I>Function</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>IsDate()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>True</TT> if the argument can convert to a <TT>Date</TT> data type.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>IsEmpty()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>True</TT> if the argument has even been initialized with any value since the
			argument's declaration. <TT>IsEmpty()</TT> works with variable arguments only, not
			controls.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>IsNull()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>True</TT> if the argument holds <TT>Null</TT> (such as an empty string) and works
			for controls as well as variables.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>IsNumeric()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>True</TT> if the argument can convert to a <TT>Numeric</TT> data type.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>Notice that Visual Basic supports no <TT>IsString()</TT> function. If you want
to test for a <TT>String</TT> value, you must use a different kind of function. If
you need more specific information about a data type, you can use the <TT>VarType()</TT>
function, which returns a value that indicates the exact data type an argument can
be. If you expect the user to enter an integer, for example, you can test with <TT>VarType()</TT>
to see if the argument is a valid integer. Use Table 14.6 to determine if the return
type is your expected data type.</P>
<CENTER>
<P><B>Table 14.6. The VarType() return values. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Return</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Named Literal</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Describes</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>0</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbEmpty</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Empty and not initialized argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>1</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbNull</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Invalid data or a null string argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>2</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbInteger</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Integer argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>3</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbLong</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Long argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>4</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbSingle</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Single argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>5</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbDouble</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Double argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>6</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbCurrency</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Currency argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>7</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbDate</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Date argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>8</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbString</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">String argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>9</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbObject</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Object argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>10</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbError</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Error argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>11</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbBoolean</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Boolean argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>12</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbVariant</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Variant argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>13</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbDataObject</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Data Access Object (DAO) argument. A Data Access Object is an advanced database value
			such as a field or record.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>14</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbDecimal</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Decimal argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>17</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbByte</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Byte argument.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>8192+</TT>int</TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>vbArray</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Array argument of the type specified by the int addition to 8192.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P>If <TT>VarType(dataVal)</TT> returns a number greater than <TT>8192</TT>, subtract
<TT>8192</TT> from the return value to arrive at the data type (such as <TT>12</TT>
for a <TT>Variant</TT> data type). A return value of <TT>8194</TT>, therefore, represents
an integer array.
<CENTER>
<H3><A NAME="Heading13"></A><FONT COLOR="#000077">Data Conversion Functions</FONT></H3>
</CENTER>
<P>Once you determine what kind of value a <TT>Variant</TT> variable or a control
holds, you can convert that argument to its associated data type. The conversion
functions shown in Table 14.7 describe the conversions you can perform.</P>
<CENTER>
<P><B>Table 14.7. The data conversion functions. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Function</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Asc()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Converts its string argument to the ASCII number that matches the first (or only)
			character in the string.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>CCur()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Converts the argument to an equivalent <TT>Currency</TT> data type.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>CDbl()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Converts the argument to an equivalent <TT>Double</TT> data type.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>CInt()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Rounds its fractional argument to the next highest integer.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>CLng()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Converts the argument to an equivalent <TT>Long</TT> data type.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>CSng()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Converts the argument to an equivalent <TT>Single</TT> data type.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>CStr()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Converts the argument to an equivalent <TT>String</TT> data type.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>CVar()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Converts the argument to an equivalent <TT>Variant</TT> data type.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Fix()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Truncates the fractional portion.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Int()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Rounds the number down to the integer less than or equal to its arguments.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Hex()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Converts its numeric argument to a hexadecimal (base-16) value.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>Oct()</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Converts its numeric argument to an octal (base-8) value.</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>Hexadecimal is the base-16
number system.</P>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>Octal is the base-8 number
system.</P>
<P>Normally, the following assignment stores <TT>.1428571</TT> in a label named <TT>lblValue</TT>:</P>
<PRE><FONT COLOR="#0066FF">lblValue.Caption = (1 / 7)
</FONT></PRE>
<P>The following, however, adds precision to the label for a more accurate calculation
to assign <TT>.142857142857143</TT> to the label:</P>
<PRE><FONT COLOR="#0066FF">lblValue.Caption = CDbl(1 / 7)
</FONT></PRE>
<P>Use these conversion functions when you need the exact data type for more precision
in calculations or controls.
<CENTER>
<H3><A NAME="Heading14"></A><FONT COLOR="#000077">Format Function</FONT></H3>
</CENTER>
<P>Visual Basic cannot read your mind, so it doesn't know how you want numbers displayed
in your applications. Although Visual Basic sometimes displays none, one, or two
decimal places for currency values, you'll almost always want those currency values
displayed to two decimal places with a dollar sign and commas when appropriate.</P>
<P>As with the date and time functions, if you've set your computer's international
settings to a country other than the United States, your formatted currency values
may differ from those shown here. (This book uses U.S. settings.) Some countries
use commas to indicate decimal places, whereas the United States uses the decimal
point.</P>
<P><TT>Format()</TT> returns a <TT>Variant</TT> (convertible to a <TT>String</TT>)
data type formatted to look the way you need. <TT>Format()</TT> does not change a
value, but <TT>Format()</TT> changes the way a value looks. Here is the format of
<TT>Format()</TT>:</P>
<PRE><FONT COLOR="#0066FF">Format(Expression, strFormat)
</FONT></PRE>
<P>Often, you'll assign the result of <TT>Format()</TT> to other variables and controls.
Generally, you'll perform all needed calculations on numeric values before formatting
those values. After you've performed the final calculations, you'll then format the
values to <TT>String</TT> (or <TT>Variant</TT>) data types and display the resulting
answers as needed.</P>
<P>Expression can be a variable, an expression, or a constant. strFormat must be
a value from Table 14.8. Visual Basic contains many format strings in addition to
the ones shown in Table 14.8. You can even develop your own programmer-defined format
strings, although this book doesn't go into those.</P>
<CENTER>
<P><B>Table 14.8. The strFormat values. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>strFormat</I></B></TD>
		<TD ALIGN="LEFT" VALIGN="TOP"><B><I>Description</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;Currency&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Ensures that a dollar sign (<TT>$</TT>) appears before the formatted value, followed
			by a thousands separator (a decimal point or comma for values over 999; your country
			setting determines whether the thousands separator is a comma or a decimal). Two
			decimal places will always show. Visual Basic displays negative values in parentheses.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;Fixed&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Displays at least one digit before and two digits following the decimal point, with
			no thousands separator.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;General Number&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Displays the number with no thousands separator.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;Medium Time&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Displays the time in 12-hour format and the a.m. or p.m. indicator.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;On/Off&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Displays <TT>On</TT> if the value contains a nonzero or <TT>True</TT> value and displays
			<TT>Off</TT> if the value contains zero or a <TT>False</TT> value.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;Percent&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Displays the number, multiplied by 100, and adds the percent sign to the right of
			the number.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;Scientific&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Displays numbers in scientific notation.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;Short Time&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Displays the time in 24-hour format.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;True/False&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Displays <TT>True</TT> if the value contains a nonzero or <TT>True</TT> value, and
			displays <TT>False</TT> if the value contains zero or a <TT>False</TT> value.</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT" VALIGN="TOP"><TT>&quot;Yes/No&quot;</TT></TD>
		<TD ALIGN="LEFT" VALIGN="TOP">Displays <TT>Yes</TT> if the value contains a nonzero or <TT>True</TT> value and
			displays <TT>No</TT> if the value contains zero or a <TT>False</TT> value.</TD>
	</TR>
</TABLE>

</CENTER>
<CENTER>
<H3><A NAME="Heading15"></A><FONT COLOR="#000077">You'll Rarely Need Format Codes</FONT></H3>
</CENTER>
<P>If the predefined formats from Table 14.8 don't match the format you need, you
can define your own using special formatting codes. This lesson would be twice as
long as it is if all the programmer-defined formats were taught here. The good news
is that, when you do define your own formats, you'll almost always use just a combination
of the pound sign and zeros to format the values you need. Each pound sign in the
format indicates where a digit goes, and the zero indicates that you want either
leading or trailing zeros. The following assignment displays the value of <TT>Weight</TT>
to three decimal places: <TT>lblMeas.Caption = Format(Weight, &quot;######.000&quot;)</TT>
You could also request that no decimal point should appear by formatting a fractional
value such as <TT>Weight</TT>, and Visual Basic will round the number as needed to
fit the target format. The following assignment displays <TT>Weight</TT> with no
decimal places shown on the screen: <TT>lblMeas.Caption = Format(Weight, &quot;######&quot;)<BR>
</TT>Listing 14.2 contains a series of formatting function calls that convert numeric
and logical values to formatted <TT>Variant</TT> data types that you can display.
<CENTER>
<H3><A NAME="Heading16"></A><FONT COLOR="#000077">Listing 14.2. Formatting numeric
and logical values.</FONT></H3>
</CENTER>
<PRE><FONT COLOR="#0066FF">
Dim FormValue (8) As String
   ` Change 12345.678 to $12,345.68
   FormValue(1) = Format(12345.678, &quot;Currency&quot;)

   ` Change 12345678 to 12345.68
   FormValue(2) = Format(12345.678, &quot;Fixed&quot;)

   ` Change .52 to 52.00%
   FormValue(3) = Format(.52, &quot;Percent&quot;)

   ` Change 1 to Yes
   FormValue(4) = Format(1, &quot;Yes/No&quot;)

   ` Change 0 to No
   FormValue(5) = Format(0, &quot;Yes/No&quot;)

   ` Change 1 to True
   FormValue(6) = Format(1, &quot;True/False&quot;)

   ` Change 0 to False
   <TT>FormValue(7)= Format(0, &quot;True/False&quot;)</TT></FONT></PRE>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP:"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>If you use VB's
	Professional or Enterprise Editions, you can add the Masked Edit ActiveX control,
	which lets you specify an edit mask that formats data in a manner similar to <TT>Format()</TT>.
	
<HR>


</BLOCKQUOTE>

<P><FONT COLOR="#000077"><B>New Term: </B></FONT>An edit mask is a format string,
such as <TT>&quot;#,###.##&quot;</TT>, that specifies how you want numeric and string
data to appear.
<CENTER>
<H3><A NAME="Heading18"></A><FONT COLOR="#000077">Summary</FONT></H3>
</CENTER>
<P>You now have many new tools for your programming utility belts because you now
have a good understanding ofVisual Basic's built-in functions. The functions calculate,
manipulate strings, work with time and date values, convert data, and format output
data. You don't have to add special controls to the toolbox to use the built-in functions
because Visual Basic's programming language supports all these functions automatically.</P>
<P>Now that you've mastered the functions, you can learn how to access large amounts
of data to work with. Hour 15, &quot;Visual Basic Database Basics,&quot; describes
how to use the Data control so that your application can write and read data to and
from external database files.
<CENTER>
<H3><A NAME="Heading19"></A><FONT COLOR="#000077">Q&amp;A</FONT></H3>
</CENTER>

<DL>
	<DD><B>Q Why would I want to perform date arithmetic?<BR>
	<BR>
	A</B> Date arithmetic is useful for determining the exact date (or time) after another
	period of time goes by. For example, suppose you need to know the exact day that
	three months from today's date falls on. You cannot just add 3 or 90 (3 times 30
	days) to a date value; not only can you not add to a <TT>Date</TT> data type, but
	even if you could, such math does not take into account leap years, days in the months,
	and year changes. By using <TT>DateAdd()</TT> and <TT>DatePart()</TT>, you can perform
	such calculations with date values and be assured that the result will fall on a
	valid date.<BR>
	<B><BR>
	Q If Timer returns the number of seconds since midnight, how can I use Timer to determine
	how much time has passed for a given task?<BR>
	<BR>
	A</B> The key to using <TT>Timer</TT> is to save the value of <TT>Timer</TT> before
	the task begins and then save the value of <TT>Timer</TT> after the task begins.
	You then can subtract the values to determine how many seconds elapsed between the
	two tasks. A single <TT>Timer</TT> reading would not be very beneficial by itself,
	but the two before and after values can be very helpful indeed.
</DL>

<CENTER>
<H3><A NAME="Heading20"></A><FONT COLOR="#000077">Workshop</FONT></H3>
</CENTER>
<P>The quiz questions and exercises are provided for your further understanding.
See Appendix C, &quot;Answers,&quot; for answers.
<CENTER>
<H4><A NAME="Heading21"></A><FONT COLOR="#000077">Quiz</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> What preparation must you do before the built-in functions are available
	to you?<BR>
	<B><BR>
	2.</B> What is the value stored in each of the following assignment statements?
	<DL>
		<DD><B><BR>
		a.</B> <TT>strA = Left(&quot;abcdefg&quot;, 3)</TT><BR>
		<B><BR>
		b.</B> <TT>strB = Right(&quot;abcdefg&quot;, 3)</TT><BR>
		<B><BR>
		c.</B> <TT>strC = Mid(&quot;abcdefg&quot;, 2, 3)</TT><BR>
		<B><BR>
		d.</B> <TT>strD = Mid(&quot;abcdefg&quot;, 2)</TT>
	</DL>
	<DD><B>3.</B> Is the following <TT>Mid()</TT> a function or a statement?
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">Mid(strTest, 2, 4) = &quot;abcd&quot;</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>

<DL>
	<DD><B>4.</B> Is the following <TT>Mid()</TT> a function or a statement?
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">strAns = Mid(strTest, 2, 4)</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>

<DL>
	<DD><B>5.</B> What is the value stored in each of the following assignment statements?
	<DL>
		<DD><B><BR>
		a. </B><TT>intA = Int(20.34)</TT><BR>
		<B><BR>
		b.</B> <TT>intB = CInt(20.34)</TT><BR>
		<B><BR>
		c.</B> <TT>intC = Fix(-2.8)</TT><BR>
		<B><BR>
		d.</B> <TT>intD = Int(-2.8)</TT>
	</DL>
	<DD><B><BR>
	6.</B> What value appears in <TT>varAns</TT> after the following assignment?
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">varAns = Val(LTrim(Str(&quot;10&quot;)))</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>

<DL>
	<DD><B>7.</B> What is the 24-hour time for 12:56 p.m.?<BR>
	<B><BR>
	8.</B> What is a thousands separator?<BR>
	<B><BR>
	9.</B> True or false: You must use <TT>Format()</TT> to properly format date and
	time values because the built-in date and time functions cannot interpret your International
	settings.<BR>
	<B><BR>
	10.</B> True or false: <TT>Now</TT> returns information for both the current date
	and the current time.
</DL>

<CENTER>
<H4><A NAME="Heading22"></A><FONT COLOR="#000077">Exercises</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> Write a program that stores the 256 ASCII characters (from ASCII 0
	to ASCII 255) in a string array that's defined to hold 256 characters.<BR>
	<B><BR>
	2. </B>Write a subroutine procedure that asks the user for the time that he clocked
	into work and then for the time he clocked out. Display, in three labels, the total
	number of seconds worked, the total number of minutes worked, and the total number
	of hours worked.<BR>
	<B><BR>
	3.</B> Write a subroutine procedure that asks the user for his birthday. If the user
	entered a valid date (check to make sure and keep asking if the user did not enter
	a date), display a message box telling the user how many years until retirement age
	of 65. If the user is older than 65, congratulate him on a long life!
	<P ALIGN="CENTER"><BR>
	<BR>
	<A HREF="ch13.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
	BORDER="0"></A><A HREF="../index.html"><IMG SRC="../buttons/blantoc.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="ch15.htm"><IMG SRC="../buttons/blannext.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="#heading1"><IMG SRC="../buttons/blantop.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A>
</DL>



</BODY>

</HTML>
