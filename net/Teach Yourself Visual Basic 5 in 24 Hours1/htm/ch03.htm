<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">

	<TITLE>Without a title - Title</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><A HREF="ch02.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37"
HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A
HREF="../index.html"><IMG SRC="../buttons/blantoc.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
BORDER="0"></A><A HREF="ch04.htm"><IMG SRC="../buttons/blannext.gif" WIDTH="37" HEIGHT="37"
ALIGN="BOTTOM" BORDER="0"></A></H1>

<UL>
	<LI><A HREF="#Heading1">Hour 3</A>
	<UL>
		<LI><A HREF="#Heading2">Controls and Properties</A>
		<UL>
			<LI><A HREF="#Heading3">Creating New Applications</A>
			<LI><A HREF="#Heading4">Controls Provide the Interface</A>
			<UL>
				<LI><A HREF="#Heading5">Placing Controls</A>
				<UL>
					<LI><A HREF="#Heading6">Figure 3.1.</A>
					<LI><A HREF="#Heading7">Figure 3.2.</A>
				</UL>
				<LI><A HREF="#Heading8">Sizing and Moving Controls</A>
				<UL>
					<LI><A HREF="#Heading9">Figure 3.3.</A>
				</UL>
				<LI><A HREF="#Heading10">Setting Properties</A>
				<UL>
					<LI><A HREF="#Heading11">Figure 3.4.</A>
				</UL>
			</UL>
			<LI><A HREF="#Heading12">Giving Your Users Help</A>
			<UL>
				<LI><A HREF="#Heading13">Figure 3.5.</A>
				<LI><A HREF="#Heading14">Figure 3.6.</A>
				<LI><A HREF="#Heading15">Figure 3.7.</A>
			</UL>
			<LI><A HREF="#Heading16">Named Literals</A>
			<UL>
				<LI><A HREF="#Heading17">Figure 3.8.</A>
			</UL>
			<LI><A HREF="#Heading18">Take a Break!</A>
			<UL>
				<LI><A HREF="#Heading19">Figure 3.9.</A>
				<LI><A HREF="#Heading20">Figure 3.10.</A>
				<LI><A HREF="#Heading21">Figure 3.11.</A>
			</UL>
			<LI><A HREF="#Heading22">Summary</A>
			<LI><A HREF="#Heading23">Q&amp;A</A>
			<LI><A HREF="#Heading24">Workshop</A>
			<UL>
				<LI><A HREF="#Heading25">Quiz</A>
				<LI><A HREF="#Heading26">Exercises</A>
			</UL>
		</UL>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H2 ALIGN="CENTER"><A NAME="Heading1"></A><FONT COLOR="#000077">Hour 3</FONT></H2>
<H2 ALIGN="CENTER"><A NAME="Heading2"></A><FONT COLOR="#000077">Controls and Properties</FONT></H2>
<P>Nobody can master Visual Basic until he masters controls and properties. The form
is the placeholder for the controls, and the controls are the really important parts
of any application. Many of the properties require different kinds of values, and
you will learn in this hour's lesson how to set those values.</P>
<P>Before you finish this lesson, you also will have created your very first application
from scratch without the aid of the VB Application Wizard. You will have created
a new project, sized the form, added controls, set control properties, and even written
an event procedure using the Visual Basic programming language! As you'll soon see,
Visual Basic makes all those tasks simple.</P>
<P>The highlights of this hour include

<UL>
	<LI>What steps are required for application creation
	<P>
	<LI>How to place and size controls
	<P>
	<LI>Why various properties require different setting methods
	<P>
	<LI>Which naming prefixes work best
	<P>
	<LI>Why your application's tooltips give users added help
</UL>

<H3 ALIGN="CENTER"><A NAME="Heading3"></A><FONT COLOR="#000077">Creating New Applications</FONT></H3>
<P>When you create an application from scratch, instead of using the VB Application
Wizard to generate the program shell, you control every aspect of the application's
design and you place all the program's controls on the form yourself. When you place
those controls, you must name the controls, position the controls, set control properties,
adjust the control sizes, and hook up all the event procedure code that goes with
each control.</P>
<P>All this may sound daunting, but Visual Basic makes things as simple as possible.
Although the task is not quite as simple as running the wizard, you have the power
to create the exact application you need. Newcomers need to learn how to create applications
without the wizard so they can fully master all the ins and outs of Visual Basic.</P>
<P>To create a new application from scratch, start Visual Basic and double-click
the icon labeled Standard EXE. The blank Form window appears in the work area's upper-left
corner next to the toolbox, ready for you to begin creating the application by placing
the controls.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>The default Form
	window size is fairly small, especially when you realize that the Form window holds
	the application's background. Most applications appear either full-screen or in an
	initial window much larger than the Form window size that appears. Therefore, one
	of the first tasks you will usually perform is to increase the Form window's size.
	
<HR>


</BLOCKQUOTE>

<P>If you double-click the Form window's title, Visual Basic expands the Form window
to a full- screen size. However, with your toolbox and other windows on the screen,
you'll have to use the scrollbars to access various parts of the form. Of course,
if your application is full screen, you'll need to work with the scrollbars to add
controls to the full form.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>This book's Form
	windows typically remain a size at which you can see all the form as well as the
	surrounding windows. Therefore, most of the applications in this book contain fairly
	small Form windows. The book's Form windows will be larger than the default size
	that appears when you first start Visual Basic, but the Form windows will be far
	smaller than full screen. 
<HR>


</BLOCKQUOTE>

<H3 ALIGN="CENTER"><A NAME="Heading4"></A><FONT COLOR="#000077">Controls Provide
the Interface</FONT></H3>
<P>The controls you select for your application's form are important because the
controls (also called tools) provide the application interface for your users. Users
interact with your application by clicking the controls and entering text in the
controls. Placing and sizing controls are perhaps the two most important tasks you
can master at this point.
<H4 ALIGN="CENTER"><A NAME="Heading5"></A><FONT COLOR="#000077">Placing Controls</FONT></H4>
<P>Once you increase the Form window to a reasonable size that your application requires,
your job is to place controls on the form. Use either of these two methods for placing
controls on the form:

<DL>
	<DD><B>1.</B> Double-click any control on the Toolbox window to place that control
	on the Form window. As Figure 3.1 shows, the control appears in the center of the
	Form window.
</DL>

<P><A NAME="Heading6"></A><A HREF="../art/ch03/03cce01.jpg"><FONT COLOR="#000077">Figure
3.1.</FONT></A><FONT COLOR="#000077"> </FONT><I>The command button appears in the
center of the Form window.</I>

<DL>
	<DD><BR>
	If a control appears in the center of the form already, the new control will overwrite
	the existing control. You can drag the new control to a different location, however.
	The eight sizing handles (the small boxes that appear around a selected control)
	indicate that the control is selected. If several controls appear on the Form window,
	the selected controls will display their sizing handles. (Typically, only one control
	will be selected at any one time but you can select multiple controls by holding
	the Ctrl key and clicking several controls.)<BR>
	<BR>
	<B>2.</B> If you click a toolbox control once, the toolbox highlights the control.
	If you then move the mouse cursor to the Form window, the mouse cursor turns into
	a crosshair indicating that you can place the selected control anywhere on the form.
	Whereas a control appears in the center of the Form window automatically as soon
	as you double-click the control, a selected control appears only when you click and
	drag your mouse crosshair on the Form window. The final control appears when you
	release the mouse.<BR>
	<BR>
	The advantage of using this approach to placing controls over the first approach
	is that you don't have to move and resize the control after you've placed it. Figure
	3.2 shows Figure 3.1's command button placed in the center of the form with a double-click
	as well as a new command button placed on the form by dragging the control as described
	here. You can place the control exactly where you want it and at the size you want
	it when you drag the control onto the form.
</DL>

<P><A NAME="Heading7"></A><A HREF="../art/ch03/03cce02.jpg"><FONT COLOR="#000077">Figure
3.2.</FONT></A><FONT COLOR="#000077"> </FONT><I>The second command button is placed
and sized immediately.</I>
<H4 ALIGN="CENTER"><A NAME="Heading8"></A><FONT COLOR="#000077">Sizing and Moving
Controls</FONT></H4>
<P>You can change the size of only a selected control. The eight sizing handles are
the key to resizing the control. You can drag any of the eight sizing handles in
any direction to increase or decrease the control's size. Of course, if you placed
a control on the form by dragging the control, you won't need to resize the control
as often as you will if you double-clicked the toolbox tool to place the control.</P>
<P>You can move a selected control to any area of the Form window by dragging the
control with your mouse. Once you click to select a control, click the control and
hold down the mouse button to drag the control to another part of the Form window.</P>
<P>Sometimes you may want to drag several controls to a new location as a group.
For example, perhaps you've placed a set of command buttons at the bottom of a form
and after adjusting the Form window's size, you determine that you need to move the
buttons down some. Although you can move the command buttons one at a time, you can
more quickly select all the command buttons and move them as a group.</P>
<P>As stated earlier, you can select more than one control by holding the Ctrl key
as you click a control. (Much of the Windows interface, such as Explorer and the
Windows Desktop, lets you select multiple files and icons the same way as Visual
Basic lets you select multiple controls.)</P>
<P>In addition, you can lasso the controls by dragging a selection rectangle around
the controls you want to select as a group. When you release your mouse, the controls
within the selected region will be selected, like those shown in Figure 3.3.<BR>
<BR>
<A NAME="Heading9"></A><A HREF="../art/ch03/03cce03.jpg"><FONT COLOR="#000077">Figure
3.3. </FONT></A><I>Selecting multiple controls when you want to move the entire group
at once.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>Remember how to
	select multiple controls if you find yourself needing to change other properties
	beside the location of controls. If you select multiple controls before changing
	a control property, all controls in the selected range will take on that new property
	value. You can only change the common properties that appear in all of the selected
	controls. 
<HR>


</BLOCKQUOTE>

<H4 ALIGN="CENTER"><A NAME="Heading10"></A><FONT COLOR="#000077">Setting Properties</FONT></H4>
<P>As you add controls to the Form window, the Properties window updates to show
the properties for the currently selected control. The selected control is usually
the control you last placed on the form. Visual Basic lets you see a control's properties
in the Properties window by clicking to select the control or by selecting the control
from the Properties window's drop-down list box, as shown in Figure 3.4.<BR>
<BR>
<A NAME="Heading11"></A><A HREF="../art/ch03/03cce04.jpg"><FONT COLOR="#000077">Figure
3.4. </FONT></A><I>Selecting the control to work with.</I>


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Visual Basic
	programmers often use the generic term object to refer to controls, forms, menus,
	and various other items on the screen and in the code. 
<HR>


</BLOCKQUOTE>

<P>Scroll the Properties window to see the various properties for the selected controls.
Each kind of control supports the same set of properties. Therefore, every command
button you place on the form supports the same properties (and events as well) as
every other command button, but option buttons and text boxes support different sets
of properties than command buttons.</P>
<P>The <TT>Left</TT>, <TT>Top</TT>, <TT>Height</TT>, and <TT>Width</TT> properties
are about the only properties you can set without accessing the Properties window.
As you size and move a control into place, Visual Basic updates the <TT>Left</TT>,
<TT>Top</TT>, <TT>Height</TT>, and <TT>Width</TT> properties according to the control's
placement on the Form window and the control's size. As with the form location and
size measurements, these properties appear in twips (unless you specify a different
value in the <TT>ScaleMode</TT> property). <TT>Left</TT> indicates how far from the
form's left edge the control appears, <TT>Top</TT> indicates how far from the top
of the form the control appears, and the <TT>Height</TT> and <TT>Width</TT> properties
indicate the control's size.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>Even the form
	has properties. Click your Form window and look at the Properties window. The form
	will be the selected object at the top of the Properties window (<TT>Form1</TT> is
	the default name for an application's initial form). 
<HR>


</BLOCKQUOTE>

<P>After you place and size a control, the first property you should modify is the
<TT>Name</TT> property. Although Visual Basic assigns default names to controls when
you place the controls on the Form window, the default names don't indicate the control's
true purpose in your application. In addition, the default names don't contain the
three-letter prefix that describes the control you learned about in Hour 2, &quot;Analyzing
Visual Basic Programs.&quot;</P>
<P>For your reference, Table 3.1 lists common prefixes used for control names. When
you name your Form window's controls, you'll appreciate later that you took the time
to type the three-letter abbreviations at the beginning of the names because you
will be less likely to assign a text box a property that belongs to a command button
control inside an event procedure. (Such an assignment will cause a runtime error.)


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="NOTE"></A><FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>The <TT>Name</TT>
	property is so important that Visual Basic lists the <TT>Name</TT> property first
	(as <TT>(Name)</TT> inside parentheses) in the Properties window instead of alphabetically
	in the Properties window, where the other properties reside. 
<HR>


</BLOCKQUOTE>

<CENTER>
<P><B>Table 3.1. Use these prefix abbreviations before control names. </B>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><B><I>Prefix</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Control</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>cbo</TT></TD>
		<TD ALIGN="LEFT">Combo box</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>chk</TT></TD>
		<TD ALIGN="LEFT">Check box</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>cmd</TT></TD>
		<TD ALIGN="LEFT">Command button</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>dir</TT></TD>
		<TD ALIGN="LEFT">Directory list box</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>drv</TT></TD>
		<TD ALIGN="LEFT">Drive list box</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>fil</TT></TD>
		<TD ALIGN="LEFT">File list box</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>fra</TT></TD>
		<TD ALIGN="LEFT">Frame</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>frm</TT></TD>
		<TD ALIGN="LEFT">Form</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>grd</TT></TD>
		<TD ALIGN="LEFT">Grid</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>hsb</TT></TD>
		<TD ALIGN="LEFT">Horizontal scrollbar</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>img</TT></TD>
		<TD ALIGN="LEFT">Image</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>lbl</TT></TD>
		<TD ALIGN="LEFT">Label</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>lin</TT></TD>
		<TD ALIGN="LEFT">Line</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>lst</TT></TD>
		<TD ALIGN="LEFT">List box</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>mnu</TT></TD>
		<TD ALIGN="LEFT">Menu</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>ole</TT></TD>
		<TD ALIGN="LEFT">OLE client</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>opt</TT></TD>
		<TD ALIGN="LEFT">Option button</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>pic</TT></TD>
		<TD ALIGN="LEFT">Picture box</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>shp</TT></TD>
		<TD ALIGN="LEFT">Shape</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>tmr</TT></TD>
		<TD ALIGN="LEFT">Timer</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>txt</TT></TD>
		<TD ALIGN="LEFT">Text box</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>vsb</TT></TD>
		<TD ALIGN="LEFT">Vertical scrollbar</TD>
	</TR>
</TABLE>
</P>
</CENTER>
<P><FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>A tooltip is a pop-up description
box that appears when the user rests the mouse pointer over a control.</P>
<P>Some property values you set by typing the values directly in the Properties window.
For example, to enter a value for a control's <TT>ToolTipText</TT> property, click
once on the Properties window's <TT>ToolTipText</TT> property and type the tooltip
text.
<CENTER>
<H3><A NAME="Heading12"></A><FONT COLOR="#000077">Giving Your Users Help</FONT></H3>
</CENTER>
<P>The tooltip is a great feature that helps your users and is as easy to implement
as typing text into the control's <TT>ToolTipText</TT> property. Most applications
since the introduction of Windows 95 include tooltips, and there's no reason why
your applications should not include them as well.</P>
<P>Figure 3.5 shows a tooltip that appears in Visual Basic when you rest the mouse
pointer over the Form Layout window toolbar button. The best time to add tooltip
text is when you adjust a new control's properties because you are more likely to
remember the primary purpose for the control. Often, when programmers plan to add
such items later once they &quot;complete&quot; the application, the items to be
added, especially helpful items such as tooltips, are not added.<BR>
<BR>
<A NAME="Heading13"></A><A HREF="../art/ch03/03cce05.jpg"><FONT COLOR="#000077">Figure
3.5.</FONT></A><FONT COLOR="#000077"> </FONT><I>The tooltip pops up to describe an
object.</I></P>
<P>If you want to change a property value, such as the <TT>Name</TT> property, you
can click the <TT>Name</TT> property and enter a new name. As you type, the new name
replaces the original name. If instead of clicking you double-click the property,
Visual Basic highlights the property value and lets you edit the existing value by
pressing your cursor keys and using Insert and Delete to edit the current property
value.


<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>As you select a
	property, read the text that appears at the bottom of the Properties window. The
	text describes the property and serves as a reminder about what some of the more
	obscure properties do. 
<HR>


</BLOCKQUOTE>

<P>Some properties require a selection from a drop-down list box. For example, Figure
3.6 shows a command button's <TT>Visible</TT> property's drop-down list box. The
<TT>Visible</TT> property can either be <TT>True</TT> or <TT>False</TT>. No other
values work for the property, so Visual Basic lets you select from one of those two
values when you click the property value to display the down arrow and open the drop-down
list box.<BR>
<BR>
<A NAME="Heading14"></A><A HREF="../art/ch03/03cce06.jpg"><FONT COLOR="#000077">Figure
3.6.</FONT></A><FONT COLOR="#000077"> </FONT><I>Some properties require a selection
from a list box.</I></P>
<P>If an ellipsis (...) is displayed when you click the property value, such as the
<TT>Font</TT> property when you click the current <TT>Font</TT> property's value,
a dialog box opens when you click the ellipsis. A <TT>Font</TT> property is more
than just a style name or size. The control's <TT>Font</TT> property can take on
all kinds of values and the Font dialog box that appears from the click of the ellipsis
lets you specify all available <TT>Font</TT> property parts. When you close the dialog
box, the compound property is set to the dialog box's specific values.</P>
<P>Some programmers prefer the Categorized view of the Properties window. By default,
the Properties window displays its properties alphabetically (with a possible exception
at the top of the Properties window, such as the <TT>Name</TT> property). When you
click the Categorized tab above the property values, the Properties window changes
to show the properties in an Explorer tree view such as the one in Figure 3.7.<BR>
<BR>
<A NAME="Heading15"></A><A HREF="../art/ch03/03cce07.jpg"><FONT COLOR="#000077">Figure
3.7.<I> </I></FONT></A><I>These property values appear by category type.</I></P>
<P>If you needed to change all of a control's appearance values, such as <TT>Color</TT>
and <TT>Caption</TT>, you could expand the Categorized view's <TT>Appearance</TT>
entry to display all the appearance values together. You then can more quickly change
the appearance than if you had to search through the alphabetical listing of properties.</P>
<P>As you can see, placing a control requires much more involvement with property
values than simply moving and sizing the control. You rarely if ever have to change
all of a control's properties because many of the default values work fine for most
applications. Nevertheless, many property values work to make the control unique
to your specific application.
<CENTER>
<H3><A NAME="Heading16"></A><FONT COLOR="#000077">Named Literals</FONT></H3>
</CENTER>
<P>A named literal, also called a named constant, is a special named value that represents
a fixed value. Visual Basic comes with several named literals and you'll use many
of them in your programs to assign values to controls at runtime.</P>
<P>Consider the drop-down list box that appears when you click on a command button's
<TT>MousePointer</TT> property (see Figure 3.8). The <TT>MousePointer</TT> property
requires a value from <TT>0</TT> to <TT>15</TT> (or <TT>99</TT> for a custom value).
When you set property values at design time, you simply select from the list, and
the descriptions to the right of the numeric values explain what each value is for.
When programming, you will be able to assign property values to properties when the
user runs the program. Although you can assign <TT>2</TT> to the property value to
change the mouse cursor to a crosshair during one part of the running application,
your code will be better if you assign the named literal <TT>vbCrosshair</TT>. Although
<TT>vbCrosshair</TT> is longer to type, you will know what you assigned when you
later look at the project.</P>
<P>We're getting slightly ahead of ourselves discussing runtime property values that
change inside the code such as event procedures. Nevertheless, keep named literals
in mind as you assign values to the Properties window at design time. The named literals
often closely match their Properties window counterparts. When you're ready to use
named literals in subsequent lessons, this book describes the ones available for
the controls being discussed.<BR>
<BR>
<A NAME="Heading17"></A><A HREF="../art/ch03/03cce08.jpg"><FONT COLOR="#000077">Figure
3.8.</FONT></A><FONT COLOR="#000077"> </FONT><I>You can assign a named literal to
this property.</I>
<CENTER>
<H3><A NAME="Heading18"></A><FONT COLOR="#000077">Take a Break!</FONT></H3>
</CENTER>
<P>In this section, you are going to create a project from scratch without the help
of the VB Application Wizard. You'll create a new project, assign controls, and write
event procedure code to hook everything together. The final application will be simple,
but you'll have little trouble understanding the application now that you've become
more familiar with properties and event procedures.</P>
<P>To create your first application, follow these steps:

<DL>
	<DD><B>1. </B>Create a new project by selecting File | New Project and double-clicking
	the Standard EXE icon. Don't save any changes from earlier in this lesson if you
	were following along during the discussion of command buttons and control placement.<BR>
	<B><BR>
	2.</B> Change the form's <TT>Name</TT> property to <TT>frmFirst</TT> and change its
	<TT>Caption</TT> property to <TT>My First Application</TT>. The form's <TT>Caption</TT>
	property text appears in the title bar when you run the application.<BR>
	<B><BR>
	3.</B> Expand the Form window to these property values: <TT>Height 7380</TT> and
	<TT>Width 7095</TT>. You can either drag the Form window's sizing handles until the
	Form window's size coordinates to the right of the toolbar read <TT>7095</TT>x<TT>7380</TT>
	or you can set these two property values yourself by changing the values in the Properties
	window. If you drag the Form window to obtain this size, you can approximate the
	coordinates described here; you don't have to size your Form window exactly to 7,095
	by 7,380 twips.<BR>
	<B><BR>
	4.</B> Click the Label control once. As you learned in Hour 1, &quot;Visual Basic
	at Work,&quot; the Label control is the tool with the capital letter A on the toolbox.
	When you click the Label control, Visual Basic shows the control depressed as if
	it were a command button.<BR>
	5. Move the mouse pointer onto the Form window and drag a Label control toward the
	top of the Form window in the approximate location you see in Figure 3.9.<BR>
	<B><BR>
	6.</B> Change the label's <TT>Name</TT> property to <TT>lblFirst</TT>. Change the
	label's <TT>Caption</TT> property to <TT>VB is fun</TT>.<BR>
	<B><BR>
	7.</B> Click the label's <TT>Font</TT> property value to display the ellipsis. Click
	the ellipsis to display the Font dialog box for the label. Set the font size to 24
	points (a point is <SUP>1</SUP>/72 inch and 24 points is about twice the height of
	a word processor's character on the screen) and set the <TT>Bold</TT> property.<BR>
	As Figure 3.10 shows, the label's text is now large enough to read, but the text
	is not well centered within the label. Change the label's <TT>Alignment</TT> property
	to <TT>2-Center</TT>, and the text centers just fine.<BR>
	<B><BR>
	8.</B> Change the label's <TT>BorderStyle</TT> property to <TT>1-FixedSingle</TT>.
	This property adds a single-line 3D border around the label. You'll see that the
	label's <TT>Height</TT> property is too large, so click the label to display its
	sizing handles and drag the top edge downward to center the text within the label.
</DL>

<P><A NAME="Heading19"></A><A HREF="../art/ch03/03cce09.jpg"><FONT COLOR="#000077">Figure
3.9.</FONT></A><FONT COLOR="#000077"> </FONT><I>A label is this form's first control.</I><BR>
<BR>
<A NAME="Heading20"></A><A HREF="../art/ch03/03cce10.jpg"><FONT COLOR="#000077">Figure
3.10.</FONT></A><FONT COLOR="#000077"><I> </I></FONT><I>The label needs to be centered.</I>

<DL>
	<DD><B>9. </B>Add a command button, but to do so, double-click the command button
	tool on the Toolbox window. The command button appears in the middle of the form
	and you can leave it where it is.<BR>
	<B><BR>
	10. </B>Change the command button's <TT>Name</TT> property to <TT>cmdExit</TT>. Change
	the command button's <TT>Caption</TT> property to <TT>E&amp;xit</TT>. Watch the command
	button as you type the <TT>Caption</TT> property text. The command button's caption
	becomes the text you type with one exception: The <TT>x</TT> is underlined. When
	you precede a <TT>Caption</TT> property's letter with an ampersand (<TT>&amp;</TT>),
	Visual Basic uses that letter for the control's hotkey. Users of your application
	will be able to select the command button not only by clicking with the mouse, but
	also by pressing Alt+X on the keyboard.<BR>
	<B><BR>
	11.</B> The command button will be used to exit the program. When the user clicks
	the command button, your application should end. What happens anytime a user clicks
	a command button? A <TT>Click</TT> event occurs. Therefore, to respond to this event,
	you must write an event procedure for the command button. Visual Basic helps. Double-click
	the form's command button and Visual Basic instantly opens the Code window and displays
	the following wrapper lines for the command button's <TT>Click</TT> event procedure:
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">Private Sub cmdExit_Click()

End Sub</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>

<DL>
	<DD>You only need to fill in the body. The name of the procedure, <TT>cmdExit_Click()</TT>,
	describes both the control and the event being processed by the code. Type <TT>End</TT>
	for the one-word body of the event procedure and close the Code window. <TT>End</TT>
	is now the very first Visual Basic programming language statement you've learned!
	<TT>End</TT> tells Visual Basic to terminate the running application. Therefore,
	the application will terminate when the user clicks the command button.
</DL>



<BLOCKQUOTE>
	<P>
<HR>
<A NAME="TIP"></A><FONT COLOR="#000077"><B>TIP:</B></FONT><B> </B>Indent the body
	of the code from the surrounding wrapper lines as follows so you'll be able to distinguish
	procedures from one another when you read through a list of them:</P>
	<PRE><FONT COLOR="#0066FF">Private Sub cmdExit_Click()
  End
End Sub</FONT></PRE>
	<P>
<HR>


</BLOCKQUOTE>

<PRE></PRE>
<P>Press F5 to run the program and watch your creation appear. As shown in Figure
3.11, the form appears with the label and command button in place.</P>
<P>Terminate the application by clicking the Exit command button. Visual Basic regains
control. (If you had compiled the application, you could run the compiled <TT>.EXE</TT>
file from the Windows Run command or from an icon if you assign the <TT>.EXE</TT>
file to an icon on the Desktop or to an option on the Start menu.)</P>
<P>Save your first application. When you save the project, Visual Basic saves all
the files within the project. Select File | Save Project. Visual Basic asks for the
form's name with a Save File As dialog box (remember that each element of the project
is a separate file). You can select a different drive or pathname if you wish. Save
the form module file under the name <TT>Lesson 3 Form</TT> (Visual Basic automatically
adds the <TT>.FRM</TT> filename extension). Visual Basic now requests the name of
the project with a Save Project As dialog box. Type <TT>Lesson 3 Proj</TT> and click
Save to save the project file (Visual Basic automatically adds the <TT>.VBP</TT>
filename extension). If you were to edit the project, Visual Basic would not need
to request the filenames subsequently now that you've assigned them.<BR>
<BR>
<A NAME="Heading21"></A><A HREF="../art/ch03/03cce11.jpg"><FONT COLOR="#000077">Figure
3.11.</FONT></A><FONT COLOR="#000077"> </FONT><I>Your first running application works
well!</I></P>
<P>Take a rest before starting Hour 4, &quot;Examining Labels, Buttons, and Text
Boxes.&quot; Exit Visual Basic and give your computer's circuits a break as well.
You are well on your way to becoming a Visual Basic guru, so feel good about the
knowledge you've already gained in three short hours.
<CENTER>
<H3><A NAME="Heading22"></A><FONT COLOR="#000077">Summary</FONT></H3>
</CENTER>
<P>This hour you learned how to place controls onto a form and how to size and move
the controls. Once you place controls, you must set the control property values so
that the controls take on the values your application requires. (Don't you wish you
could set your real estate property values just as easily?)</P>
<P>The next hour gets specific and describes these three common controls in detail:
command buttons, labels, and text boxes.
<CENTER>
<H3><A NAME="Heading23"></A><FONT COLOR="#000077">Q&amp;A</FONT></H3>
</CENTER>

<DL>
	<DD><B>Q When do I double-click a toolbox control to place the control on the Form
	window and when do I drag the control onto the Form window?<BR>
	<BR>
	A</B> When you double-click a toolbox control, that control appears on the Form window
	immediately. The double-click requires less work from you to place the control on
	the form. Once the control appears, however, your rest period ends because you have
	to move and size the control properly. By first selecting a control and dragging
	the control onto the form, you select, size, and move the control in one step.<BR>
	<B><BR>
	Q How do I know if a property value requires a value, a selection from a drop-down
	list box, or a dialog box selection?<BR>
	<BR>
	A</B> Just click the property. If nothing happens, type the new property value. If
	a drop-down list box arrow appears, click the arrow to see the selections in the
	list. If an ellipsis appear, click the ellipsis to display the property's dialog
	box.<BR>
	<BR>
	<B>Q Can I create an initial application with the VB Application Wizard and then
	add extra controls to the form?<BR>
	<BR>
	A</B> Certainly! That's the true reason for using the wizard. The wizard creates
	the shell, and then you add to and modify the shell to generate a final application
	that meets your specific needs. The only potential problem right now is that the
	wizard does generate a fairly comprehensive shell, especially if you add Internet
	and database access to the shell. Until you master more of the Visual Basic environment
	and language, you might find that locating the correct spots to change is more difficult
	than creating the application from scratch.
</DL>

<CENTER>
<H3><A NAME="Heading24"></A><FONT COLOR="#000077">Workshop</FONT></H3>
</CENTER>
<P>The quiz questions and exercises are provided for your further understanding.
See Appendix C, &quot;Answers,&quot; for answers.
<CENTER>
<H4><A NAME="Heading25"></A><FONT COLOR="#000077">Quiz</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> What is the fastest way to place a control on the form?<BR>
	<B><BR>
	2.</B> What are a control's sizing handles for?<BR>
	<B><BR>
	3. </B>How can you select multiple controls?<BR>
	<B><BR>
	4.</B> True or false: Some properties change automatically as you move and resize
	controls.<BR>
	<B><BR>
	5.</B> Which form property sets the title that appears in the form's title bar?<BR>
	<B><BR>
	6.</B> What is the difference between an object and a control?<BR>
	<B><BR>
	7.</B> When is the best time to add a tooltip to a control?<BR>
	<B><BR>
	8.</B> Why do some controls display an ellipsis when you click certain property values?
</DL>

<CENTER>
<H4><A NAME="Heading26"></A><FONT COLOR="#000077">Exercises</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> Create another application from scratch. Add two command buttons and
	one label between them. Make the label's <TT>Caption</TT> property blank when you
	place the label on the form. When the user clicks the first command button, a caption
	should appear on the label that reads <TT>Clicked!</TT>. You'll need to place the
	following Visual Basic statement inside one of the application's event procedures
	to do this:
</DL>



<BLOCKQUOTE>
	<PRE><FONT COLOR="#0066FF">lblClick.Caption = &quot;Clicked!&quot;</FONT></PRE>

</BLOCKQUOTE>

<PRE><FONT COLOR="#0066FF"></FONT></PRE>

<DL>
	<DD>Save the project and form module so you can modify the application later if you
	want to do so.<BR>
	<BR>
	<B>2.</B> Load the project you created in the previous exercise and add tooltips
	to the two labels and to the command button. Run the application and test the tooltips
	to see if they work.
	<CENTER>
	<DD><BR>
	<BR>
	<A HREF="ch02.htm"><IMG SRC="../buttons/blanprev.gif" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
	BORDER="0"></A><A HREF="../index.html"><IMG SRC="../buttons/blantoc.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="ch04.htm"><IMG SRC="../buttons/blannext.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="#heading1"><IMG SRC="../buttons/blantop.gif"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A></CENTER>
</DL>



</BODY>

</HTML>
